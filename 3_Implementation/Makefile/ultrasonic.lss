
bin\Debug\ultrasonic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000120  00800100  000028b2  00002966  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000028b2  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800220  00800220  00002a86  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00002a86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 000001c0  00000000  00000000  00002a89  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000002cd  00000000  00000000  00002c49  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002dda  00000000  00000000  00002f16  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001572  00000000  00000000  00005cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001d7d  00000000  00000000  00007262  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000260  00000000  00000000  00008fe0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045b  00000000  00000000  00009240  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  0000969b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a009  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 eb       	ldi	r30, 0xB2	; 178
      7c:	f8 e2       	ldi	r31, 0x28	; 40
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a0 32       	cpi	r26, 0x20	; 32
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	12 e0       	ldi	r17, 0x02	; 2
      8c:	a0 e2       	ldi	r26, 0x20	; 32
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a4 32       	cpi	r26, 0x24	; 36
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 95 0b 	call	0x172a	; 0x172a <main>
      9e:	0c 94 57 14 	jmp	0x28ae	; 0x28ae <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <HCSR04Init>:
void HCSR04Trigger();

void lcd_command( unsigned char );

void HCSR04Init()
{
      a6:	df 93       	push	r29
      a8:	cf 93       	push	r28
      aa:	cd b7       	in	r28, 0x3d	; 61
      ac:	de b7       	in	r29, 0x3e	; 62

	// we're setting the trigger pin as output as it will generate ultrasonic sound wave
	US_DDR|=(1<<US_TRIG_POS);
      ae:	a7 e2       	ldi	r26, 0x27	; 39
      b0:	b0 e0       	ldi	r27, 0x00	; 0
      b2:	e7 e2       	ldi	r30, 0x27	; 39
      b4:	f0 e0       	ldi	r31, 0x00	; 0
      b6:	80 81       	ld	r24, Z
      b8:	81 60       	ori	r24, 0x01	; 1
      ba:	8c 93       	st	X, r24
}
      bc:	cf 91       	pop	r28
      be:	df 91       	pop	r29
      c0:	08 95       	ret

000000c2 <HCSR04Trigger>:

void HCSR04Trigger()
{   // this function will generate ultrasonic sound wave for 15 microseconds
      c2:	df 93       	push	r29
      c4:	cf 93       	push	r28
      c6:	cd b7       	in	r28, 0x3d	; 61
      c8:	de b7       	in	r29, 0x3e	; 62
      ca:	68 97       	sbiw	r28, 0x18	; 24
      cc:	0f b6       	in	r0, 0x3f	; 63
      ce:	f8 94       	cli
      d0:	de bf       	out	0x3e, r29	; 62
      d2:	0f be       	out	0x3f, r0	; 63
      d4:	cd bf       	out	0x3d, r28	; 61
	//Send a 10uS pulse on trigger line

	US_PORT|=(1<<US_TRIG_POS);	//high
      d6:	a8 e2       	ldi	r26, 0x28	; 40
      d8:	b0 e0       	ldi	r27, 0x00	; 0
      da:	e8 e2       	ldi	r30, 0x28	; 40
      dc:	f0 e0       	ldi	r31, 0x00	; 0
      de:	80 81       	ld	r24, Z
      e0:	81 60       	ori	r24, 0x01	; 1
      e2:	8c 93       	st	X, r24
      e4:	80 e0       	ldi	r24, 0x00	; 0
      e6:	90 e0       	ldi	r25, 0x00	; 0
      e8:	a0 e7       	ldi	r26, 0x70	; 112
      ea:	b1 e4       	ldi	r27, 0x41	; 65
      ec:	8d 8b       	std	Y+21, r24	; 0x15
      ee:	9e 8b       	std	Y+22, r25	; 0x16
      f0:	af 8b       	std	Y+23, r26	; 0x17
      f2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
      f4:	6d 89       	ldd	r22, Y+21	; 0x15
      f6:	7e 89       	ldd	r23, Y+22	; 0x16
      f8:	8f 89       	ldd	r24, Y+23	; 0x17
      fa:	98 8d       	ldd	r25, Y+24	; 0x18
      fc:	2b ea       	ldi	r18, 0xAB	; 171
      fe:	3a ea       	ldi	r19, 0xAA	; 170
     100:	4a ea       	ldi	r20, 0xAA	; 170
     102:	50 e4       	ldi	r21, 0x40	; 64
     104:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__mulsf3>
     108:	dc 01       	movw	r26, r24
     10a:	cb 01       	movw	r24, r22
     10c:	89 8b       	std	Y+17, r24	; 0x11
     10e:	9a 8b       	std	Y+18, r25	; 0x12
     110:	ab 8b       	std	Y+19, r26	; 0x13
     112:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     114:	69 89       	ldd	r22, Y+17	; 0x11
     116:	7a 89       	ldd	r23, Y+18	; 0x12
     118:	8b 89       	ldd	r24, Y+19	; 0x13
     11a:	9c 89       	ldd	r25, Y+20	; 0x14
     11c:	20 e0       	ldi	r18, 0x00	; 0
     11e:	30 e0       	ldi	r19, 0x00	; 0
     120:	40 e8       	ldi	r20, 0x80	; 128
     122:	5f e3       	ldi	r21, 0x3F	; 63
     124:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__ltsf2>
     128:	88 23       	and	r24, r24
     12a:	1c f4       	brge	.+6      	; 0x132 <HCSR04Trigger+0x70>
		__ticks = 1;
     12c:	81 e0       	ldi	r24, 0x01	; 1
     12e:	88 8b       	std	Y+16, r24	; 0x10
     130:	91 c0       	rjmp	.+290    	; 0x254 <HCSR04Trigger+0x192>
	else if (__tmp > 255)
     132:	69 89       	ldd	r22, Y+17	; 0x11
     134:	7a 89       	ldd	r23, Y+18	; 0x12
     136:	8b 89       	ldd	r24, Y+19	; 0x13
     138:	9c 89       	ldd	r25, Y+20	; 0x14
     13a:	20 e0       	ldi	r18, 0x00	; 0
     13c:	30 e0       	ldi	r19, 0x00	; 0
     13e:	4f e7       	ldi	r20, 0x7F	; 127
     140:	53 e4       	ldi	r21, 0x43	; 67
     142:	0e 94 89 10 	call	0x2112	; 0x2112 <__gtsf2>
     146:	18 16       	cp	r1, r24
     148:	0c f0       	brlt	.+2      	; 0x14c <HCSR04Trigger+0x8a>
     14a:	7b c0       	rjmp	.+246    	; 0x242 <HCSR04Trigger+0x180>
	{
		_delay_ms(__us / 1000.0);
     14c:	6d 89       	ldd	r22, Y+21	; 0x15
     14e:	7e 89       	ldd	r23, Y+22	; 0x16
     150:	8f 89       	ldd	r24, Y+23	; 0x17
     152:	98 8d       	ldd	r25, Y+24	; 0x18
     154:	20 e0       	ldi	r18, 0x00	; 0
     156:	30 e0       	ldi	r19, 0x00	; 0
     158:	4a e7       	ldi	r20, 0x7A	; 122
     15a:	54 e4       	ldi	r21, 0x44	; 68
     15c:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <__divsf3>
     160:	dc 01       	movw	r26, r24
     162:	cb 01       	movw	r24, r22
     164:	8c 87       	std	Y+12, r24	; 0x0c
     166:	9d 87       	std	Y+13, r25	; 0x0d
     168:	ae 87       	std	Y+14, r26	; 0x0e
     16a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     16c:	6c 85       	ldd	r22, Y+12	; 0x0c
     16e:	7d 85       	ldd	r23, Y+13	; 0x0d
     170:	8e 85       	ldd	r24, Y+14	; 0x0e
     172:	9f 85       	ldd	r25, Y+15	; 0x0f
     174:	20 e0       	ldi	r18, 0x00	; 0
     176:	30 e0       	ldi	r19, 0x00	; 0
     178:	4a e7       	ldi	r20, 0x7A	; 122
     17a:	55 e4       	ldi	r21, 0x45	; 69
     17c:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__mulsf3>
     180:	dc 01       	movw	r26, r24
     182:	cb 01       	movw	r24, r22
     184:	88 87       	std	Y+8, r24	; 0x08
     186:	99 87       	std	Y+9, r25	; 0x09
     188:	aa 87       	std	Y+10, r26	; 0x0a
     18a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     18c:	68 85       	ldd	r22, Y+8	; 0x08
     18e:	79 85       	ldd	r23, Y+9	; 0x09
     190:	8a 85       	ldd	r24, Y+10	; 0x0a
     192:	9b 85       	ldd	r25, Y+11	; 0x0b
     194:	20 e0       	ldi	r18, 0x00	; 0
     196:	30 e0       	ldi	r19, 0x00	; 0
     198:	40 e8       	ldi	r20, 0x80	; 128
     19a:	5f e3       	ldi	r21, 0x3F	; 63
     19c:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__ltsf2>
     1a0:	88 23       	and	r24, r24
     1a2:	2c f4       	brge	.+10     	; 0x1ae <HCSR04Trigger+0xec>
		__ticks = 1;
     1a4:	81 e0       	ldi	r24, 0x01	; 1
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	9f 83       	std	Y+7, r25	; 0x07
     1aa:	8e 83       	std	Y+6, r24	; 0x06
     1ac:	3f c0       	rjmp	.+126    	; 0x22c <HCSR04Trigger+0x16a>
	else if (__tmp > 65535)
     1ae:	68 85       	ldd	r22, Y+8	; 0x08
     1b0:	79 85       	ldd	r23, Y+9	; 0x09
     1b2:	8a 85       	ldd	r24, Y+10	; 0x0a
     1b4:	9b 85       	ldd	r25, Y+11	; 0x0b
     1b6:	20 e0       	ldi	r18, 0x00	; 0
     1b8:	3f ef       	ldi	r19, 0xFF	; 255
     1ba:	4f e7       	ldi	r20, 0x7F	; 127
     1bc:	57 e4       	ldi	r21, 0x47	; 71
     1be:	0e 94 89 10 	call	0x2112	; 0x2112 <__gtsf2>
     1c2:	18 16       	cp	r1, r24
     1c4:	4c f5       	brge	.+82     	; 0x218 <HCSR04Trigger+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1c6:	6c 85       	ldd	r22, Y+12	; 0x0c
     1c8:	7d 85       	ldd	r23, Y+13	; 0x0d
     1ca:	8e 85       	ldd	r24, Y+14	; 0x0e
     1cc:	9f 85       	ldd	r25, Y+15	; 0x0f
     1ce:	20 e0       	ldi	r18, 0x00	; 0
     1d0:	30 e0       	ldi	r19, 0x00	; 0
     1d2:	40 e2       	ldi	r20, 0x20	; 32
     1d4:	51 e4       	ldi	r21, 0x41	; 65
     1d6:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__mulsf3>
     1da:	dc 01       	movw	r26, r24
     1dc:	cb 01       	movw	r24, r22
     1de:	bc 01       	movw	r22, r24
     1e0:	cd 01       	movw	r24, r26
     1e2:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__fixunssfsi>
     1e6:	dc 01       	movw	r26, r24
     1e8:	cb 01       	movw	r24, r22
     1ea:	9f 83       	std	Y+7, r25	; 0x07
     1ec:	8e 83       	std	Y+6, r24	; 0x06
     1ee:	0f c0       	rjmp	.+30     	; 0x20e <HCSR04Trigger+0x14c>
     1f0:	80 e9       	ldi	r24, 0x90	; 144
     1f2:	91 e0       	ldi	r25, 0x01	; 1
     1f4:	9d 83       	std	Y+5, r25	; 0x05
     1f6:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1f8:	8c 81       	ldd	r24, Y+4	; 0x04
     1fa:	9d 81       	ldd	r25, Y+5	; 0x05
     1fc:	01 97       	sbiw	r24, 0x01	; 1
     1fe:	f1 f7       	brne	.-4      	; 0x1fc <HCSR04Trigger+0x13a>
     200:	9d 83       	std	Y+5, r25	; 0x05
     202:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     204:	8e 81       	ldd	r24, Y+6	; 0x06
     206:	9f 81       	ldd	r25, Y+7	; 0x07
     208:	01 97       	sbiw	r24, 0x01	; 1
     20a:	9f 83       	std	Y+7, r25	; 0x07
     20c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     20e:	8e 81       	ldd	r24, Y+6	; 0x06
     210:	9f 81       	ldd	r25, Y+7	; 0x07
     212:	00 97       	sbiw	r24, 0x00	; 0
     214:	69 f7       	brne	.-38     	; 0x1f0 <HCSR04Trigger+0x12e>
     216:	24 c0       	rjmp	.+72     	; 0x260 <HCSR04Trigger+0x19e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     218:	68 85       	ldd	r22, Y+8	; 0x08
     21a:	79 85       	ldd	r23, Y+9	; 0x09
     21c:	8a 85       	ldd	r24, Y+10	; 0x0a
     21e:	9b 85       	ldd	r25, Y+11	; 0x0b
     220:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__fixunssfsi>
     224:	dc 01       	movw	r26, r24
     226:	cb 01       	movw	r24, r22
     228:	9f 83       	std	Y+7, r25	; 0x07
     22a:	8e 83       	std	Y+6, r24	; 0x06
     22c:	8e 81       	ldd	r24, Y+6	; 0x06
     22e:	9f 81       	ldd	r25, Y+7	; 0x07
     230:	9b 83       	std	Y+3, r25	; 0x03
     232:	8a 83       	std	Y+2, r24	; 0x02
     234:	8a 81       	ldd	r24, Y+2	; 0x02
     236:	9b 81       	ldd	r25, Y+3	; 0x03
     238:	01 97       	sbiw	r24, 0x01	; 1
     23a:	f1 f7       	brne	.-4      	; 0x238 <HCSR04Trigger+0x176>
     23c:	9b 83       	std	Y+3, r25	; 0x03
     23e:	8a 83       	std	Y+2, r24	; 0x02
     240:	0f c0       	rjmp	.+30     	; 0x260 <HCSR04Trigger+0x19e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     242:	69 89       	ldd	r22, Y+17	; 0x11
     244:	7a 89       	ldd	r23, Y+18	; 0x12
     246:	8b 89       	ldd	r24, Y+19	; 0x13
     248:	9c 89       	ldd	r25, Y+20	; 0x14
     24a:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__fixunssfsi>
     24e:	dc 01       	movw	r26, r24
     250:	cb 01       	movw	r24, r22
     252:	88 8b       	std	Y+16, r24	; 0x10
     254:	88 89       	ldd	r24, Y+16	; 0x10
     256:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     258:	89 81       	ldd	r24, Y+1	; 0x01
     25a:	8a 95       	dec	r24
     25c:	f1 f7       	brne	.-4      	; 0x25a <HCSR04Trigger+0x198>
     25e:	89 83       	std	Y+1, r24	; 0x01

	_delay_us(15);				//wait 15uS

	US_PORT&=~(1<<US_TRIG_POS);	//low
     260:	a8 e2       	ldi	r26, 0x28	; 40
     262:	b0 e0       	ldi	r27, 0x00	; 0
     264:	e8 e2       	ldi	r30, 0x28	; 40
     266:	f0 e0       	ldi	r31, 0x00	; 0
     268:	80 81       	ld	r24, Z
     26a:	8e 7f       	andi	r24, 0xFE	; 254
     26c:	8c 93       	st	X, r24
}
     26e:	68 96       	adiw	r28, 0x18	; 24
     270:	0f b6       	in	r0, 0x3f	; 63
     272:	f8 94       	cli
     274:	de bf       	out	0x3e, r29	; 62
     276:	0f be       	out	0x3f, r0	; 63
     278:	cd bf       	out	0x3d, r28	; 61
     27a:	cf 91       	pop	r28
     27c:	df 91       	pop	r29
     27e:	08 95       	ret

00000280 <GetPulseWidth>:

uint16_t GetPulseWidth()
{
     280:	df 93       	push	r29
     282:	cf 93       	push	r28
     284:	cd b7       	in	r28, 0x3d	; 61
     286:	de b7       	in	r29, 0x3e	; 62
     288:	2a 97       	sbiw	r28, 0x0a	; 10
     28a:	0f b6       	in	r0, 0x3f	; 63
     28c:	f8 94       	cli
     28e:	de bf       	out	0x3e, r29	; 62
     290:	0f be       	out	0x3f, r0	; 63
     292:	cd bf       	out	0x3d, r28	; 61

	uint32_t i,result;

	// Section - 1: the following lines of code before the section - 2 is checking if the ultrasonic is working or not
	// it check the echo pin for a certain amount of time. If there is no signal it means the sensor is not working or not connect properly
	for(i=0;i<600000;i++)
     294:	1d 82       	std	Y+5, r1	; 0x05
     296:	1e 82       	std	Y+6, r1	; 0x06
     298:	1f 82       	std	Y+7, r1	; 0x07
     29a:	18 86       	std	Y+8, r1	; 0x08
     29c:	14 c0       	rjmp	.+40     	; 0x2c6 <GetPulseWidth+0x46>
	{
		if(!(US_PIN & (1<<US_ECHO_POS)))
     29e:	e6 e2       	ldi	r30, 0x26	; 38
     2a0:	f0 e0       	ldi	r31, 0x00	; 0
     2a2:	80 81       	ld	r24, Z
     2a4:	88 2f       	mov	r24, r24
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	82 70       	andi	r24, 0x02	; 2
     2aa:	90 70       	andi	r25, 0x00	; 0
     2ac:	00 97       	sbiw	r24, 0x00	; 0
     2ae:	b9 f4       	brne	.+46     	; 0x2de <GetPulseWidth+0x5e>

	uint32_t i,result;

	// Section - 1: the following lines of code before the section - 2 is checking if the ultrasonic is working or not
	// it check the echo pin for a certain amount of time. If there is no signal it means the sensor is not working or not connect properly
	for(i=0;i<600000;i++)
     2b0:	8d 81       	ldd	r24, Y+5	; 0x05
     2b2:	9e 81       	ldd	r25, Y+6	; 0x06
     2b4:	af 81       	ldd	r26, Y+7	; 0x07
     2b6:	b8 85       	ldd	r27, Y+8	; 0x08
     2b8:	01 96       	adiw	r24, 0x01	; 1
     2ba:	a1 1d       	adc	r26, r1
     2bc:	b1 1d       	adc	r27, r1
     2be:	8d 83       	std	Y+5, r24	; 0x05
     2c0:	9e 83       	std	Y+6, r25	; 0x06
     2c2:	af 83       	std	Y+7, r26	; 0x07
     2c4:	b8 87       	std	Y+8, r27	; 0x08
     2c6:	8d 81       	ldd	r24, Y+5	; 0x05
     2c8:	9e 81       	ldd	r25, Y+6	; 0x06
     2ca:	af 81       	ldd	r26, Y+7	; 0x07
     2cc:	b8 85       	ldd	r27, Y+8	; 0x08
     2ce:	80 3c       	cpi	r24, 0xC0	; 192
     2d0:	27 e2       	ldi	r18, 0x27	; 39
     2d2:	92 07       	cpc	r25, r18
     2d4:	29 e0       	ldi	r18, 0x09	; 9
     2d6:	a2 07       	cpc	r26, r18
     2d8:	20 e0       	ldi	r18, 0x00	; 0
     2da:	b2 07       	cpc	r27, r18
     2dc:	00 f3       	brcs	.-64     	; 0x29e <GetPulseWidth+0x1e>
		continue;	//Line is still low, so wait
		else
		break;		//High edge detected, so break.
	}

	if(i==600000)
     2de:	8d 81       	ldd	r24, Y+5	; 0x05
     2e0:	9e 81       	ldd	r25, Y+6	; 0x06
     2e2:	af 81       	ldd	r26, Y+7	; 0x07
     2e4:	b8 85       	ldd	r27, Y+8	; 0x08
     2e6:	80 3c       	cpi	r24, 0xC0	; 192
     2e8:	27 e2       	ldi	r18, 0x27	; 39
     2ea:	92 07       	cpc	r25, r18
     2ec:	29 e0       	ldi	r18, 0x09	; 9
     2ee:	a2 07       	cpc	r26, r18
     2f0:	20 e0       	ldi	r18, 0x00	; 0
     2f2:	b2 07       	cpc	r27, r18
     2f4:	29 f4       	brne	.+10     	; 0x300 <GetPulseWidth+0x80>
	return US_ERROR;	//Indicates time out
     2f6:	8f ef       	ldi	r24, 0xFF	; 255
     2f8:	9f ef       	ldi	r25, 0xFF	; 255
     2fa:	9a 87       	std	Y+10, r25	; 0x0a
     2fc:	89 87       	std	Y+9, r24	; 0x09
     2fe:	72 c0       	rjmp	.+228    	; 0x3e4 <GetPulseWidth+0x164>

	//High Edge Found

	// Section -2 : This section is all about preparing the timer for counting the time of the pulse. Timers in microcontrllers is used for timimg operation
	//Setup Timer1
	TCCR1A=0X00;
     300:	e0 e8       	ldi	r30, 0x80	; 128
     302:	f0 e0       	ldi	r31, 0x00	; 0
     304:	10 82       	st	Z, r1
	TCCR1B=(1<<CS11);	// This line sets the resolution of the timer. Maximum of how much value it should count.
     306:	e1 e8       	ldi	r30, 0x81	; 129
     308:	f0 e0       	ldi	r31, 0x00	; 0
     30a:	82 e0       	ldi	r24, 0x02	; 2
     30c:	80 83       	st	Z, r24
	TCNT1=0x00;			// This line start the counter to start counting time
     30e:	e4 e8       	ldi	r30, 0x84	; 132
     310:	f0 e0       	ldi	r31, 0x00	; 0
     312:	11 82       	std	Z+1, r1	; 0x01
     314:	10 82       	st	Z, r1

	// Section -3 : This section checks weather the there is any object or not
	for(i=0;i<600000;i++)                // the 600000 value is used randomly to denote a very small amount of time, almost 40 miliseconds
     316:	1d 82       	std	Y+5, r1	; 0x05
     318:	1e 82       	std	Y+6, r1	; 0x06
     31a:	1f 82       	std	Y+7, r1	; 0x07
     31c:	18 86       	std	Y+8, r1	; 0x08
     31e:	1c c0       	rjmp	.+56     	; 0x358 <GetPulseWidth+0xd8>
	{
		if(US_PIN & (1<<US_ECHO_POS))
     320:	e6 e2       	ldi	r30, 0x26	; 38
     322:	f0 e0       	ldi	r31, 0x00	; 0
     324:	80 81       	ld	r24, Z
     326:	88 2f       	mov	r24, r24
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	82 70       	andi	r24, 0x02	; 2
     32c:	90 70       	andi	r25, 0x00	; 0
     32e:	00 97       	sbiw	r24, 0x00	; 0
     330:	f9 f0       	breq	.+62     	; 0x370 <GetPulseWidth+0xf0>
		{
			if(TCNT1 > 60000) break; else continue;   // if the TCNT1 value gets higher than 60000 it means there is not object in the range of the sensor
     332:	e4 e8       	ldi	r30, 0x84	; 132
     334:	f0 e0       	ldi	r31, 0x00	; 0
     336:	80 81       	ld	r24, Z
     338:	91 81       	ldd	r25, Z+1	; 0x01
     33a:	2a ee       	ldi	r18, 0xEA	; 234
     33c:	81 36       	cpi	r24, 0x61	; 97
     33e:	92 07       	cpc	r25, r18
     340:	b8 f4       	brcc	.+46     	; 0x370 <GetPulseWidth+0xf0>
	TCCR1A=0X00;
	TCCR1B=(1<<CS11);	// This line sets the resolution of the timer. Maximum of how much value it should count.
	TCNT1=0x00;			// This line start the counter to start counting time

	// Section -3 : This section checks weather the there is any object or not
	for(i=0;i<600000;i++)                // the 600000 value is used randomly to denote a very small amount of time, almost 40 miliseconds
     342:	8d 81       	ldd	r24, Y+5	; 0x05
     344:	9e 81       	ldd	r25, Y+6	; 0x06
     346:	af 81       	ldd	r26, Y+7	; 0x07
     348:	b8 85       	ldd	r27, Y+8	; 0x08
     34a:	01 96       	adiw	r24, 0x01	; 1
     34c:	a1 1d       	adc	r26, r1
     34e:	b1 1d       	adc	r27, r1
     350:	8d 83       	std	Y+5, r24	; 0x05
     352:	9e 83       	std	Y+6, r25	; 0x06
     354:	af 83       	std	Y+7, r26	; 0x07
     356:	b8 87       	std	Y+8, r27	; 0x08
     358:	8d 81       	ldd	r24, Y+5	; 0x05
     35a:	9e 81       	ldd	r25, Y+6	; 0x06
     35c:	af 81       	ldd	r26, Y+7	; 0x07
     35e:	b8 85       	ldd	r27, Y+8	; 0x08
     360:	80 3c       	cpi	r24, 0xC0	; 192
     362:	27 e2       	ldi	r18, 0x27	; 39
     364:	92 07       	cpc	r25, r18
     366:	29 e0       	ldi	r18, 0x09	; 9
     368:	a2 07       	cpc	r26, r18
     36a:	20 e0       	ldi	r18, 0x00	; 0
     36c:	b2 07       	cpc	r27, r18
     36e:	c0 f2       	brcs	.-80     	; 0x320 <GetPulseWidth+0xa0>
		}
		else
		break;
	}

	if(i==600000)
     370:	8d 81       	ldd	r24, Y+5	; 0x05
     372:	9e 81       	ldd	r25, Y+6	; 0x06
     374:	af 81       	ldd	r26, Y+7	; 0x07
     376:	b8 85       	ldd	r27, Y+8	; 0x08
     378:	80 3c       	cpi	r24, 0xC0	; 192
     37a:	27 e2       	ldi	r18, 0x27	; 39
     37c:	92 07       	cpc	r25, r18
     37e:	29 e0       	ldi	r18, 0x09	; 9
     380:	a2 07       	cpc	r26, r18
     382:	20 e0       	ldi	r18, 0x00	; 0
     384:	b2 07       	cpc	r27, r18
     386:	29 f4       	brne	.+10     	; 0x392 <GetPulseWidth+0x112>
	return US_NO_OBSTACLE;	//Indicates time out
     388:	8e ef       	ldi	r24, 0xFE	; 254
     38a:	9f ef       	ldi	r25, 0xFF	; 255
     38c:	9a 87       	std	Y+10, r25	; 0x0a
     38e:	89 87       	std	Y+9, r24	; 0x09
     390:	29 c0       	rjmp	.+82     	; 0x3e4 <GetPulseWidth+0x164>

	//Falling edge found

	result=TCNT1;          // microcontroller stores the the value of the counted pulse time in the TCNT1 register. So, we're returning this value to the
     392:	e4 e8       	ldi	r30, 0x84	; 132
     394:	f0 e0       	ldi	r31, 0x00	; 0
     396:	80 81       	ld	r24, Z
     398:	91 81       	ldd	r25, Z+1	; 0x01
     39a:	cc 01       	movw	r24, r24
     39c:	a0 e0       	ldi	r26, 0x00	; 0
     39e:	b0 e0       	ldi	r27, 0x00	; 0
     3a0:	89 83       	std	Y+1, r24	; 0x01
     3a2:	9a 83       	std	Y+2, r25	; 0x02
     3a4:	ab 83       	std	Y+3, r26	; 0x03
     3a6:	bc 83       	std	Y+4, r27	; 0x04
	// main function for utilizing it later

	//Stop Timer
	TCCR1B=0x00;
     3a8:	e1 e8       	ldi	r30, 0x81	; 129
     3aa:	f0 e0       	ldi	r31, 0x00	; 0
     3ac:	10 82       	st	Z, r1

	if(result > 60000)
     3ae:	89 81       	ldd	r24, Y+1	; 0x01
     3b0:	9a 81       	ldd	r25, Y+2	; 0x02
     3b2:	ab 81       	ldd	r26, Y+3	; 0x03
     3b4:	bc 81       	ldd	r27, Y+4	; 0x04
     3b6:	81 36       	cpi	r24, 0x61	; 97
     3b8:	2a ee       	ldi	r18, 0xEA	; 234
     3ba:	92 07       	cpc	r25, r18
     3bc:	20 e0       	ldi	r18, 0x00	; 0
     3be:	a2 07       	cpc	r26, r18
     3c0:	20 e0       	ldi	r18, 0x00	; 0
     3c2:	b2 07       	cpc	r27, r18
     3c4:	28 f0       	brcs	.+10     	; 0x3d0 <GetPulseWidth+0x150>
	return US_NO_OBSTACLE;	//No obstacle
     3c6:	8e ef       	ldi	r24, 0xFE	; 254
     3c8:	9f ef       	ldi	r25, 0xFF	; 255
     3ca:	9a 87       	std	Y+10, r25	; 0x0a
     3cc:	89 87       	std	Y+9, r24	; 0x09
     3ce:	0a c0       	rjmp	.+20     	; 0x3e4 <GetPulseWidth+0x164>
	else
	return (result>>1);
     3d0:	89 81       	ldd	r24, Y+1	; 0x01
     3d2:	9a 81       	ldd	r25, Y+2	; 0x02
     3d4:	ab 81       	ldd	r26, Y+3	; 0x03
     3d6:	bc 81       	ldd	r27, Y+4	; 0x04
     3d8:	b6 95       	lsr	r27
     3da:	a7 95       	ror	r26
     3dc:	97 95       	ror	r25
     3de:	87 95       	ror	r24
     3e0:	9a 87       	std	Y+10, r25	; 0x0a
     3e2:	89 87       	std	Y+9, r24	; 0x09
     3e4:	89 85       	ldd	r24, Y+9	; 0x09
     3e6:	9a 85       	ldd	r25, Y+10	; 0x0a
}
     3e8:	2a 96       	adiw	r28, 0x0a	; 10
     3ea:	0f b6       	in	r0, 0x3f	; 63
     3ec:	f8 94       	cli
     3ee:	de bf       	out	0x3e, r29	; 62
     3f0:	0f be       	out	0x3f, r0	; 63
     3f2:	cd bf       	out	0x3d, r28	; 61
     3f4:	cf 91       	pop	r28
     3f6:	df 91       	pop	r29
     3f8:	08 95       	ret

000003fa <initialize>:
Video: https://www.youtube.com/watch?v=7-DK8kNHvlA&list=PLE72E4CFE73BD1DE1&index=19
Article: https://newbiehack.com/MicrocontrollersABeginnersGuideIntroductionandInterfacinganLCD.aspx
The article clearly explains the working of the LCD. Please read it throughly
*/
void initialize (void)
{
     3fa:	df 93       	push	r29
     3fc:	cf 93       	push	r28
     3fe:	cd b7       	in	r28, 0x3d	; 61
     400:	de b7       	in	r29, 0x3e	; 62
     402:	6c 97       	sbiw	r28, 0x1c	; 28
     404:	0f b6       	in	r0, 0x3f	; 63
     406:	f8 94       	cli
     408:	de bf       	out	0x3e, r29	; 62
     40a:	0f be       	out	0x3f, r0	; 63
     40c:	cd bf       	out	0x3d, r28	; 61
	lcd_data_dir = 0xFF;     // this will set the LCD pins connected on the microcontroller as output
     40e:	ea e2       	ldi	r30, 0x2A	; 42
     410:	f0 e0       	ldi	r31, 0x00	; 0
     412:	8f ef       	ldi	r24, 0xFF	; 255
     414:	80 83       	st	Z, r24
     416:	80 e0       	ldi	r24, 0x00	; 0
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	a0 e7       	ldi	r26, 0x70	; 112
     41c:	b1 e4       	ldi	r27, 0x41	; 65
     41e:	89 8f       	std	Y+25, r24	; 0x19
     420:	9a 8f       	std	Y+26, r25	; 0x1a
     422:	ab 8f       	std	Y+27, r26	; 0x1b
     424:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     426:	69 8d       	ldd	r22, Y+25	; 0x19
     428:	7a 8d       	ldd	r23, Y+26	; 0x1a
     42a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     42c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     42e:	20 e0       	ldi	r18, 0x00	; 0
     430:	30 e0       	ldi	r19, 0x00	; 0
     432:	4a e7       	ldi	r20, 0x7A	; 122
     434:	55 e4       	ldi	r21, 0x45	; 69
     436:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__mulsf3>
     43a:	dc 01       	movw	r26, r24
     43c:	cb 01       	movw	r24, r22
     43e:	8d 8b       	std	Y+21, r24	; 0x15
     440:	9e 8b       	std	Y+22, r25	; 0x16
     442:	af 8b       	std	Y+23, r26	; 0x17
     444:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     446:	6d 89       	ldd	r22, Y+21	; 0x15
     448:	7e 89       	ldd	r23, Y+22	; 0x16
     44a:	8f 89       	ldd	r24, Y+23	; 0x17
     44c:	98 8d       	ldd	r25, Y+24	; 0x18
     44e:	20 e0       	ldi	r18, 0x00	; 0
     450:	30 e0       	ldi	r19, 0x00	; 0
     452:	40 e8       	ldi	r20, 0x80	; 128
     454:	5f e3       	ldi	r21, 0x3F	; 63
     456:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__ltsf2>
     45a:	88 23       	and	r24, r24
     45c:	2c f4       	brge	.+10     	; 0x468 <initialize+0x6e>
		__ticks = 1;
     45e:	81 e0       	ldi	r24, 0x01	; 1
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	9c 8b       	std	Y+20, r25	; 0x14
     464:	8b 8b       	std	Y+19, r24	; 0x13
     466:	3f c0       	rjmp	.+126    	; 0x4e6 <initialize+0xec>
	else if (__tmp > 65535)
     468:	6d 89       	ldd	r22, Y+21	; 0x15
     46a:	7e 89       	ldd	r23, Y+22	; 0x16
     46c:	8f 89       	ldd	r24, Y+23	; 0x17
     46e:	98 8d       	ldd	r25, Y+24	; 0x18
     470:	20 e0       	ldi	r18, 0x00	; 0
     472:	3f ef       	ldi	r19, 0xFF	; 255
     474:	4f e7       	ldi	r20, 0x7F	; 127
     476:	57 e4       	ldi	r21, 0x47	; 71
     478:	0e 94 89 10 	call	0x2112	; 0x2112 <__gtsf2>
     47c:	18 16       	cp	r1, r24
     47e:	4c f5       	brge	.+82     	; 0x4d2 <initialize+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     480:	69 8d       	ldd	r22, Y+25	; 0x19
     482:	7a 8d       	ldd	r23, Y+26	; 0x1a
     484:	8b 8d       	ldd	r24, Y+27	; 0x1b
     486:	9c 8d       	ldd	r25, Y+28	; 0x1c
     488:	20 e0       	ldi	r18, 0x00	; 0
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	40 e2       	ldi	r20, 0x20	; 32
     48e:	51 e4       	ldi	r21, 0x41	; 65
     490:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__mulsf3>
     494:	dc 01       	movw	r26, r24
     496:	cb 01       	movw	r24, r22
     498:	bc 01       	movw	r22, r24
     49a:	cd 01       	movw	r24, r26
     49c:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__fixunssfsi>
     4a0:	dc 01       	movw	r26, r24
     4a2:	cb 01       	movw	r24, r22
     4a4:	9c 8b       	std	Y+20, r25	; 0x14
     4a6:	8b 8b       	std	Y+19, r24	; 0x13
     4a8:	0f c0       	rjmp	.+30     	; 0x4c8 <initialize+0xce>
     4aa:	80 e9       	ldi	r24, 0x90	; 144
     4ac:	91 e0       	ldi	r25, 0x01	; 1
     4ae:	9a 8b       	std	Y+18, r25	; 0x12
     4b0:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     4b2:	89 89       	ldd	r24, Y+17	; 0x11
     4b4:	9a 89       	ldd	r25, Y+18	; 0x12
     4b6:	01 97       	sbiw	r24, 0x01	; 1
     4b8:	f1 f7       	brne	.-4      	; 0x4b6 <initialize+0xbc>
     4ba:	9a 8b       	std	Y+18, r25	; 0x12
     4bc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4be:	8b 89       	ldd	r24, Y+19	; 0x13
     4c0:	9c 89       	ldd	r25, Y+20	; 0x14
     4c2:	01 97       	sbiw	r24, 0x01	; 1
     4c4:	9c 8b       	std	Y+20, r25	; 0x14
     4c6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4c8:	8b 89       	ldd	r24, Y+19	; 0x13
     4ca:	9c 89       	ldd	r25, Y+20	; 0x14
     4cc:	00 97       	sbiw	r24, 0x00	; 0
     4ce:	69 f7       	brne	.-38     	; 0x4aa <initialize+0xb0>
     4d0:	14 c0       	rjmp	.+40     	; 0x4fa <initialize+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4d2:	6d 89       	ldd	r22, Y+21	; 0x15
     4d4:	7e 89       	ldd	r23, Y+22	; 0x16
     4d6:	8f 89       	ldd	r24, Y+23	; 0x17
     4d8:	98 8d       	ldd	r25, Y+24	; 0x18
     4da:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__fixunssfsi>
     4de:	dc 01       	movw	r26, r24
     4e0:	cb 01       	movw	r24, r22
     4e2:	9c 8b       	std	Y+20, r25	; 0x14
     4e4:	8b 8b       	std	Y+19, r24	; 0x13
     4e6:	8b 89       	ldd	r24, Y+19	; 0x13
     4e8:	9c 89       	ldd	r25, Y+20	; 0x14
     4ea:	98 8b       	std	Y+16, r25	; 0x10
     4ec:	8f 87       	std	Y+15, r24	; 0x0f
     4ee:	8f 85       	ldd	r24, Y+15	; 0x0f
     4f0:	98 89       	ldd	r25, Y+16	; 0x10
     4f2:	01 97       	sbiw	r24, 0x01	; 1
     4f4:	f1 f7       	brne	.-4      	; 0x4f2 <initialize+0xf8>
     4f6:	98 8b       	std	Y+16, r25	; 0x10
     4f8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(15);           // to show data on the LCD we need to send commands first then the data
	lcd_command(0x02);       // this command returns the cursor to the first row and first column position
     4fa:	82 e0       	ldi	r24, 0x02	; 2
     4fc:	0e 94 07 03 	call	0x60e	; 0x60e <lcd_command>
	lcd_command(0x28);       // please refer to this link to understand meaning of all the commands https://www.electronicsforu.com/technology-trends/learn-electronics/16x2-lcd-pinout-diagram
     500:	88 e2       	ldi	r24, 0x28	; 40
     502:	0e 94 07 03 	call	0x60e	; 0x60e <lcd_command>
	lcd_command(0x0c);
     506:	8c e0       	ldi	r24, 0x0C	; 12
     508:	0e 94 07 03 	call	0x60e	; 0x60e <lcd_command>
	lcd_command(0x06);
     50c:	86 e0       	ldi	r24, 0x06	; 6
     50e:	0e 94 07 03 	call	0x60e	; 0x60e <lcd_command>
	lcd_command(0x01);
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	0e 94 07 03 	call	0x60e	; 0x60e <lcd_command>
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	a0 e0       	ldi	r26, 0x00	; 0
     51e:	b0 e4       	ldi	r27, 0x40	; 64
     520:	8b 87       	std	Y+11, r24	; 0x0b
     522:	9c 87       	std	Y+12, r25	; 0x0c
     524:	ad 87       	std	Y+13, r26	; 0x0d
     526:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     528:	6b 85       	ldd	r22, Y+11	; 0x0b
     52a:	7c 85       	ldd	r23, Y+12	; 0x0c
     52c:	8d 85       	ldd	r24, Y+13	; 0x0d
     52e:	9e 85       	ldd	r25, Y+14	; 0x0e
     530:	20 e0       	ldi	r18, 0x00	; 0
     532:	30 e0       	ldi	r19, 0x00	; 0
     534:	4a e7       	ldi	r20, 0x7A	; 122
     536:	55 e4       	ldi	r21, 0x45	; 69
     538:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__mulsf3>
     53c:	dc 01       	movw	r26, r24
     53e:	cb 01       	movw	r24, r22
     540:	8f 83       	std	Y+7, r24	; 0x07
     542:	98 87       	std	Y+8, r25	; 0x08
     544:	a9 87       	std	Y+9, r26	; 0x09
     546:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     548:	6f 81       	ldd	r22, Y+7	; 0x07
     54a:	78 85       	ldd	r23, Y+8	; 0x08
     54c:	89 85       	ldd	r24, Y+9	; 0x09
     54e:	9a 85       	ldd	r25, Y+10	; 0x0a
     550:	20 e0       	ldi	r18, 0x00	; 0
     552:	30 e0       	ldi	r19, 0x00	; 0
     554:	40 e8       	ldi	r20, 0x80	; 128
     556:	5f e3       	ldi	r21, 0x3F	; 63
     558:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__ltsf2>
     55c:	88 23       	and	r24, r24
     55e:	2c f4       	brge	.+10     	; 0x56a <initialize+0x170>
		__ticks = 1;
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	9e 83       	std	Y+6, r25	; 0x06
     566:	8d 83       	std	Y+5, r24	; 0x05
     568:	3f c0       	rjmp	.+126    	; 0x5e8 <initialize+0x1ee>
	else if (__tmp > 65535)
     56a:	6f 81       	ldd	r22, Y+7	; 0x07
     56c:	78 85       	ldd	r23, Y+8	; 0x08
     56e:	89 85       	ldd	r24, Y+9	; 0x09
     570:	9a 85       	ldd	r25, Y+10	; 0x0a
     572:	20 e0       	ldi	r18, 0x00	; 0
     574:	3f ef       	ldi	r19, 0xFF	; 255
     576:	4f e7       	ldi	r20, 0x7F	; 127
     578:	57 e4       	ldi	r21, 0x47	; 71
     57a:	0e 94 89 10 	call	0x2112	; 0x2112 <__gtsf2>
     57e:	18 16       	cp	r1, r24
     580:	4c f5       	brge	.+82     	; 0x5d4 <initialize+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     582:	6b 85       	ldd	r22, Y+11	; 0x0b
     584:	7c 85       	ldd	r23, Y+12	; 0x0c
     586:	8d 85       	ldd	r24, Y+13	; 0x0d
     588:	9e 85       	ldd	r25, Y+14	; 0x0e
     58a:	20 e0       	ldi	r18, 0x00	; 0
     58c:	30 e0       	ldi	r19, 0x00	; 0
     58e:	40 e2       	ldi	r20, 0x20	; 32
     590:	51 e4       	ldi	r21, 0x41	; 65
     592:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__mulsf3>
     596:	dc 01       	movw	r26, r24
     598:	cb 01       	movw	r24, r22
     59a:	bc 01       	movw	r22, r24
     59c:	cd 01       	movw	r24, r26
     59e:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__fixunssfsi>
     5a2:	dc 01       	movw	r26, r24
     5a4:	cb 01       	movw	r24, r22
     5a6:	9e 83       	std	Y+6, r25	; 0x06
     5a8:	8d 83       	std	Y+5, r24	; 0x05
     5aa:	0f c0       	rjmp	.+30     	; 0x5ca <initialize+0x1d0>
     5ac:	80 e9       	ldi	r24, 0x90	; 144
     5ae:	91 e0       	ldi	r25, 0x01	; 1
     5b0:	9c 83       	std	Y+4, r25	; 0x04
     5b2:	8b 83       	std	Y+3, r24	; 0x03
     5b4:	8b 81       	ldd	r24, Y+3	; 0x03
     5b6:	9c 81       	ldd	r25, Y+4	; 0x04
     5b8:	01 97       	sbiw	r24, 0x01	; 1
     5ba:	f1 f7       	brne	.-4      	; 0x5b8 <initialize+0x1be>
     5bc:	9c 83       	std	Y+4, r25	; 0x04
     5be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5c0:	8d 81       	ldd	r24, Y+5	; 0x05
     5c2:	9e 81       	ldd	r25, Y+6	; 0x06
     5c4:	01 97       	sbiw	r24, 0x01	; 1
     5c6:	9e 83       	std	Y+6, r25	; 0x06
     5c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5ca:	8d 81       	ldd	r24, Y+5	; 0x05
     5cc:	9e 81       	ldd	r25, Y+6	; 0x06
     5ce:	00 97       	sbiw	r24, 0x00	; 0
     5d0:	69 f7       	brne	.-38     	; 0x5ac <initialize+0x1b2>
     5d2:	14 c0       	rjmp	.+40     	; 0x5fc <initialize+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5d4:	6f 81       	ldd	r22, Y+7	; 0x07
     5d6:	78 85       	ldd	r23, Y+8	; 0x08
     5d8:	89 85       	ldd	r24, Y+9	; 0x09
     5da:	9a 85       	ldd	r25, Y+10	; 0x0a
     5dc:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__fixunssfsi>
     5e0:	dc 01       	movw	r26, r24
     5e2:	cb 01       	movw	r24, r22
     5e4:	9e 83       	std	Y+6, r25	; 0x06
     5e6:	8d 83       	std	Y+5, r24	; 0x05
     5e8:	8d 81       	ldd	r24, Y+5	; 0x05
     5ea:	9e 81       	ldd	r25, Y+6	; 0x06
     5ec:	9a 83       	std	Y+2, r25	; 0x02
     5ee:	89 83       	std	Y+1, r24	; 0x01
     5f0:	89 81       	ldd	r24, Y+1	; 0x01
     5f2:	9a 81       	ldd	r25, Y+2	; 0x02
     5f4:	01 97       	sbiw	r24, 0x01	; 1
     5f6:	f1 f7       	brne	.-4      	; 0x5f4 <initialize+0x1fa>
     5f8:	9a 83       	std	Y+2, r25	; 0x02
     5fa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
     5fc:	6c 96       	adiw	r28, 0x1c	; 28
     5fe:	0f b6       	in	r0, 0x3f	; 63
     600:	f8 94       	cli
     602:	de bf       	out	0x3e, r29	; 62
     604:	0f be       	out	0x3f, r0	; 63
     606:	cd bf       	out	0x3d, r28	; 61
     608:	cf 91       	pop	r28
     60a:	df 91       	pop	r29
     60c:	08 95       	ret

0000060e <lcd_command>:

void lcd_command( unsigned char cmnd )
{
     60e:	0f 93       	push	r16
     610:	1f 93       	push	r17
     612:	df 93       	push	r29
     614:	cf 93       	push	r28
     616:	cd b7       	in	r28, 0x3d	; 61
     618:	de b7       	in	r29, 0x3e	; 62
     61a:	c7 55       	subi	r28, 0x57	; 87
     61c:	d0 40       	sbci	r29, 0x00	; 0
     61e:	0f b6       	in	r0, 0x3f	; 63
     620:	f8 94       	cli
     622:	de bf       	out	0x3e, r29	; 62
     624:	0f be       	out	0x3f, r0	; 63
     626:	cd bf       	out	0x3d, r28	; 61
     628:	fe 01       	movw	r30, r28
     62a:	e9 5a       	subi	r30, 0xA9	; 169
     62c:	ff 4f       	sbci	r31, 0xFF	; 255
     62e:	80 83       	st	Z, r24
	// in order to send command to the lcd first we need to write the command on the data pins. then set the RS pin to zero and enable pin to high
	// then wait for one microseconds and set the enable pin to low, this process repeats again. We're using 4 bit data communication but the data is 8-bit
	// so we will send the data divinding it into two section. Higher 4 bit and lower 4 bit
	// the following lines of codes are used to send higher 4 bits of data
	lcd_port = (lcd_port & 0x0F) | (cmnd & 0xF0);  // this line writes the command on the data pins of the lcd connected to th microcontroller portD pin 4 to 7
     630:	ab e2       	ldi	r26, 0x2B	; 43
     632:	b0 e0       	ldi	r27, 0x00	; 0
     634:	eb e2       	ldi	r30, 0x2B	; 43
     636:	f0 e0       	ldi	r31, 0x00	; 0
     638:	80 81       	ld	r24, Z
     63a:	98 2f       	mov	r25, r24
     63c:	9f 70       	andi	r25, 0x0F	; 15
     63e:	fe 01       	movw	r30, r28
     640:	e9 5a       	subi	r30, 0xA9	; 169
     642:	ff 4f       	sbci	r31, 0xFF	; 255
     644:	80 81       	ld	r24, Z
     646:	80 7f       	andi	r24, 0xF0	; 240
     648:	89 2b       	or	r24, r25
     64a:	8c 93       	st	X, r24
	lcd_port &= ~ (1<<rs);
     64c:	ab e2       	ldi	r26, 0x2B	; 43
     64e:	b0 e0       	ldi	r27, 0x00	; 0
     650:	eb e2       	ldi	r30, 0x2B	; 43
     652:	f0 e0       	ldi	r31, 0x00	; 0
     654:	80 81       	ld	r24, Z
     656:	8e 7f       	andi	r24, 0xFE	; 254
     658:	8c 93       	st	X, r24
	lcd_port |= (1<<en);
     65a:	ab e2       	ldi	r26, 0x2B	; 43
     65c:	b0 e0       	ldi	r27, 0x00	; 0
     65e:	eb e2       	ldi	r30, 0x2B	; 43
     660:	f0 e0       	ldi	r31, 0x00	; 0
     662:	80 81       	ld	r24, Z
     664:	82 60       	ori	r24, 0x02	; 2
     666:	8c 93       	st	X, r24
     668:	fe 01       	movw	r30, r28
     66a:	ed 5a       	subi	r30, 0xAD	; 173
     66c:	ff 4f       	sbci	r31, 0xFF	; 255
     66e:	80 e0       	ldi	r24, 0x00	; 0
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	a0 e8       	ldi	r26, 0x80	; 128
     674:	bf e3       	ldi	r27, 0x3F	; 63
     676:	80 83       	st	Z, r24
     678:	91 83       	std	Z+1, r25	; 0x01
     67a:	a2 83       	std	Z+2, r26	; 0x02
     67c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     67e:	8e 01       	movw	r16, r28
     680:	01 5b       	subi	r16, 0xB1	; 177
     682:	1f 4f       	sbci	r17, 0xFF	; 255
     684:	fe 01       	movw	r30, r28
     686:	ed 5a       	subi	r30, 0xAD	; 173
     688:	ff 4f       	sbci	r31, 0xFF	; 255
     68a:	60 81       	ld	r22, Z
     68c:	71 81       	ldd	r23, Z+1	; 0x01
     68e:	82 81       	ldd	r24, Z+2	; 0x02
     690:	93 81       	ldd	r25, Z+3	; 0x03
     692:	2b ea       	ldi	r18, 0xAB	; 171
     694:	3a ea       	ldi	r19, 0xAA	; 170
     696:	4a ea       	ldi	r20, 0xAA	; 170
     698:	50 e4       	ldi	r21, 0x40	; 64
     69a:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__mulsf3>
     69e:	dc 01       	movw	r26, r24
     6a0:	cb 01       	movw	r24, r22
     6a2:	f8 01       	movw	r30, r16
     6a4:	80 83       	st	Z, r24
     6a6:	91 83       	std	Z+1, r25	; 0x01
     6a8:	a2 83       	std	Z+2, r26	; 0x02
     6aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     6ac:	fe 01       	movw	r30, r28
     6ae:	e1 5b       	subi	r30, 0xB1	; 177
     6b0:	ff 4f       	sbci	r31, 0xFF	; 255
     6b2:	60 81       	ld	r22, Z
     6b4:	71 81       	ldd	r23, Z+1	; 0x01
     6b6:	82 81       	ldd	r24, Z+2	; 0x02
     6b8:	93 81       	ldd	r25, Z+3	; 0x03
     6ba:	20 e0       	ldi	r18, 0x00	; 0
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	40 e8       	ldi	r20, 0x80	; 128
     6c0:	5f e3       	ldi	r21, 0x3F	; 63
     6c2:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__ltsf2>
     6c6:	88 23       	and	r24, r24
     6c8:	34 f4       	brge	.+12     	; 0x6d6 <lcd_command+0xc8>
		__ticks = 1;
     6ca:	fe 01       	movw	r30, r28
     6cc:	e2 5b       	subi	r30, 0xB2	; 178
     6ce:	ff 4f       	sbci	r31, 0xFF	; 255
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	80 83       	st	Z, r24
     6d4:	e0 c0       	rjmp	.+448    	; 0x896 <lcd_command+0x288>
	else if (__tmp > 255)
     6d6:	fe 01       	movw	r30, r28
     6d8:	e1 5b       	subi	r30, 0xB1	; 177
     6da:	ff 4f       	sbci	r31, 0xFF	; 255
     6dc:	60 81       	ld	r22, Z
     6de:	71 81       	ldd	r23, Z+1	; 0x01
     6e0:	82 81       	ldd	r24, Z+2	; 0x02
     6e2:	93 81       	ldd	r25, Z+3	; 0x03
     6e4:	20 e0       	ldi	r18, 0x00	; 0
     6e6:	30 e0       	ldi	r19, 0x00	; 0
     6e8:	4f e7       	ldi	r20, 0x7F	; 127
     6ea:	53 e4       	ldi	r21, 0x43	; 67
     6ec:	0e 94 89 10 	call	0x2112	; 0x2112 <__gtsf2>
     6f0:	18 16       	cp	r1, r24
     6f2:	0c f0       	brlt	.+2      	; 0x6f6 <lcd_command+0xe8>
     6f4:	c0 c0       	rjmp	.+384    	; 0x876 <lcd_command+0x268>
	{
		_delay_ms(__us / 1000.0);
     6f6:	fe 01       	movw	r30, r28
     6f8:	ed 5a       	subi	r30, 0xAD	; 173
     6fa:	ff 4f       	sbci	r31, 0xFF	; 255
     6fc:	60 81       	ld	r22, Z
     6fe:	71 81       	ldd	r23, Z+1	; 0x01
     700:	82 81       	ldd	r24, Z+2	; 0x02
     702:	93 81       	ldd	r25, Z+3	; 0x03
     704:	20 e0       	ldi	r18, 0x00	; 0
     706:	30 e0       	ldi	r19, 0x00	; 0
     708:	4a e7       	ldi	r20, 0x7A	; 122
     70a:	54 e4       	ldi	r21, 0x44	; 68
     70c:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <__divsf3>
     710:	dc 01       	movw	r26, r24
     712:	cb 01       	movw	r24, r22
     714:	fe 01       	movw	r30, r28
     716:	e6 5b       	subi	r30, 0xB6	; 182
     718:	ff 4f       	sbci	r31, 0xFF	; 255
     71a:	80 83       	st	Z, r24
     71c:	91 83       	std	Z+1, r25	; 0x01
     71e:	a2 83       	std	Z+2, r26	; 0x02
     720:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     722:	8e 01       	movw	r16, r28
     724:	0a 5b       	subi	r16, 0xBA	; 186
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	fe 01       	movw	r30, r28
     72a:	e6 5b       	subi	r30, 0xB6	; 182
     72c:	ff 4f       	sbci	r31, 0xFF	; 255
     72e:	60 81       	ld	r22, Z
     730:	71 81       	ldd	r23, Z+1	; 0x01
     732:	82 81       	ldd	r24, Z+2	; 0x02
     734:	93 81       	ldd	r25, Z+3	; 0x03
     736:	20 e0       	ldi	r18, 0x00	; 0
     738:	30 e0       	ldi	r19, 0x00	; 0
     73a:	4a e7       	ldi	r20, 0x7A	; 122
     73c:	55 e4       	ldi	r21, 0x45	; 69
     73e:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__mulsf3>
     742:	dc 01       	movw	r26, r24
     744:	cb 01       	movw	r24, r22
     746:	f8 01       	movw	r30, r16
     748:	80 83       	st	Z, r24
     74a:	91 83       	std	Z+1, r25	; 0x01
     74c:	a2 83       	std	Z+2, r26	; 0x02
     74e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     750:	fe 01       	movw	r30, r28
     752:	ea 5b       	subi	r30, 0xBA	; 186
     754:	ff 4f       	sbci	r31, 0xFF	; 255
     756:	60 81       	ld	r22, Z
     758:	71 81       	ldd	r23, Z+1	; 0x01
     75a:	82 81       	ldd	r24, Z+2	; 0x02
     75c:	93 81       	ldd	r25, Z+3	; 0x03
     75e:	20 e0       	ldi	r18, 0x00	; 0
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	40 e8       	ldi	r20, 0x80	; 128
     764:	5f e3       	ldi	r21, 0x3F	; 63
     766:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__ltsf2>
     76a:	88 23       	and	r24, r24
     76c:	44 f4       	brge	.+16     	; 0x77e <lcd_command+0x170>
		__ticks = 1;
     76e:	fe 01       	movw	r30, r28
     770:	ec 5b       	subi	r30, 0xBC	; 188
     772:	ff 4f       	sbci	r31, 0xFF	; 255
     774:	81 e0       	ldi	r24, 0x01	; 1
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	91 83       	std	Z+1, r25	; 0x01
     77a:	80 83       	st	Z, r24
     77c:	64 c0       	rjmp	.+200    	; 0x846 <lcd_command+0x238>
	else if (__tmp > 65535)
     77e:	fe 01       	movw	r30, r28
     780:	ea 5b       	subi	r30, 0xBA	; 186
     782:	ff 4f       	sbci	r31, 0xFF	; 255
     784:	60 81       	ld	r22, Z
     786:	71 81       	ldd	r23, Z+1	; 0x01
     788:	82 81       	ldd	r24, Z+2	; 0x02
     78a:	93 81       	ldd	r25, Z+3	; 0x03
     78c:	20 e0       	ldi	r18, 0x00	; 0
     78e:	3f ef       	ldi	r19, 0xFF	; 255
     790:	4f e7       	ldi	r20, 0x7F	; 127
     792:	57 e4       	ldi	r21, 0x47	; 71
     794:	0e 94 89 10 	call	0x2112	; 0x2112 <__gtsf2>
     798:	18 16       	cp	r1, r24
     79a:	0c f0       	brlt	.+2      	; 0x79e <lcd_command+0x190>
     79c:	43 c0       	rjmp	.+134    	; 0x824 <lcd_command+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     79e:	fe 01       	movw	r30, r28
     7a0:	e6 5b       	subi	r30, 0xB6	; 182
     7a2:	ff 4f       	sbci	r31, 0xFF	; 255
     7a4:	60 81       	ld	r22, Z
     7a6:	71 81       	ldd	r23, Z+1	; 0x01
     7a8:	82 81       	ldd	r24, Z+2	; 0x02
     7aa:	93 81       	ldd	r25, Z+3	; 0x03
     7ac:	20 e0       	ldi	r18, 0x00	; 0
     7ae:	30 e0       	ldi	r19, 0x00	; 0
     7b0:	40 e2       	ldi	r20, 0x20	; 32
     7b2:	51 e4       	ldi	r21, 0x41	; 65
     7b4:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__mulsf3>
     7b8:	dc 01       	movw	r26, r24
     7ba:	cb 01       	movw	r24, r22
     7bc:	8e 01       	movw	r16, r28
     7be:	0c 5b       	subi	r16, 0xBC	; 188
     7c0:	1f 4f       	sbci	r17, 0xFF	; 255
     7c2:	bc 01       	movw	r22, r24
     7c4:	cd 01       	movw	r24, r26
     7c6:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__fixunssfsi>
     7ca:	dc 01       	movw	r26, r24
     7cc:	cb 01       	movw	r24, r22
     7ce:	f8 01       	movw	r30, r16
     7d0:	91 83       	std	Z+1, r25	; 0x01
     7d2:	80 83       	st	Z, r24
     7d4:	1f c0       	rjmp	.+62     	; 0x814 <lcd_command+0x206>
     7d6:	fe 01       	movw	r30, r28
     7d8:	ee 5b       	subi	r30, 0xBE	; 190
     7da:	ff 4f       	sbci	r31, 0xFF	; 255
     7dc:	80 e9       	ldi	r24, 0x90	; 144
     7de:	91 e0       	ldi	r25, 0x01	; 1
     7e0:	91 83       	std	Z+1, r25	; 0x01
     7e2:	80 83       	st	Z, r24
     7e4:	fe 01       	movw	r30, r28
     7e6:	ee 5b       	subi	r30, 0xBE	; 190
     7e8:	ff 4f       	sbci	r31, 0xFF	; 255
     7ea:	80 81       	ld	r24, Z
     7ec:	91 81       	ldd	r25, Z+1	; 0x01
     7ee:	01 97       	sbiw	r24, 0x01	; 1
     7f0:	f1 f7       	brne	.-4      	; 0x7ee <lcd_command+0x1e0>
     7f2:	fe 01       	movw	r30, r28
     7f4:	ee 5b       	subi	r30, 0xBE	; 190
     7f6:	ff 4f       	sbci	r31, 0xFF	; 255
     7f8:	91 83       	std	Z+1, r25	; 0x01
     7fa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7fc:	de 01       	movw	r26, r28
     7fe:	ac 5b       	subi	r26, 0xBC	; 188
     800:	bf 4f       	sbci	r27, 0xFF	; 255
     802:	fe 01       	movw	r30, r28
     804:	ec 5b       	subi	r30, 0xBC	; 188
     806:	ff 4f       	sbci	r31, 0xFF	; 255
     808:	80 81       	ld	r24, Z
     80a:	91 81       	ldd	r25, Z+1	; 0x01
     80c:	01 97       	sbiw	r24, 0x01	; 1
     80e:	11 96       	adiw	r26, 0x01	; 1
     810:	9c 93       	st	X, r25
     812:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     814:	fe 01       	movw	r30, r28
     816:	ec 5b       	subi	r30, 0xBC	; 188
     818:	ff 4f       	sbci	r31, 0xFF	; 255
     81a:	80 81       	ld	r24, Z
     81c:	91 81       	ldd	r25, Z+1	; 0x01
     81e:	00 97       	sbiw	r24, 0x00	; 0
     820:	d1 f6       	brne	.-76     	; 0x7d6 <lcd_command+0x1c8>
     822:	42 c0       	rjmp	.+132    	; 0x8a8 <lcd_command+0x29a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     824:	8e 01       	movw	r16, r28
     826:	0c 5b       	subi	r16, 0xBC	; 188
     828:	1f 4f       	sbci	r17, 0xFF	; 255
     82a:	fe 01       	movw	r30, r28
     82c:	ea 5b       	subi	r30, 0xBA	; 186
     82e:	ff 4f       	sbci	r31, 0xFF	; 255
     830:	60 81       	ld	r22, Z
     832:	71 81       	ldd	r23, Z+1	; 0x01
     834:	82 81       	ldd	r24, Z+2	; 0x02
     836:	93 81       	ldd	r25, Z+3	; 0x03
     838:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__fixunssfsi>
     83c:	dc 01       	movw	r26, r24
     83e:	cb 01       	movw	r24, r22
     840:	f8 01       	movw	r30, r16
     842:	91 83       	std	Z+1, r25	; 0x01
     844:	80 83       	st	Z, r24
     846:	de 01       	movw	r26, r28
     848:	a0 5c       	subi	r26, 0xC0	; 192
     84a:	bf 4f       	sbci	r27, 0xFF	; 255
     84c:	fe 01       	movw	r30, r28
     84e:	ec 5b       	subi	r30, 0xBC	; 188
     850:	ff 4f       	sbci	r31, 0xFF	; 255
     852:	80 81       	ld	r24, Z
     854:	91 81       	ldd	r25, Z+1	; 0x01
     856:	11 96       	adiw	r26, 0x01	; 1
     858:	9c 93       	st	X, r25
     85a:	8e 93       	st	-X, r24
     85c:	fe 01       	movw	r30, r28
     85e:	e0 5c       	subi	r30, 0xC0	; 192
     860:	ff 4f       	sbci	r31, 0xFF	; 255
     862:	80 81       	ld	r24, Z
     864:	91 81       	ldd	r25, Z+1	; 0x01
     866:	01 97       	sbiw	r24, 0x01	; 1
     868:	f1 f7       	brne	.-4      	; 0x866 <lcd_command+0x258>
     86a:	fe 01       	movw	r30, r28
     86c:	e0 5c       	subi	r30, 0xC0	; 192
     86e:	ff 4f       	sbci	r31, 0xFF	; 255
     870:	91 83       	std	Z+1, r25	; 0x01
     872:	80 83       	st	Z, r24
     874:	19 c0       	rjmp	.+50     	; 0x8a8 <lcd_command+0x29a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     876:	8e 01       	movw	r16, r28
     878:	02 5b       	subi	r16, 0xB2	; 178
     87a:	1f 4f       	sbci	r17, 0xFF	; 255
     87c:	fe 01       	movw	r30, r28
     87e:	e1 5b       	subi	r30, 0xB1	; 177
     880:	ff 4f       	sbci	r31, 0xFF	; 255
     882:	60 81       	ld	r22, Z
     884:	71 81       	ldd	r23, Z+1	; 0x01
     886:	82 81       	ldd	r24, Z+2	; 0x02
     888:	93 81       	ldd	r25, Z+3	; 0x03
     88a:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__fixunssfsi>
     88e:	dc 01       	movw	r26, r24
     890:	cb 01       	movw	r24, r22
     892:	f8 01       	movw	r30, r16
     894:	80 83       	st	Z, r24
     896:	fe 01       	movw	r30, r28
     898:	e2 5b       	subi	r30, 0xB2	; 178
     89a:	ff 4f       	sbci	r31, 0xFF	; 255
     89c:	80 81       	ld	r24, Z
     89e:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     8a0:	8f ad       	ldd	r24, Y+63	; 0x3f
     8a2:	8a 95       	dec	r24
     8a4:	f1 f7       	brne	.-4      	; 0x8a2 <lcd_command+0x294>
     8a6:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(1);
	lcd_port &= ~ (1<<en);
     8a8:	ab e2       	ldi	r26, 0x2B	; 43
     8aa:	b0 e0       	ldi	r27, 0x00	; 0
     8ac:	eb e2       	ldi	r30, 0x2B	; 43
     8ae:	f0 e0       	ldi	r31, 0x00	; 0
     8b0:	80 81       	ld	r24, Z
     8b2:	8d 7f       	andi	r24, 0xFD	; 253
     8b4:	8c 93       	st	X, r24
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	a8 e4       	ldi	r26, 0x48	; 72
     8bc:	b3 e4       	ldi	r27, 0x43	; 67
     8be:	8b af       	std	Y+59, r24	; 0x3b
     8c0:	9c af       	std	Y+60, r25	; 0x3c
     8c2:	ad af       	std	Y+61, r26	; 0x3d
     8c4:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     8c6:	6b ad       	ldd	r22, Y+59	; 0x3b
     8c8:	7c ad       	ldd	r23, Y+60	; 0x3c
     8ca:	8d ad       	ldd	r24, Y+61	; 0x3d
     8cc:	9e ad       	ldd	r25, Y+62	; 0x3e
     8ce:	2b ea       	ldi	r18, 0xAB	; 171
     8d0:	3a ea       	ldi	r19, 0xAA	; 170
     8d2:	4a ea       	ldi	r20, 0xAA	; 170
     8d4:	50 e4       	ldi	r21, 0x40	; 64
     8d6:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__mulsf3>
     8da:	dc 01       	movw	r26, r24
     8dc:	cb 01       	movw	r24, r22
     8de:	8f ab       	std	Y+55, r24	; 0x37
     8e0:	98 af       	std	Y+56, r25	; 0x38
     8e2:	a9 af       	std	Y+57, r26	; 0x39
     8e4:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
     8e6:	6f a9       	ldd	r22, Y+55	; 0x37
     8e8:	78 ad       	ldd	r23, Y+56	; 0x38
     8ea:	89 ad       	ldd	r24, Y+57	; 0x39
     8ec:	9a ad       	ldd	r25, Y+58	; 0x3a
     8ee:	20 e0       	ldi	r18, 0x00	; 0
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	40 e8       	ldi	r20, 0x80	; 128
     8f4:	5f e3       	ldi	r21, 0x3F	; 63
     8f6:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__ltsf2>
     8fa:	88 23       	and	r24, r24
     8fc:	1c f4       	brge	.+6      	; 0x904 <__stack+0x5>
		__ticks = 1;
     8fe:	81 e0       	ldi	r24, 0x01	; 1
     900:	8e ab       	std	Y+54, r24	; 0x36
     902:	91 c0       	rjmp	.+290    	; 0xa26 <__stack+0x127>
	else if (__tmp > 255)
     904:	6f a9       	ldd	r22, Y+55	; 0x37
     906:	78 ad       	ldd	r23, Y+56	; 0x38
     908:	89 ad       	ldd	r24, Y+57	; 0x39
     90a:	9a ad       	ldd	r25, Y+58	; 0x3a
     90c:	20 e0       	ldi	r18, 0x00	; 0
     90e:	30 e0       	ldi	r19, 0x00	; 0
     910:	4f e7       	ldi	r20, 0x7F	; 127
     912:	53 e4       	ldi	r21, 0x43	; 67
     914:	0e 94 89 10 	call	0x2112	; 0x2112 <__gtsf2>
     918:	18 16       	cp	r1, r24
     91a:	0c f0       	brlt	.+2      	; 0x91e <__stack+0x1f>
     91c:	7b c0       	rjmp	.+246    	; 0xa14 <__stack+0x115>
	{
		_delay_ms(__us / 1000.0);
     91e:	6b ad       	ldd	r22, Y+59	; 0x3b
     920:	7c ad       	ldd	r23, Y+60	; 0x3c
     922:	8d ad       	ldd	r24, Y+61	; 0x3d
     924:	9e ad       	ldd	r25, Y+62	; 0x3e
     926:	20 e0       	ldi	r18, 0x00	; 0
     928:	30 e0       	ldi	r19, 0x00	; 0
     92a:	4a e7       	ldi	r20, 0x7A	; 122
     92c:	54 e4       	ldi	r21, 0x44	; 68
     92e:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <__divsf3>
     932:	dc 01       	movw	r26, r24
     934:	cb 01       	movw	r24, r22
     936:	8a ab       	std	Y+50, r24	; 0x32
     938:	9b ab       	std	Y+51, r25	; 0x33
     93a:	ac ab       	std	Y+52, r26	; 0x34
     93c:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     93e:	6a a9       	ldd	r22, Y+50	; 0x32
     940:	7b a9       	ldd	r23, Y+51	; 0x33
     942:	8c a9       	ldd	r24, Y+52	; 0x34
     944:	9d a9       	ldd	r25, Y+53	; 0x35
     946:	20 e0       	ldi	r18, 0x00	; 0
     948:	30 e0       	ldi	r19, 0x00	; 0
     94a:	4a e7       	ldi	r20, 0x7A	; 122
     94c:	55 e4       	ldi	r21, 0x45	; 69
     94e:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__mulsf3>
     952:	dc 01       	movw	r26, r24
     954:	cb 01       	movw	r24, r22
     956:	8e a7       	std	Y+46, r24	; 0x2e
     958:	9f a7       	std	Y+47, r25	; 0x2f
     95a:	a8 ab       	std	Y+48, r26	; 0x30
     95c:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
     95e:	6e a5       	ldd	r22, Y+46	; 0x2e
     960:	7f a5       	ldd	r23, Y+47	; 0x2f
     962:	88 a9       	ldd	r24, Y+48	; 0x30
     964:	99 a9       	ldd	r25, Y+49	; 0x31
     966:	20 e0       	ldi	r18, 0x00	; 0
     968:	30 e0       	ldi	r19, 0x00	; 0
     96a:	40 e8       	ldi	r20, 0x80	; 128
     96c:	5f e3       	ldi	r21, 0x3F	; 63
     96e:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__ltsf2>
     972:	88 23       	and	r24, r24
     974:	2c f4       	brge	.+10     	; 0x980 <__stack+0x81>
		__ticks = 1;
     976:	81 e0       	ldi	r24, 0x01	; 1
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	9d a7       	std	Y+45, r25	; 0x2d
     97c:	8c a7       	std	Y+44, r24	; 0x2c
     97e:	3f c0       	rjmp	.+126    	; 0x9fe <__stack+0xff>
	else if (__tmp > 65535)
     980:	6e a5       	ldd	r22, Y+46	; 0x2e
     982:	7f a5       	ldd	r23, Y+47	; 0x2f
     984:	88 a9       	ldd	r24, Y+48	; 0x30
     986:	99 a9       	ldd	r25, Y+49	; 0x31
     988:	20 e0       	ldi	r18, 0x00	; 0
     98a:	3f ef       	ldi	r19, 0xFF	; 255
     98c:	4f e7       	ldi	r20, 0x7F	; 127
     98e:	57 e4       	ldi	r21, 0x47	; 71
     990:	0e 94 89 10 	call	0x2112	; 0x2112 <__gtsf2>
     994:	18 16       	cp	r1, r24
     996:	4c f5       	brge	.+82     	; 0x9ea <__stack+0xeb>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     998:	6a a9       	ldd	r22, Y+50	; 0x32
     99a:	7b a9       	ldd	r23, Y+51	; 0x33
     99c:	8c a9       	ldd	r24, Y+52	; 0x34
     99e:	9d a9       	ldd	r25, Y+53	; 0x35
     9a0:	20 e0       	ldi	r18, 0x00	; 0
     9a2:	30 e0       	ldi	r19, 0x00	; 0
     9a4:	40 e2       	ldi	r20, 0x20	; 32
     9a6:	51 e4       	ldi	r21, 0x41	; 65
     9a8:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__mulsf3>
     9ac:	dc 01       	movw	r26, r24
     9ae:	cb 01       	movw	r24, r22
     9b0:	bc 01       	movw	r22, r24
     9b2:	cd 01       	movw	r24, r26
     9b4:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__fixunssfsi>
     9b8:	dc 01       	movw	r26, r24
     9ba:	cb 01       	movw	r24, r22
     9bc:	9d a7       	std	Y+45, r25	; 0x2d
     9be:	8c a7       	std	Y+44, r24	; 0x2c
     9c0:	0f c0       	rjmp	.+30     	; 0x9e0 <__stack+0xe1>
     9c2:	80 e9       	ldi	r24, 0x90	; 144
     9c4:	91 e0       	ldi	r25, 0x01	; 1
     9c6:	9b a7       	std	Y+43, r25	; 0x2b
     9c8:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     9ca:	8a a5       	ldd	r24, Y+42	; 0x2a
     9cc:	9b a5       	ldd	r25, Y+43	; 0x2b
     9ce:	01 97       	sbiw	r24, 0x01	; 1
     9d0:	f1 f7       	brne	.-4      	; 0x9ce <__stack+0xcf>
     9d2:	9b a7       	std	Y+43, r25	; 0x2b
     9d4:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9d6:	8c a5       	ldd	r24, Y+44	; 0x2c
     9d8:	9d a5       	ldd	r25, Y+45	; 0x2d
     9da:	01 97       	sbiw	r24, 0x01	; 1
     9dc:	9d a7       	std	Y+45, r25	; 0x2d
     9de:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9e0:	8c a5       	ldd	r24, Y+44	; 0x2c
     9e2:	9d a5       	ldd	r25, Y+45	; 0x2d
     9e4:	00 97       	sbiw	r24, 0x00	; 0
     9e6:	69 f7       	brne	.-38     	; 0x9c2 <__stack+0xc3>
     9e8:	24 c0       	rjmp	.+72     	; 0xa32 <__stack+0x133>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9ea:	6e a5       	ldd	r22, Y+46	; 0x2e
     9ec:	7f a5       	ldd	r23, Y+47	; 0x2f
     9ee:	88 a9       	ldd	r24, Y+48	; 0x30
     9f0:	99 a9       	ldd	r25, Y+49	; 0x31
     9f2:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__fixunssfsi>
     9f6:	dc 01       	movw	r26, r24
     9f8:	cb 01       	movw	r24, r22
     9fa:	9d a7       	std	Y+45, r25	; 0x2d
     9fc:	8c a7       	std	Y+44, r24	; 0x2c
     9fe:	8c a5       	ldd	r24, Y+44	; 0x2c
     a00:	9d a5       	ldd	r25, Y+45	; 0x2d
     a02:	99 a7       	std	Y+41, r25	; 0x29
     a04:	88 a7       	std	Y+40, r24	; 0x28
     a06:	88 a5       	ldd	r24, Y+40	; 0x28
     a08:	99 a5       	ldd	r25, Y+41	; 0x29
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	f1 f7       	brne	.-4      	; 0xa0a <__stack+0x10b>
     a0e:	99 a7       	std	Y+41, r25	; 0x29
     a10:	88 a7       	std	Y+40, r24	; 0x28
     a12:	0f c0       	rjmp	.+30     	; 0xa32 <__stack+0x133>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     a14:	6f a9       	ldd	r22, Y+55	; 0x37
     a16:	78 ad       	ldd	r23, Y+56	; 0x38
     a18:	89 ad       	ldd	r24, Y+57	; 0x39
     a1a:	9a ad       	ldd	r25, Y+58	; 0x3a
     a1c:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__fixunssfsi>
     a20:	dc 01       	movw	r26, r24
     a22:	cb 01       	movw	r24, r22
     a24:	8e ab       	std	Y+54, r24	; 0x36
     a26:	8e a9       	ldd	r24, Y+54	; 0x36
     a28:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     a2a:	8f a1       	ldd	r24, Y+39	; 0x27
     a2c:	8a 95       	dec	r24
     a2e:	f1 f7       	brne	.-4      	; 0xa2c <__stack+0x12d>
     a30:	8f a3       	std	Y+39, r24	; 0x27

	// wait 200 microseconds
	_delay_us(200);

	// send the lower 4 bit of the data
	lcd_port = (lcd_port & 0x0F) | (cmnd << 4);
     a32:	ab e2       	ldi	r26, 0x2B	; 43
     a34:	b0 e0       	ldi	r27, 0x00	; 0
     a36:	eb e2       	ldi	r30, 0x2B	; 43
     a38:	f0 e0       	ldi	r31, 0x00	; 0
     a3a:	80 81       	ld	r24, Z
     a3c:	28 2f       	mov	r18, r24
     a3e:	2f 70       	andi	r18, 0x0F	; 15
     a40:	fe 01       	movw	r30, r28
     a42:	e9 5a       	subi	r30, 0xA9	; 169
     a44:	ff 4f       	sbci	r31, 0xFF	; 255
     a46:	80 81       	ld	r24, Z
     a48:	88 2f       	mov	r24, r24
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	82 95       	swap	r24
     a4e:	92 95       	swap	r25
     a50:	90 7f       	andi	r25, 0xF0	; 240
     a52:	98 27       	eor	r25, r24
     a54:	80 7f       	andi	r24, 0xF0	; 240
     a56:	98 27       	eor	r25, r24
     a58:	82 2b       	or	r24, r18
     a5a:	8c 93       	st	X, r24
	lcd_port |= (1<<en);
     a5c:	ab e2       	ldi	r26, 0x2B	; 43
     a5e:	b0 e0       	ldi	r27, 0x00	; 0
     a60:	eb e2       	ldi	r30, 0x2B	; 43
     a62:	f0 e0       	ldi	r31, 0x00	; 0
     a64:	80 81       	ld	r24, Z
     a66:	82 60       	ori	r24, 0x02	; 2
     a68:	8c 93       	st	X, r24
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e8       	ldi	r26, 0x80	; 128
     a70:	bf e3       	ldi	r27, 0x3F	; 63
     a72:	8b a3       	std	Y+35, r24	; 0x23
     a74:	9c a3       	std	Y+36, r25	; 0x24
     a76:	ad a3       	std	Y+37, r26	; 0x25
     a78:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     a7a:	6b a1       	ldd	r22, Y+35	; 0x23
     a7c:	7c a1       	ldd	r23, Y+36	; 0x24
     a7e:	8d a1       	ldd	r24, Y+37	; 0x25
     a80:	9e a1       	ldd	r25, Y+38	; 0x26
     a82:	2b ea       	ldi	r18, 0xAB	; 171
     a84:	3a ea       	ldi	r19, 0xAA	; 170
     a86:	4a ea       	ldi	r20, 0xAA	; 170
     a88:	50 e4       	ldi	r21, 0x40	; 64
     a8a:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__mulsf3>
     a8e:	dc 01       	movw	r26, r24
     a90:	cb 01       	movw	r24, r22
     a92:	8f 8f       	std	Y+31, r24	; 0x1f
     a94:	98 a3       	std	Y+32, r25	; 0x20
     a96:	a9 a3       	std	Y+33, r26	; 0x21
     a98:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
     a9a:	6f 8d       	ldd	r22, Y+31	; 0x1f
     a9c:	78 a1       	ldd	r23, Y+32	; 0x20
     a9e:	89 a1       	ldd	r24, Y+33	; 0x21
     aa0:	9a a1       	ldd	r25, Y+34	; 0x22
     aa2:	20 e0       	ldi	r18, 0x00	; 0
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	40 e8       	ldi	r20, 0x80	; 128
     aa8:	5f e3       	ldi	r21, 0x3F	; 63
     aaa:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__ltsf2>
     aae:	88 23       	and	r24, r24
     ab0:	1c f4       	brge	.+6      	; 0xab8 <__stack+0x1b9>
		__ticks = 1;
     ab2:	81 e0       	ldi	r24, 0x01	; 1
     ab4:	8e 8f       	std	Y+30, r24	; 0x1e
     ab6:	91 c0       	rjmp	.+290    	; 0xbda <__stack+0x2db>
	else if (__tmp > 255)
     ab8:	6f 8d       	ldd	r22, Y+31	; 0x1f
     aba:	78 a1       	ldd	r23, Y+32	; 0x20
     abc:	89 a1       	ldd	r24, Y+33	; 0x21
     abe:	9a a1       	ldd	r25, Y+34	; 0x22
     ac0:	20 e0       	ldi	r18, 0x00	; 0
     ac2:	30 e0       	ldi	r19, 0x00	; 0
     ac4:	4f e7       	ldi	r20, 0x7F	; 127
     ac6:	53 e4       	ldi	r21, 0x43	; 67
     ac8:	0e 94 89 10 	call	0x2112	; 0x2112 <__gtsf2>
     acc:	18 16       	cp	r1, r24
     ace:	0c f0       	brlt	.+2      	; 0xad2 <__stack+0x1d3>
     ad0:	7b c0       	rjmp	.+246    	; 0xbc8 <__stack+0x2c9>
	{
		_delay_ms(__us / 1000.0);
     ad2:	6b a1       	ldd	r22, Y+35	; 0x23
     ad4:	7c a1       	ldd	r23, Y+36	; 0x24
     ad6:	8d a1       	ldd	r24, Y+37	; 0x25
     ad8:	9e a1       	ldd	r25, Y+38	; 0x26
     ada:	20 e0       	ldi	r18, 0x00	; 0
     adc:	30 e0       	ldi	r19, 0x00	; 0
     ade:	4a e7       	ldi	r20, 0x7A	; 122
     ae0:	54 e4       	ldi	r21, 0x44	; 68
     ae2:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <__divsf3>
     ae6:	dc 01       	movw	r26, r24
     ae8:	cb 01       	movw	r24, r22
     aea:	8a 8f       	std	Y+26, r24	; 0x1a
     aec:	9b 8f       	std	Y+27, r25	; 0x1b
     aee:	ac 8f       	std	Y+28, r26	; 0x1c
     af0:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     af2:	6a 8d       	ldd	r22, Y+26	; 0x1a
     af4:	7b 8d       	ldd	r23, Y+27	; 0x1b
     af6:	8c 8d       	ldd	r24, Y+28	; 0x1c
     af8:	9d 8d       	ldd	r25, Y+29	; 0x1d
     afa:	20 e0       	ldi	r18, 0x00	; 0
     afc:	30 e0       	ldi	r19, 0x00	; 0
     afe:	4a e7       	ldi	r20, 0x7A	; 122
     b00:	55 e4       	ldi	r21, 0x45	; 69
     b02:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__mulsf3>
     b06:	dc 01       	movw	r26, r24
     b08:	cb 01       	movw	r24, r22
     b0a:	8e 8b       	std	Y+22, r24	; 0x16
     b0c:	9f 8b       	std	Y+23, r25	; 0x17
     b0e:	a8 8f       	std	Y+24, r26	; 0x18
     b10:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
     b12:	6e 89       	ldd	r22, Y+22	; 0x16
     b14:	7f 89       	ldd	r23, Y+23	; 0x17
     b16:	88 8d       	ldd	r24, Y+24	; 0x18
     b18:	99 8d       	ldd	r25, Y+25	; 0x19
     b1a:	20 e0       	ldi	r18, 0x00	; 0
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	40 e8       	ldi	r20, 0x80	; 128
     b20:	5f e3       	ldi	r21, 0x3F	; 63
     b22:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__ltsf2>
     b26:	88 23       	and	r24, r24
     b28:	2c f4       	brge	.+10     	; 0xb34 <__stack+0x235>
		__ticks = 1;
     b2a:	81 e0       	ldi	r24, 0x01	; 1
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	9d 8b       	std	Y+21, r25	; 0x15
     b30:	8c 8b       	std	Y+20, r24	; 0x14
     b32:	3f c0       	rjmp	.+126    	; 0xbb2 <__stack+0x2b3>
	else if (__tmp > 65535)
     b34:	6e 89       	ldd	r22, Y+22	; 0x16
     b36:	7f 89       	ldd	r23, Y+23	; 0x17
     b38:	88 8d       	ldd	r24, Y+24	; 0x18
     b3a:	99 8d       	ldd	r25, Y+25	; 0x19
     b3c:	20 e0       	ldi	r18, 0x00	; 0
     b3e:	3f ef       	ldi	r19, 0xFF	; 255
     b40:	4f e7       	ldi	r20, 0x7F	; 127
     b42:	57 e4       	ldi	r21, 0x47	; 71
     b44:	0e 94 89 10 	call	0x2112	; 0x2112 <__gtsf2>
     b48:	18 16       	cp	r1, r24
     b4a:	4c f5       	brge	.+82     	; 0xb9e <__stack+0x29f>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b4c:	6a 8d       	ldd	r22, Y+26	; 0x1a
     b4e:	7b 8d       	ldd	r23, Y+27	; 0x1b
     b50:	8c 8d       	ldd	r24, Y+28	; 0x1c
     b52:	9d 8d       	ldd	r25, Y+29	; 0x1d
     b54:	20 e0       	ldi	r18, 0x00	; 0
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	40 e2       	ldi	r20, 0x20	; 32
     b5a:	51 e4       	ldi	r21, 0x41	; 65
     b5c:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__mulsf3>
     b60:	dc 01       	movw	r26, r24
     b62:	cb 01       	movw	r24, r22
     b64:	bc 01       	movw	r22, r24
     b66:	cd 01       	movw	r24, r26
     b68:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__fixunssfsi>
     b6c:	dc 01       	movw	r26, r24
     b6e:	cb 01       	movw	r24, r22
     b70:	9d 8b       	std	Y+21, r25	; 0x15
     b72:	8c 8b       	std	Y+20, r24	; 0x14
     b74:	0f c0       	rjmp	.+30     	; 0xb94 <__stack+0x295>
     b76:	80 e9       	ldi	r24, 0x90	; 144
     b78:	91 e0       	ldi	r25, 0x01	; 1
     b7a:	9b 8b       	std	Y+19, r25	; 0x13
     b7c:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     b7e:	8a 89       	ldd	r24, Y+18	; 0x12
     b80:	9b 89       	ldd	r25, Y+19	; 0x13
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	f1 f7       	brne	.-4      	; 0xb82 <__stack+0x283>
     b86:	9b 8b       	std	Y+19, r25	; 0x13
     b88:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b8a:	8c 89       	ldd	r24, Y+20	; 0x14
     b8c:	9d 89       	ldd	r25, Y+21	; 0x15
     b8e:	01 97       	sbiw	r24, 0x01	; 1
     b90:	9d 8b       	std	Y+21, r25	; 0x15
     b92:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b94:	8c 89       	ldd	r24, Y+20	; 0x14
     b96:	9d 89       	ldd	r25, Y+21	; 0x15
     b98:	00 97       	sbiw	r24, 0x00	; 0
     b9a:	69 f7       	brne	.-38     	; 0xb76 <__stack+0x277>
     b9c:	24 c0       	rjmp	.+72     	; 0xbe6 <__stack+0x2e7>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b9e:	6e 89       	ldd	r22, Y+22	; 0x16
     ba0:	7f 89       	ldd	r23, Y+23	; 0x17
     ba2:	88 8d       	ldd	r24, Y+24	; 0x18
     ba4:	99 8d       	ldd	r25, Y+25	; 0x19
     ba6:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__fixunssfsi>
     baa:	dc 01       	movw	r26, r24
     bac:	cb 01       	movw	r24, r22
     bae:	9d 8b       	std	Y+21, r25	; 0x15
     bb0:	8c 8b       	std	Y+20, r24	; 0x14
     bb2:	8c 89       	ldd	r24, Y+20	; 0x14
     bb4:	9d 89       	ldd	r25, Y+21	; 0x15
     bb6:	99 8b       	std	Y+17, r25	; 0x11
     bb8:	88 8b       	std	Y+16, r24	; 0x10
     bba:	88 89       	ldd	r24, Y+16	; 0x10
     bbc:	99 89       	ldd	r25, Y+17	; 0x11
     bbe:	01 97       	sbiw	r24, 0x01	; 1
     bc0:	f1 f7       	brne	.-4      	; 0xbbe <__stack+0x2bf>
     bc2:	99 8b       	std	Y+17, r25	; 0x11
     bc4:	88 8b       	std	Y+16, r24	; 0x10
     bc6:	0f c0       	rjmp	.+30     	; 0xbe6 <__stack+0x2e7>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     bc8:	6f 8d       	ldd	r22, Y+31	; 0x1f
     bca:	78 a1       	ldd	r23, Y+32	; 0x20
     bcc:	89 a1       	ldd	r24, Y+33	; 0x21
     bce:	9a a1       	ldd	r25, Y+34	; 0x22
     bd0:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__fixunssfsi>
     bd4:	dc 01       	movw	r26, r24
     bd6:	cb 01       	movw	r24, r22
     bd8:	8e 8f       	std	Y+30, r24	; 0x1e
     bda:	8e 8d       	ldd	r24, Y+30	; 0x1e
     bdc:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     bde:	8f 85       	ldd	r24, Y+15	; 0x0f
     be0:	8a 95       	dec	r24
     be2:	f1 f7       	brne	.-4      	; 0xbe0 <__stack+0x2e1>
     be4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	lcd_port &= ~ (1<<en);
     be6:	ab e2       	ldi	r26, 0x2B	; 43
     be8:	b0 e0       	ldi	r27, 0x00	; 0
     bea:	eb e2       	ldi	r30, 0x2B	; 43
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	8d 7f       	andi	r24, 0xFD	; 253
     bf2:	8c 93       	st	X, r24
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	a0 e0       	ldi	r26, 0x00	; 0
     bfa:	b0 e4       	ldi	r27, 0x40	; 64
     bfc:	8b 87       	std	Y+11, r24	; 0x0b
     bfe:	9c 87       	std	Y+12, r25	; 0x0c
     c00:	ad 87       	std	Y+13, r26	; 0x0d
     c02:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c04:	6b 85       	ldd	r22, Y+11	; 0x0b
     c06:	7c 85       	ldd	r23, Y+12	; 0x0c
     c08:	8d 85       	ldd	r24, Y+13	; 0x0d
     c0a:	9e 85       	ldd	r25, Y+14	; 0x0e
     c0c:	20 e0       	ldi	r18, 0x00	; 0
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	4a e7       	ldi	r20, 0x7A	; 122
     c12:	55 e4       	ldi	r21, 0x45	; 69
     c14:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__mulsf3>
     c18:	dc 01       	movw	r26, r24
     c1a:	cb 01       	movw	r24, r22
     c1c:	8f 83       	std	Y+7, r24	; 0x07
     c1e:	98 87       	std	Y+8, r25	; 0x08
     c20:	a9 87       	std	Y+9, r26	; 0x09
     c22:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c24:	6f 81       	ldd	r22, Y+7	; 0x07
     c26:	78 85       	ldd	r23, Y+8	; 0x08
     c28:	89 85       	ldd	r24, Y+9	; 0x09
     c2a:	9a 85       	ldd	r25, Y+10	; 0x0a
     c2c:	20 e0       	ldi	r18, 0x00	; 0
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	40 e8       	ldi	r20, 0x80	; 128
     c32:	5f e3       	ldi	r21, 0x3F	; 63
     c34:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__ltsf2>
     c38:	88 23       	and	r24, r24
     c3a:	2c f4       	brge	.+10     	; 0xc46 <__stack+0x347>
		__ticks = 1;
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	9e 83       	std	Y+6, r25	; 0x06
     c42:	8d 83       	std	Y+5, r24	; 0x05
     c44:	3f c0       	rjmp	.+126    	; 0xcc4 <__stack+0x3c5>
	else if (__tmp > 65535)
     c46:	6f 81       	ldd	r22, Y+7	; 0x07
     c48:	78 85       	ldd	r23, Y+8	; 0x08
     c4a:	89 85       	ldd	r24, Y+9	; 0x09
     c4c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c4e:	20 e0       	ldi	r18, 0x00	; 0
     c50:	3f ef       	ldi	r19, 0xFF	; 255
     c52:	4f e7       	ldi	r20, 0x7F	; 127
     c54:	57 e4       	ldi	r21, 0x47	; 71
     c56:	0e 94 89 10 	call	0x2112	; 0x2112 <__gtsf2>
     c5a:	18 16       	cp	r1, r24
     c5c:	4c f5       	brge	.+82     	; 0xcb0 <__stack+0x3b1>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c5e:	6b 85       	ldd	r22, Y+11	; 0x0b
     c60:	7c 85       	ldd	r23, Y+12	; 0x0c
     c62:	8d 85       	ldd	r24, Y+13	; 0x0d
     c64:	9e 85       	ldd	r25, Y+14	; 0x0e
     c66:	20 e0       	ldi	r18, 0x00	; 0
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	40 e2       	ldi	r20, 0x20	; 32
     c6c:	51 e4       	ldi	r21, 0x41	; 65
     c6e:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__mulsf3>
     c72:	dc 01       	movw	r26, r24
     c74:	cb 01       	movw	r24, r22
     c76:	bc 01       	movw	r22, r24
     c78:	cd 01       	movw	r24, r26
     c7a:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__fixunssfsi>
     c7e:	dc 01       	movw	r26, r24
     c80:	cb 01       	movw	r24, r22
     c82:	9e 83       	std	Y+6, r25	; 0x06
     c84:	8d 83       	std	Y+5, r24	; 0x05
     c86:	0f c0       	rjmp	.+30     	; 0xca6 <__stack+0x3a7>
     c88:	80 e9       	ldi	r24, 0x90	; 144
     c8a:	91 e0       	ldi	r25, 0x01	; 1
     c8c:	9c 83       	std	Y+4, r25	; 0x04
     c8e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c90:	8b 81       	ldd	r24, Y+3	; 0x03
     c92:	9c 81       	ldd	r25, Y+4	; 0x04
     c94:	01 97       	sbiw	r24, 0x01	; 1
     c96:	f1 f7       	brne	.-4      	; 0xc94 <__stack+0x395>
     c98:	9c 83       	std	Y+4, r25	; 0x04
     c9a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c9c:	8d 81       	ldd	r24, Y+5	; 0x05
     c9e:	9e 81       	ldd	r25, Y+6	; 0x06
     ca0:	01 97       	sbiw	r24, 0x01	; 1
     ca2:	9e 83       	std	Y+6, r25	; 0x06
     ca4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ca6:	8d 81       	ldd	r24, Y+5	; 0x05
     ca8:	9e 81       	ldd	r25, Y+6	; 0x06
     caa:	00 97       	sbiw	r24, 0x00	; 0
     cac:	69 f7       	brne	.-38     	; 0xc88 <__stack+0x389>
     cae:	14 c0       	rjmp	.+40     	; 0xcd8 <__stack+0x3d9>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cb0:	6f 81       	ldd	r22, Y+7	; 0x07
     cb2:	78 85       	ldd	r23, Y+8	; 0x08
     cb4:	89 85       	ldd	r24, Y+9	; 0x09
     cb6:	9a 85       	ldd	r25, Y+10	; 0x0a
     cb8:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__fixunssfsi>
     cbc:	dc 01       	movw	r26, r24
     cbe:	cb 01       	movw	r24, r22
     cc0:	9e 83       	std	Y+6, r25	; 0x06
     cc2:	8d 83       	std	Y+5, r24	; 0x05
     cc4:	8d 81       	ldd	r24, Y+5	; 0x05
     cc6:	9e 81       	ldd	r25, Y+6	; 0x06
     cc8:	9a 83       	std	Y+2, r25	; 0x02
     cca:	89 83       	std	Y+1, r24	; 0x01
     ccc:	89 81       	ldd	r24, Y+1	; 0x01
     cce:	9a 81       	ldd	r25, Y+2	; 0x02
     cd0:	01 97       	sbiw	r24, 0x01	; 1
     cd2:	f1 f7       	brne	.-4      	; 0xcd0 <__stack+0x3d1>
     cd4:	9a 83       	std	Y+2, r25	; 0x02
     cd6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
     cd8:	c9 5a       	subi	r28, 0xA9	; 169
     cda:	df 4f       	sbci	r29, 0xFF	; 255
     cdc:	0f b6       	in	r0, 0x3f	; 63
     cde:	f8 94       	cli
     ce0:	de bf       	out	0x3e, r29	; 62
     ce2:	0f be       	out	0x3f, r0	; 63
     ce4:	cd bf       	out	0x3d, r28	; 61
     ce6:	cf 91       	pop	r28
     ce8:	df 91       	pop	r29
     cea:	1f 91       	pop	r17
     cec:	0f 91       	pop	r16
     cee:	08 95       	ret

00000cf0 <lcd_clear>:

void lcd_clear()
{
     cf0:	df 93       	push	r29
     cf2:	cf 93       	push	r28
     cf4:	cd b7       	in	r28, 0x3d	; 61
     cf6:	de b7       	in	r29, 0x3e	; 62
     cf8:	2e 97       	sbiw	r28, 0x0e	; 14
     cfa:	0f b6       	in	r0, 0x3f	; 63
     cfc:	f8 94       	cli
     cfe:	de bf       	out	0x3e, r29	; 62
     d00:	0f be       	out	0x3f, r0	; 63
     d02:	cd bf       	out	0x3d, r28	; 61
	lcd_command (0x01);   // this line clears the LCD screen
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	0e 94 07 03 	call	0x60e	; 0x60e <lcd_command>
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	a0 e0       	ldi	r26, 0x00	; 0
     d10:	b0 e4       	ldi	r27, 0x40	; 64
     d12:	8b 87       	std	Y+11, r24	; 0x0b
     d14:	9c 87       	std	Y+12, r25	; 0x0c
     d16:	ad 87       	std	Y+13, r26	; 0x0d
     d18:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d1a:	6b 85       	ldd	r22, Y+11	; 0x0b
     d1c:	7c 85       	ldd	r23, Y+12	; 0x0c
     d1e:	8d 85       	ldd	r24, Y+13	; 0x0d
     d20:	9e 85       	ldd	r25, Y+14	; 0x0e
     d22:	20 e0       	ldi	r18, 0x00	; 0
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	4a e7       	ldi	r20, 0x7A	; 122
     d28:	55 e4       	ldi	r21, 0x45	; 69
     d2a:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__mulsf3>
     d2e:	dc 01       	movw	r26, r24
     d30:	cb 01       	movw	r24, r22
     d32:	8f 83       	std	Y+7, r24	; 0x07
     d34:	98 87       	std	Y+8, r25	; 0x08
     d36:	a9 87       	std	Y+9, r26	; 0x09
     d38:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d3a:	6f 81       	ldd	r22, Y+7	; 0x07
     d3c:	78 85       	ldd	r23, Y+8	; 0x08
     d3e:	89 85       	ldd	r24, Y+9	; 0x09
     d40:	9a 85       	ldd	r25, Y+10	; 0x0a
     d42:	20 e0       	ldi	r18, 0x00	; 0
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	40 e8       	ldi	r20, 0x80	; 128
     d48:	5f e3       	ldi	r21, 0x3F	; 63
     d4a:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__ltsf2>
     d4e:	88 23       	and	r24, r24
     d50:	2c f4       	brge	.+10     	; 0xd5c <lcd_clear+0x6c>
		__ticks = 1;
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	9e 83       	std	Y+6, r25	; 0x06
     d58:	8d 83       	std	Y+5, r24	; 0x05
     d5a:	3f c0       	rjmp	.+126    	; 0xdda <lcd_clear+0xea>
	else if (__tmp > 65535)
     d5c:	6f 81       	ldd	r22, Y+7	; 0x07
     d5e:	78 85       	ldd	r23, Y+8	; 0x08
     d60:	89 85       	ldd	r24, Y+9	; 0x09
     d62:	9a 85       	ldd	r25, Y+10	; 0x0a
     d64:	20 e0       	ldi	r18, 0x00	; 0
     d66:	3f ef       	ldi	r19, 0xFF	; 255
     d68:	4f e7       	ldi	r20, 0x7F	; 127
     d6a:	57 e4       	ldi	r21, 0x47	; 71
     d6c:	0e 94 89 10 	call	0x2112	; 0x2112 <__gtsf2>
     d70:	18 16       	cp	r1, r24
     d72:	4c f5       	brge	.+82     	; 0xdc6 <lcd_clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d74:	6b 85       	ldd	r22, Y+11	; 0x0b
     d76:	7c 85       	ldd	r23, Y+12	; 0x0c
     d78:	8d 85       	ldd	r24, Y+13	; 0x0d
     d7a:	9e 85       	ldd	r25, Y+14	; 0x0e
     d7c:	20 e0       	ldi	r18, 0x00	; 0
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	40 e2       	ldi	r20, 0x20	; 32
     d82:	51 e4       	ldi	r21, 0x41	; 65
     d84:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__mulsf3>
     d88:	dc 01       	movw	r26, r24
     d8a:	cb 01       	movw	r24, r22
     d8c:	bc 01       	movw	r22, r24
     d8e:	cd 01       	movw	r24, r26
     d90:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__fixunssfsi>
     d94:	dc 01       	movw	r26, r24
     d96:	cb 01       	movw	r24, r22
     d98:	9e 83       	std	Y+6, r25	; 0x06
     d9a:	8d 83       	std	Y+5, r24	; 0x05
     d9c:	0f c0       	rjmp	.+30     	; 0xdbc <lcd_clear+0xcc>
     d9e:	80 e9       	ldi	r24, 0x90	; 144
     da0:	91 e0       	ldi	r25, 0x01	; 1
     da2:	9c 83       	std	Y+4, r25	; 0x04
     da4:	8b 83       	std	Y+3, r24	; 0x03
     da6:	8b 81       	ldd	r24, Y+3	; 0x03
     da8:	9c 81       	ldd	r25, Y+4	; 0x04
     daa:	01 97       	sbiw	r24, 0x01	; 1
     dac:	f1 f7       	brne	.-4      	; 0xdaa <lcd_clear+0xba>
     dae:	9c 83       	std	Y+4, r25	; 0x04
     db0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     db2:	8d 81       	ldd	r24, Y+5	; 0x05
     db4:	9e 81       	ldd	r25, Y+6	; 0x06
     db6:	01 97       	sbiw	r24, 0x01	; 1
     db8:	9e 83       	std	Y+6, r25	; 0x06
     dba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dbc:	8d 81       	ldd	r24, Y+5	; 0x05
     dbe:	9e 81       	ldd	r25, Y+6	; 0x06
     dc0:	00 97       	sbiw	r24, 0x00	; 0
     dc2:	69 f7       	brne	.-38     	; 0xd9e <lcd_clear+0xae>
     dc4:	14 c0       	rjmp	.+40     	; 0xdee <lcd_clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dc6:	6f 81       	ldd	r22, Y+7	; 0x07
     dc8:	78 85       	ldd	r23, Y+8	; 0x08
     dca:	89 85       	ldd	r24, Y+9	; 0x09
     dcc:	9a 85       	ldd	r25, Y+10	; 0x0a
     dce:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__fixunssfsi>
     dd2:	dc 01       	movw	r26, r24
     dd4:	cb 01       	movw	r24, r22
     dd6:	9e 83       	std	Y+6, r25	; 0x06
     dd8:	8d 83       	std	Y+5, r24	; 0x05
     dda:	8d 81       	ldd	r24, Y+5	; 0x05
     ddc:	9e 81       	ldd	r25, Y+6	; 0x06
     dde:	9a 83       	std	Y+2, r25	; 0x02
     de0:	89 83       	std	Y+1, r24	; 0x01
     de2:	89 81       	ldd	r24, Y+1	; 0x01
     de4:	9a 81       	ldd	r25, Y+2	; 0x02
     de6:	01 97       	sbiw	r24, 0x01	; 1
     de8:	f1 f7       	brne	.-4      	; 0xde6 <lcd_clear+0xf6>
     dea:	9a 83       	std	Y+2, r25	; 0x02
     dec:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);         // waits for two milliseconds
	lcd_command (0x80);   // this line sets the cursor to the row 1 column 1
     dee:	80 e8       	ldi	r24, 0x80	; 128
     df0:	0e 94 07 03 	call	0x60e	; 0x60e <lcd_command>
}
     df4:	2e 96       	adiw	r28, 0x0e	; 14
     df6:	0f b6       	in	r0, 0x3f	; 63
     df8:	f8 94       	cli
     dfa:	de bf       	out	0x3e, r29	; 62
     dfc:	0f be       	out	0x3f, r0	; 63
     dfe:	cd bf       	out	0x3d, r28	; 61
     e00:	cf 91       	pop	r28
     e02:	df 91       	pop	r29
     e04:	08 95       	ret

00000e06 <lcd_print>:


void lcd_print (char *str)
{
     e06:	0f 93       	push	r16
     e08:	1f 93       	push	r17
     e0a:	df 93       	push	r29
     e0c:	cf 93       	push	r28
     e0e:	cd b7       	in	r28, 0x3d	; 61
     e10:	de b7       	in	r29, 0x3e	; 62
     e12:	ca 55       	subi	r28, 0x5A	; 90
     e14:	d0 40       	sbci	r29, 0x00	; 0
     e16:	0f b6       	in	r0, 0x3f	; 63
     e18:	f8 94       	cli
     e1a:	de bf       	out	0x3e, r29	; 62
     e1c:	0f be       	out	0x3f, r0	; 63
     e1e:	cd bf       	out	0x3d, r28	; 61
     e20:	fe 01       	movw	r30, r28
     e22:	e7 5a       	subi	r30, 0xA7	; 167
     e24:	ff 4f       	sbci	r31, 0xFF	; 255
     e26:	91 83       	std	Z+1, r25	; 0x01
     e28:	80 83       	st	Z, r24
	// this function will be used to display the string on the LCD screen
	int i;
	for(i=0; str[i]!=0; i++)
     e2a:	fe 01       	movw	r30, r28
     e2c:	e9 5a       	subi	r30, 0xA9	; 169
     e2e:	ff 4f       	sbci	r31, 0xFF	; 255
     e30:	11 82       	std	Z+1, r1	; 0x01
     e32:	10 82       	st	Z, r1
     e34:	75 c3       	rjmp	.+1770   	; 0x1520 <lcd_print+0x71a>
	{
		// we can not send the whole string to the LCD we need to send character by character
		// data sending is same as sending a command. there is one difference, in this case the RS pin will be set to HIGH while the RS pin was set to zero in case of the command sending
		lcd_port = (lcd_port & 0x0F) | (str[i] & 0xF0);
     e36:	ab e2       	ldi	r26, 0x2B	; 43
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	eb e2       	ldi	r30, 0x2B	; 43
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	48 2f       	mov	r20, r24
     e42:	4f 70       	andi	r20, 0x0F	; 15
     e44:	fe 01       	movw	r30, r28
     e46:	e9 5a       	subi	r30, 0xA9	; 169
     e48:	ff 4f       	sbci	r31, 0xFF	; 255
     e4a:	20 81       	ld	r18, Z
     e4c:	31 81       	ldd	r19, Z+1	; 0x01
     e4e:	fe 01       	movw	r30, r28
     e50:	e7 5a       	subi	r30, 0xA7	; 167
     e52:	ff 4f       	sbci	r31, 0xFF	; 255
     e54:	80 81       	ld	r24, Z
     e56:	91 81       	ldd	r25, Z+1	; 0x01
     e58:	fc 01       	movw	r30, r24
     e5a:	e2 0f       	add	r30, r18
     e5c:	f3 1f       	adc	r31, r19
     e5e:	80 81       	ld	r24, Z
     e60:	80 7f       	andi	r24, 0xF0	; 240
     e62:	84 2b       	or	r24, r20
     e64:	8c 93       	st	X, r24
		lcd_port |= (1<<rs);
     e66:	ab e2       	ldi	r26, 0x2B	; 43
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	eb e2       	ldi	r30, 0x2B	; 43
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	81 60       	ori	r24, 0x01	; 1
     e72:	8c 93       	st	X, r24
		lcd_port|= (1<<en);
     e74:	ab e2       	ldi	r26, 0x2B	; 43
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	eb e2       	ldi	r30, 0x2B	; 43
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	82 60       	ori	r24, 0x02	; 2
     e80:	8c 93       	st	X, r24
     e82:	fe 01       	movw	r30, r28
     e84:	ed 5a       	subi	r30, 0xAD	; 173
     e86:	ff 4f       	sbci	r31, 0xFF	; 255
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	a0 e8       	ldi	r26, 0x80	; 128
     e8e:	bf e3       	ldi	r27, 0x3F	; 63
     e90:	80 83       	st	Z, r24
     e92:	91 83       	std	Z+1, r25	; 0x01
     e94:	a2 83       	std	Z+2, r26	; 0x02
     e96:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     e98:	8e 01       	movw	r16, r28
     e9a:	01 5b       	subi	r16, 0xB1	; 177
     e9c:	1f 4f       	sbci	r17, 0xFF	; 255
     e9e:	fe 01       	movw	r30, r28
     ea0:	ed 5a       	subi	r30, 0xAD	; 173
     ea2:	ff 4f       	sbci	r31, 0xFF	; 255
     ea4:	60 81       	ld	r22, Z
     ea6:	71 81       	ldd	r23, Z+1	; 0x01
     ea8:	82 81       	ldd	r24, Z+2	; 0x02
     eaa:	93 81       	ldd	r25, Z+3	; 0x03
     eac:	2b ea       	ldi	r18, 0xAB	; 171
     eae:	3a ea       	ldi	r19, 0xAA	; 170
     eb0:	4a ea       	ldi	r20, 0xAA	; 170
     eb2:	50 e4       	ldi	r21, 0x40	; 64
     eb4:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__mulsf3>
     eb8:	dc 01       	movw	r26, r24
     eba:	cb 01       	movw	r24, r22
     ebc:	f8 01       	movw	r30, r16
     ebe:	80 83       	st	Z, r24
     ec0:	91 83       	std	Z+1, r25	; 0x01
     ec2:	a2 83       	std	Z+2, r26	; 0x02
     ec4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ec6:	fe 01       	movw	r30, r28
     ec8:	e1 5b       	subi	r30, 0xB1	; 177
     eca:	ff 4f       	sbci	r31, 0xFF	; 255
     ecc:	60 81       	ld	r22, Z
     ece:	71 81       	ldd	r23, Z+1	; 0x01
     ed0:	82 81       	ldd	r24, Z+2	; 0x02
     ed2:	93 81       	ldd	r25, Z+3	; 0x03
     ed4:	20 e0       	ldi	r18, 0x00	; 0
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	40 e8       	ldi	r20, 0x80	; 128
     eda:	5f e3       	ldi	r21, 0x3F	; 63
     edc:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__ltsf2>
     ee0:	88 23       	and	r24, r24
     ee2:	34 f4       	brge	.+12     	; 0xef0 <lcd_print+0xea>
		__ticks = 1;
     ee4:	fe 01       	movw	r30, r28
     ee6:	e2 5b       	subi	r30, 0xB2	; 178
     ee8:	ff 4f       	sbci	r31, 0xFF	; 255
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	80 83       	st	Z, r24
     eee:	e0 c0       	rjmp	.+448    	; 0x10b0 <lcd_print+0x2aa>
	else if (__tmp > 255)
     ef0:	fe 01       	movw	r30, r28
     ef2:	e1 5b       	subi	r30, 0xB1	; 177
     ef4:	ff 4f       	sbci	r31, 0xFF	; 255
     ef6:	60 81       	ld	r22, Z
     ef8:	71 81       	ldd	r23, Z+1	; 0x01
     efa:	82 81       	ldd	r24, Z+2	; 0x02
     efc:	93 81       	ldd	r25, Z+3	; 0x03
     efe:	20 e0       	ldi	r18, 0x00	; 0
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	4f e7       	ldi	r20, 0x7F	; 127
     f04:	53 e4       	ldi	r21, 0x43	; 67
     f06:	0e 94 89 10 	call	0x2112	; 0x2112 <__gtsf2>
     f0a:	18 16       	cp	r1, r24
     f0c:	0c f0       	brlt	.+2      	; 0xf10 <lcd_print+0x10a>
     f0e:	c0 c0       	rjmp	.+384    	; 0x1090 <lcd_print+0x28a>
	{
		_delay_ms(__us / 1000.0);
     f10:	fe 01       	movw	r30, r28
     f12:	ed 5a       	subi	r30, 0xAD	; 173
     f14:	ff 4f       	sbci	r31, 0xFF	; 255
     f16:	60 81       	ld	r22, Z
     f18:	71 81       	ldd	r23, Z+1	; 0x01
     f1a:	82 81       	ldd	r24, Z+2	; 0x02
     f1c:	93 81       	ldd	r25, Z+3	; 0x03
     f1e:	20 e0       	ldi	r18, 0x00	; 0
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	4a e7       	ldi	r20, 0x7A	; 122
     f24:	54 e4       	ldi	r21, 0x44	; 68
     f26:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <__divsf3>
     f2a:	dc 01       	movw	r26, r24
     f2c:	cb 01       	movw	r24, r22
     f2e:	fe 01       	movw	r30, r28
     f30:	e6 5b       	subi	r30, 0xB6	; 182
     f32:	ff 4f       	sbci	r31, 0xFF	; 255
     f34:	80 83       	st	Z, r24
     f36:	91 83       	std	Z+1, r25	; 0x01
     f38:	a2 83       	std	Z+2, r26	; 0x02
     f3a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f3c:	8e 01       	movw	r16, r28
     f3e:	0a 5b       	subi	r16, 0xBA	; 186
     f40:	1f 4f       	sbci	r17, 0xFF	; 255
     f42:	fe 01       	movw	r30, r28
     f44:	e6 5b       	subi	r30, 0xB6	; 182
     f46:	ff 4f       	sbci	r31, 0xFF	; 255
     f48:	60 81       	ld	r22, Z
     f4a:	71 81       	ldd	r23, Z+1	; 0x01
     f4c:	82 81       	ldd	r24, Z+2	; 0x02
     f4e:	93 81       	ldd	r25, Z+3	; 0x03
     f50:	20 e0       	ldi	r18, 0x00	; 0
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	4a e7       	ldi	r20, 0x7A	; 122
     f56:	55 e4       	ldi	r21, 0x45	; 69
     f58:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__mulsf3>
     f5c:	dc 01       	movw	r26, r24
     f5e:	cb 01       	movw	r24, r22
     f60:	f8 01       	movw	r30, r16
     f62:	80 83       	st	Z, r24
     f64:	91 83       	std	Z+1, r25	; 0x01
     f66:	a2 83       	std	Z+2, r26	; 0x02
     f68:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f6a:	fe 01       	movw	r30, r28
     f6c:	ea 5b       	subi	r30, 0xBA	; 186
     f6e:	ff 4f       	sbci	r31, 0xFF	; 255
     f70:	60 81       	ld	r22, Z
     f72:	71 81       	ldd	r23, Z+1	; 0x01
     f74:	82 81       	ldd	r24, Z+2	; 0x02
     f76:	93 81       	ldd	r25, Z+3	; 0x03
     f78:	20 e0       	ldi	r18, 0x00	; 0
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	40 e8       	ldi	r20, 0x80	; 128
     f7e:	5f e3       	ldi	r21, 0x3F	; 63
     f80:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__ltsf2>
     f84:	88 23       	and	r24, r24
     f86:	44 f4       	brge	.+16     	; 0xf98 <lcd_print+0x192>
		__ticks = 1;
     f88:	fe 01       	movw	r30, r28
     f8a:	ec 5b       	subi	r30, 0xBC	; 188
     f8c:	ff 4f       	sbci	r31, 0xFF	; 255
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	91 83       	std	Z+1, r25	; 0x01
     f94:	80 83       	st	Z, r24
     f96:	64 c0       	rjmp	.+200    	; 0x1060 <lcd_print+0x25a>
	else if (__tmp > 65535)
     f98:	fe 01       	movw	r30, r28
     f9a:	ea 5b       	subi	r30, 0xBA	; 186
     f9c:	ff 4f       	sbci	r31, 0xFF	; 255
     f9e:	60 81       	ld	r22, Z
     fa0:	71 81       	ldd	r23, Z+1	; 0x01
     fa2:	82 81       	ldd	r24, Z+2	; 0x02
     fa4:	93 81       	ldd	r25, Z+3	; 0x03
     fa6:	20 e0       	ldi	r18, 0x00	; 0
     fa8:	3f ef       	ldi	r19, 0xFF	; 255
     faa:	4f e7       	ldi	r20, 0x7F	; 127
     fac:	57 e4       	ldi	r21, 0x47	; 71
     fae:	0e 94 89 10 	call	0x2112	; 0x2112 <__gtsf2>
     fb2:	18 16       	cp	r1, r24
     fb4:	0c f0       	brlt	.+2      	; 0xfb8 <lcd_print+0x1b2>
     fb6:	43 c0       	rjmp	.+134    	; 0x103e <lcd_print+0x238>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fb8:	fe 01       	movw	r30, r28
     fba:	e6 5b       	subi	r30, 0xB6	; 182
     fbc:	ff 4f       	sbci	r31, 0xFF	; 255
     fbe:	60 81       	ld	r22, Z
     fc0:	71 81       	ldd	r23, Z+1	; 0x01
     fc2:	82 81       	ldd	r24, Z+2	; 0x02
     fc4:	93 81       	ldd	r25, Z+3	; 0x03
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	40 e2       	ldi	r20, 0x20	; 32
     fcc:	51 e4       	ldi	r21, 0x41	; 65
     fce:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__mulsf3>
     fd2:	dc 01       	movw	r26, r24
     fd4:	cb 01       	movw	r24, r22
     fd6:	8e 01       	movw	r16, r28
     fd8:	0c 5b       	subi	r16, 0xBC	; 188
     fda:	1f 4f       	sbci	r17, 0xFF	; 255
     fdc:	bc 01       	movw	r22, r24
     fde:	cd 01       	movw	r24, r26
     fe0:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__fixunssfsi>
     fe4:	dc 01       	movw	r26, r24
     fe6:	cb 01       	movw	r24, r22
     fe8:	f8 01       	movw	r30, r16
     fea:	91 83       	std	Z+1, r25	; 0x01
     fec:	80 83       	st	Z, r24
     fee:	1f c0       	rjmp	.+62     	; 0x102e <lcd_print+0x228>
     ff0:	fe 01       	movw	r30, r28
     ff2:	ee 5b       	subi	r30, 0xBE	; 190
     ff4:	ff 4f       	sbci	r31, 0xFF	; 255
     ff6:	80 e9       	ldi	r24, 0x90	; 144
     ff8:	91 e0       	ldi	r25, 0x01	; 1
     ffa:	91 83       	std	Z+1, r25	; 0x01
     ffc:	80 83       	st	Z, r24
     ffe:	fe 01       	movw	r30, r28
    1000:	ee 5b       	subi	r30, 0xBE	; 190
    1002:	ff 4f       	sbci	r31, 0xFF	; 255
    1004:	80 81       	ld	r24, Z
    1006:	91 81       	ldd	r25, Z+1	; 0x01
    1008:	01 97       	sbiw	r24, 0x01	; 1
    100a:	f1 f7       	brne	.-4      	; 0x1008 <lcd_print+0x202>
    100c:	fe 01       	movw	r30, r28
    100e:	ee 5b       	subi	r30, 0xBE	; 190
    1010:	ff 4f       	sbci	r31, 0xFF	; 255
    1012:	91 83       	std	Z+1, r25	; 0x01
    1014:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1016:	de 01       	movw	r26, r28
    1018:	ac 5b       	subi	r26, 0xBC	; 188
    101a:	bf 4f       	sbci	r27, 0xFF	; 255
    101c:	fe 01       	movw	r30, r28
    101e:	ec 5b       	subi	r30, 0xBC	; 188
    1020:	ff 4f       	sbci	r31, 0xFF	; 255
    1022:	80 81       	ld	r24, Z
    1024:	91 81       	ldd	r25, Z+1	; 0x01
    1026:	01 97       	sbiw	r24, 0x01	; 1
    1028:	11 96       	adiw	r26, 0x01	; 1
    102a:	9c 93       	st	X, r25
    102c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    102e:	fe 01       	movw	r30, r28
    1030:	ec 5b       	subi	r30, 0xBC	; 188
    1032:	ff 4f       	sbci	r31, 0xFF	; 255
    1034:	80 81       	ld	r24, Z
    1036:	91 81       	ldd	r25, Z+1	; 0x01
    1038:	00 97       	sbiw	r24, 0x00	; 0
    103a:	d1 f6       	brne	.-76     	; 0xff0 <lcd_print+0x1ea>
    103c:	42 c0       	rjmp	.+132    	; 0x10c2 <lcd_print+0x2bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    103e:	8e 01       	movw	r16, r28
    1040:	0c 5b       	subi	r16, 0xBC	; 188
    1042:	1f 4f       	sbci	r17, 0xFF	; 255
    1044:	fe 01       	movw	r30, r28
    1046:	ea 5b       	subi	r30, 0xBA	; 186
    1048:	ff 4f       	sbci	r31, 0xFF	; 255
    104a:	60 81       	ld	r22, Z
    104c:	71 81       	ldd	r23, Z+1	; 0x01
    104e:	82 81       	ldd	r24, Z+2	; 0x02
    1050:	93 81       	ldd	r25, Z+3	; 0x03
    1052:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__fixunssfsi>
    1056:	dc 01       	movw	r26, r24
    1058:	cb 01       	movw	r24, r22
    105a:	f8 01       	movw	r30, r16
    105c:	91 83       	std	Z+1, r25	; 0x01
    105e:	80 83       	st	Z, r24
    1060:	de 01       	movw	r26, r28
    1062:	a0 5c       	subi	r26, 0xC0	; 192
    1064:	bf 4f       	sbci	r27, 0xFF	; 255
    1066:	fe 01       	movw	r30, r28
    1068:	ec 5b       	subi	r30, 0xBC	; 188
    106a:	ff 4f       	sbci	r31, 0xFF	; 255
    106c:	80 81       	ld	r24, Z
    106e:	91 81       	ldd	r25, Z+1	; 0x01
    1070:	11 96       	adiw	r26, 0x01	; 1
    1072:	9c 93       	st	X, r25
    1074:	8e 93       	st	-X, r24
    1076:	fe 01       	movw	r30, r28
    1078:	e0 5c       	subi	r30, 0xC0	; 192
    107a:	ff 4f       	sbci	r31, 0xFF	; 255
    107c:	80 81       	ld	r24, Z
    107e:	91 81       	ldd	r25, Z+1	; 0x01
    1080:	01 97       	sbiw	r24, 0x01	; 1
    1082:	f1 f7       	brne	.-4      	; 0x1080 <lcd_print+0x27a>
    1084:	fe 01       	movw	r30, r28
    1086:	e0 5c       	subi	r30, 0xC0	; 192
    1088:	ff 4f       	sbci	r31, 0xFF	; 255
    108a:	91 83       	std	Z+1, r25	; 0x01
    108c:	80 83       	st	Z, r24
    108e:	19 c0       	rjmp	.+50     	; 0x10c2 <lcd_print+0x2bc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1090:	8e 01       	movw	r16, r28
    1092:	02 5b       	subi	r16, 0xB2	; 178
    1094:	1f 4f       	sbci	r17, 0xFF	; 255
    1096:	fe 01       	movw	r30, r28
    1098:	e1 5b       	subi	r30, 0xB1	; 177
    109a:	ff 4f       	sbci	r31, 0xFF	; 255
    109c:	60 81       	ld	r22, Z
    109e:	71 81       	ldd	r23, Z+1	; 0x01
    10a0:	82 81       	ldd	r24, Z+2	; 0x02
    10a2:	93 81       	ldd	r25, Z+3	; 0x03
    10a4:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__fixunssfsi>
    10a8:	dc 01       	movw	r26, r24
    10aa:	cb 01       	movw	r24, r22
    10ac:	f8 01       	movw	r30, r16
    10ae:	80 83       	st	Z, r24
    10b0:	fe 01       	movw	r30, r28
    10b2:	e2 5b       	subi	r30, 0xB2	; 178
    10b4:	ff 4f       	sbci	r31, 0xFF	; 255
    10b6:	80 81       	ld	r24, Z
    10b8:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    10ba:	8f ad       	ldd	r24, Y+63	; 0x3f
    10bc:	8a 95       	dec	r24
    10be:	f1 f7       	brne	.-4      	; 0x10bc <lcd_print+0x2b6>
    10c0:	8f af       	std	Y+63, r24	; 0x3f
		_delay_us(1);
		lcd_port &= ~ (1<<en);
    10c2:	ab e2       	ldi	r26, 0x2B	; 43
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	eb e2       	ldi	r30, 0x2B	; 43
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	8d 7f       	andi	r24, 0xFD	; 253
    10ce:	8c 93       	st	X, r24
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	a8 e4       	ldi	r26, 0x48	; 72
    10d6:	b3 e4       	ldi	r27, 0x43	; 67
    10d8:	8b af       	std	Y+59, r24	; 0x3b
    10da:	9c af       	std	Y+60, r25	; 0x3c
    10dc:	ad af       	std	Y+61, r26	; 0x3d
    10de:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    10e0:	6b ad       	ldd	r22, Y+59	; 0x3b
    10e2:	7c ad       	ldd	r23, Y+60	; 0x3c
    10e4:	8d ad       	ldd	r24, Y+61	; 0x3d
    10e6:	9e ad       	ldd	r25, Y+62	; 0x3e
    10e8:	2b ea       	ldi	r18, 0xAB	; 171
    10ea:	3a ea       	ldi	r19, 0xAA	; 170
    10ec:	4a ea       	ldi	r20, 0xAA	; 170
    10ee:	50 e4       	ldi	r21, 0x40	; 64
    10f0:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__mulsf3>
    10f4:	dc 01       	movw	r26, r24
    10f6:	cb 01       	movw	r24, r22
    10f8:	8f ab       	std	Y+55, r24	; 0x37
    10fa:	98 af       	std	Y+56, r25	; 0x38
    10fc:	a9 af       	std	Y+57, r26	; 0x39
    10fe:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1100:	6f a9       	ldd	r22, Y+55	; 0x37
    1102:	78 ad       	ldd	r23, Y+56	; 0x38
    1104:	89 ad       	ldd	r24, Y+57	; 0x39
    1106:	9a ad       	ldd	r25, Y+58	; 0x3a
    1108:	20 e0       	ldi	r18, 0x00	; 0
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	40 e8       	ldi	r20, 0x80	; 128
    110e:	5f e3       	ldi	r21, 0x3F	; 63
    1110:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__ltsf2>
    1114:	88 23       	and	r24, r24
    1116:	1c f4       	brge	.+6      	; 0x111e <lcd_print+0x318>
		__ticks = 1;
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	8e ab       	std	Y+54, r24	; 0x36
    111c:	91 c0       	rjmp	.+290    	; 0x1240 <lcd_print+0x43a>
	else if (__tmp > 255)
    111e:	6f a9       	ldd	r22, Y+55	; 0x37
    1120:	78 ad       	ldd	r23, Y+56	; 0x38
    1122:	89 ad       	ldd	r24, Y+57	; 0x39
    1124:	9a ad       	ldd	r25, Y+58	; 0x3a
    1126:	20 e0       	ldi	r18, 0x00	; 0
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	4f e7       	ldi	r20, 0x7F	; 127
    112c:	53 e4       	ldi	r21, 0x43	; 67
    112e:	0e 94 89 10 	call	0x2112	; 0x2112 <__gtsf2>
    1132:	18 16       	cp	r1, r24
    1134:	0c f0       	brlt	.+2      	; 0x1138 <lcd_print+0x332>
    1136:	7b c0       	rjmp	.+246    	; 0x122e <lcd_print+0x428>
	{
		_delay_ms(__us / 1000.0);
    1138:	6b ad       	ldd	r22, Y+59	; 0x3b
    113a:	7c ad       	ldd	r23, Y+60	; 0x3c
    113c:	8d ad       	ldd	r24, Y+61	; 0x3d
    113e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1140:	20 e0       	ldi	r18, 0x00	; 0
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	4a e7       	ldi	r20, 0x7A	; 122
    1146:	54 e4       	ldi	r21, 0x44	; 68
    1148:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <__divsf3>
    114c:	dc 01       	movw	r26, r24
    114e:	cb 01       	movw	r24, r22
    1150:	8a ab       	std	Y+50, r24	; 0x32
    1152:	9b ab       	std	Y+51, r25	; 0x33
    1154:	ac ab       	std	Y+52, r26	; 0x34
    1156:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1158:	6a a9       	ldd	r22, Y+50	; 0x32
    115a:	7b a9       	ldd	r23, Y+51	; 0x33
    115c:	8c a9       	ldd	r24, Y+52	; 0x34
    115e:	9d a9       	ldd	r25, Y+53	; 0x35
    1160:	20 e0       	ldi	r18, 0x00	; 0
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	4a e7       	ldi	r20, 0x7A	; 122
    1166:	55 e4       	ldi	r21, 0x45	; 69
    1168:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__mulsf3>
    116c:	dc 01       	movw	r26, r24
    116e:	cb 01       	movw	r24, r22
    1170:	8e a7       	std	Y+46, r24	; 0x2e
    1172:	9f a7       	std	Y+47, r25	; 0x2f
    1174:	a8 ab       	std	Y+48, r26	; 0x30
    1176:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1178:	6e a5       	ldd	r22, Y+46	; 0x2e
    117a:	7f a5       	ldd	r23, Y+47	; 0x2f
    117c:	88 a9       	ldd	r24, Y+48	; 0x30
    117e:	99 a9       	ldd	r25, Y+49	; 0x31
    1180:	20 e0       	ldi	r18, 0x00	; 0
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	40 e8       	ldi	r20, 0x80	; 128
    1186:	5f e3       	ldi	r21, 0x3F	; 63
    1188:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__ltsf2>
    118c:	88 23       	and	r24, r24
    118e:	2c f4       	brge	.+10     	; 0x119a <lcd_print+0x394>
		__ticks = 1;
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	9d a7       	std	Y+45, r25	; 0x2d
    1196:	8c a7       	std	Y+44, r24	; 0x2c
    1198:	3f c0       	rjmp	.+126    	; 0x1218 <lcd_print+0x412>
	else if (__tmp > 65535)
    119a:	6e a5       	ldd	r22, Y+46	; 0x2e
    119c:	7f a5       	ldd	r23, Y+47	; 0x2f
    119e:	88 a9       	ldd	r24, Y+48	; 0x30
    11a0:	99 a9       	ldd	r25, Y+49	; 0x31
    11a2:	20 e0       	ldi	r18, 0x00	; 0
    11a4:	3f ef       	ldi	r19, 0xFF	; 255
    11a6:	4f e7       	ldi	r20, 0x7F	; 127
    11a8:	57 e4       	ldi	r21, 0x47	; 71
    11aa:	0e 94 89 10 	call	0x2112	; 0x2112 <__gtsf2>
    11ae:	18 16       	cp	r1, r24
    11b0:	4c f5       	brge	.+82     	; 0x1204 <lcd_print+0x3fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11b2:	6a a9       	ldd	r22, Y+50	; 0x32
    11b4:	7b a9       	ldd	r23, Y+51	; 0x33
    11b6:	8c a9       	ldd	r24, Y+52	; 0x34
    11b8:	9d a9       	ldd	r25, Y+53	; 0x35
    11ba:	20 e0       	ldi	r18, 0x00	; 0
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	40 e2       	ldi	r20, 0x20	; 32
    11c0:	51 e4       	ldi	r21, 0x41	; 65
    11c2:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__mulsf3>
    11c6:	dc 01       	movw	r26, r24
    11c8:	cb 01       	movw	r24, r22
    11ca:	bc 01       	movw	r22, r24
    11cc:	cd 01       	movw	r24, r26
    11ce:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__fixunssfsi>
    11d2:	dc 01       	movw	r26, r24
    11d4:	cb 01       	movw	r24, r22
    11d6:	9d a7       	std	Y+45, r25	; 0x2d
    11d8:	8c a7       	std	Y+44, r24	; 0x2c
    11da:	0f c0       	rjmp	.+30     	; 0x11fa <lcd_print+0x3f4>
    11dc:	80 e9       	ldi	r24, 0x90	; 144
    11de:	91 e0       	ldi	r25, 0x01	; 1
    11e0:	9b a7       	std	Y+43, r25	; 0x2b
    11e2:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    11e4:	8a a5       	ldd	r24, Y+42	; 0x2a
    11e6:	9b a5       	ldd	r25, Y+43	; 0x2b
    11e8:	01 97       	sbiw	r24, 0x01	; 1
    11ea:	f1 f7       	brne	.-4      	; 0x11e8 <lcd_print+0x3e2>
    11ec:	9b a7       	std	Y+43, r25	; 0x2b
    11ee:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11f0:	8c a5       	ldd	r24, Y+44	; 0x2c
    11f2:	9d a5       	ldd	r25, Y+45	; 0x2d
    11f4:	01 97       	sbiw	r24, 0x01	; 1
    11f6:	9d a7       	std	Y+45, r25	; 0x2d
    11f8:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11fa:	8c a5       	ldd	r24, Y+44	; 0x2c
    11fc:	9d a5       	ldd	r25, Y+45	; 0x2d
    11fe:	00 97       	sbiw	r24, 0x00	; 0
    1200:	69 f7       	brne	.-38     	; 0x11dc <lcd_print+0x3d6>
    1202:	24 c0       	rjmp	.+72     	; 0x124c <lcd_print+0x446>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1204:	6e a5       	ldd	r22, Y+46	; 0x2e
    1206:	7f a5       	ldd	r23, Y+47	; 0x2f
    1208:	88 a9       	ldd	r24, Y+48	; 0x30
    120a:	99 a9       	ldd	r25, Y+49	; 0x31
    120c:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__fixunssfsi>
    1210:	dc 01       	movw	r26, r24
    1212:	cb 01       	movw	r24, r22
    1214:	9d a7       	std	Y+45, r25	; 0x2d
    1216:	8c a7       	std	Y+44, r24	; 0x2c
    1218:	8c a5       	ldd	r24, Y+44	; 0x2c
    121a:	9d a5       	ldd	r25, Y+45	; 0x2d
    121c:	99 a7       	std	Y+41, r25	; 0x29
    121e:	88 a7       	std	Y+40, r24	; 0x28
    1220:	88 a5       	ldd	r24, Y+40	; 0x28
    1222:	99 a5       	ldd	r25, Y+41	; 0x29
    1224:	01 97       	sbiw	r24, 0x01	; 1
    1226:	f1 f7       	brne	.-4      	; 0x1224 <lcd_print+0x41e>
    1228:	99 a7       	std	Y+41, r25	; 0x29
    122a:	88 a7       	std	Y+40, r24	; 0x28
    122c:	0f c0       	rjmp	.+30     	; 0x124c <lcd_print+0x446>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    122e:	6f a9       	ldd	r22, Y+55	; 0x37
    1230:	78 ad       	ldd	r23, Y+56	; 0x38
    1232:	89 ad       	ldd	r24, Y+57	; 0x39
    1234:	9a ad       	ldd	r25, Y+58	; 0x3a
    1236:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__fixunssfsi>
    123a:	dc 01       	movw	r26, r24
    123c:	cb 01       	movw	r24, r22
    123e:	8e ab       	std	Y+54, r24	; 0x36
    1240:	8e a9       	ldd	r24, Y+54	; 0x36
    1242:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1244:	8f a1       	ldd	r24, Y+39	; 0x27
    1246:	8a 95       	dec	r24
    1248:	f1 f7       	brne	.-4      	; 0x1246 <lcd_print+0x440>
    124a:	8f a3       	std	Y+39, r24	; 0x27
		_delay_us(200);
		lcd_port = (lcd_port & 0x0F) | (str[i] << 4);
    124c:	ab e2       	ldi	r26, 0x2B	; 43
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	eb e2       	ldi	r30, 0x2B	; 43
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	48 2f       	mov	r20, r24
    1258:	4f 70       	andi	r20, 0x0F	; 15
    125a:	fe 01       	movw	r30, r28
    125c:	e9 5a       	subi	r30, 0xA9	; 169
    125e:	ff 4f       	sbci	r31, 0xFF	; 255
    1260:	20 81       	ld	r18, Z
    1262:	31 81       	ldd	r19, Z+1	; 0x01
    1264:	fe 01       	movw	r30, r28
    1266:	e7 5a       	subi	r30, 0xA7	; 167
    1268:	ff 4f       	sbci	r31, 0xFF	; 255
    126a:	80 81       	ld	r24, Z
    126c:	91 81       	ldd	r25, Z+1	; 0x01
    126e:	fc 01       	movw	r30, r24
    1270:	e2 0f       	add	r30, r18
    1272:	f3 1f       	adc	r31, r19
    1274:	80 81       	ld	r24, Z
    1276:	99 27       	eor	r25, r25
    1278:	87 fd       	sbrc	r24, 7
    127a:	90 95       	com	r25
    127c:	82 95       	swap	r24
    127e:	92 95       	swap	r25
    1280:	90 7f       	andi	r25, 0xF0	; 240
    1282:	98 27       	eor	r25, r24
    1284:	80 7f       	andi	r24, 0xF0	; 240
    1286:	98 27       	eor	r25, r24
    1288:	84 2b       	or	r24, r20
    128a:	8c 93       	st	X, r24
		lcd_port |= (1<<en);
    128c:	ab e2       	ldi	r26, 0x2B	; 43
    128e:	b0 e0       	ldi	r27, 0x00	; 0
    1290:	eb e2       	ldi	r30, 0x2B	; 43
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	82 60       	ori	r24, 0x02	; 2
    1298:	8c 93       	st	X, r24
    129a:	80 e0       	ldi	r24, 0x00	; 0
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	a0 e8       	ldi	r26, 0x80	; 128
    12a0:	bf e3       	ldi	r27, 0x3F	; 63
    12a2:	8b a3       	std	Y+35, r24	; 0x23
    12a4:	9c a3       	std	Y+36, r25	; 0x24
    12a6:	ad a3       	std	Y+37, r26	; 0x25
    12a8:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    12aa:	6b a1       	ldd	r22, Y+35	; 0x23
    12ac:	7c a1       	ldd	r23, Y+36	; 0x24
    12ae:	8d a1       	ldd	r24, Y+37	; 0x25
    12b0:	9e a1       	ldd	r25, Y+38	; 0x26
    12b2:	2b ea       	ldi	r18, 0xAB	; 171
    12b4:	3a ea       	ldi	r19, 0xAA	; 170
    12b6:	4a ea       	ldi	r20, 0xAA	; 170
    12b8:	50 e4       	ldi	r21, 0x40	; 64
    12ba:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__mulsf3>
    12be:	dc 01       	movw	r26, r24
    12c0:	cb 01       	movw	r24, r22
    12c2:	8f 8f       	std	Y+31, r24	; 0x1f
    12c4:	98 a3       	std	Y+32, r25	; 0x20
    12c6:	a9 a3       	std	Y+33, r26	; 0x21
    12c8:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    12ca:	6f 8d       	ldd	r22, Y+31	; 0x1f
    12cc:	78 a1       	ldd	r23, Y+32	; 0x20
    12ce:	89 a1       	ldd	r24, Y+33	; 0x21
    12d0:	9a a1       	ldd	r25, Y+34	; 0x22
    12d2:	20 e0       	ldi	r18, 0x00	; 0
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	40 e8       	ldi	r20, 0x80	; 128
    12d8:	5f e3       	ldi	r21, 0x3F	; 63
    12da:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__ltsf2>
    12de:	88 23       	and	r24, r24
    12e0:	1c f4       	brge	.+6      	; 0x12e8 <lcd_print+0x4e2>
		__ticks = 1;
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	8e 8f       	std	Y+30, r24	; 0x1e
    12e6:	91 c0       	rjmp	.+290    	; 0x140a <lcd_print+0x604>
	else if (__tmp > 255)
    12e8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    12ea:	78 a1       	ldd	r23, Y+32	; 0x20
    12ec:	89 a1       	ldd	r24, Y+33	; 0x21
    12ee:	9a a1       	ldd	r25, Y+34	; 0x22
    12f0:	20 e0       	ldi	r18, 0x00	; 0
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	4f e7       	ldi	r20, 0x7F	; 127
    12f6:	53 e4       	ldi	r21, 0x43	; 67
    12f8:	0e 94 89 10 	call	0x2112	; 0x2112 <__gtsf2>
    12fc:	18 16       	cp	r1, r24
    12fe:	0c f0       	brlt	.+2      	; 0x1302 <lcd_print+0x4fc>
    1300:	7b c0       	rjmp	.+246    	; 0x13f8 <lcd_print+0x5f2>
	{
		_delay_ms(__us / 1000.0);
    1302:	6b a1       	ldd	r22, Y+35	; 0x23
    1304:	7c a1       	ldd	r23, Y+36	; 0x24
    1306:	8d a1       	ldd	r24, Y+37	; 0x25
    1308:	9e a1       	ldd	r25, Y+38	; 0x26
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	4a e7       	ldi	r20, 0x7A	; 122
    1310:	54 e4       	ldi	r21, 0x44	; 68
    1312:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <__divsf3>
    1316:	dc 01       	movw	r26, r24
    1318:	cb 01       	movw	r24, r22
    131a:	8a 8f       	std	Y+26, r24	; 0x1a
    131c:	9b 8f       	std	Y+27, r25	; 0x1b
    131e:	ac 8f       	std	Y+28, r26	; 0x1c
    1320:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1322:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1324:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1326:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1328:	9d 8d       	ldd	r25, Y+29	; 0x1d
    132a:	20 e0       	ldi	r18, 0x00	; 0
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	4a e7       	ldi	r20, 0x7A	; 122
    1330:	55 e4       	ldi	r21, 0x45	; 69
    1332:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__mulsf3>
    1336:	dc 01       	movw	r26, r24
    1338:	cb 01       	movw	r24, r22
    133a:	8e 8b       	std	Y+22, r24	; 0x16
    133c:	9f 8b       	std	Y+23, r25	; 0x17
    133e:	a8 8f       	std	Y+24, r26	; 0x18
    1340:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1342:	6e 89       	ldd	r22, Y+22	; 0x16
    1344:	7f 89       	ldd	r23, Y+23	; 0x17
    1346:	88 8d       	ldd	r24, Y+24	; 0x18
    1348:	99 8d       	ldd	r25, Y+25	; 0x19
    134a:	20 e0       	ldi	r18, 0x00	; 0
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	40 e8       	ldi	r20, 0x80	; 128
    1350:	5f e3       	ldi	r21, 0x3F	; 63
    1352:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__ltsf2>
    1356:	88 23       	and	r24, r24
    1358:	2c f4       	brge	.+10     	; 0x1364 <lcd_print+0x55e>
		__ticks = 1;
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	9d 8b       	std	Y+21, r25	; 0x15
    1360:	8c 8b       	std	Y+20, r24	; 0x14
    1362:	3f c0       	rjmp	.+126    	; 0x13e2 <lcd_print+0x5dc>
	else if (__tmp > 65535)
    1364:	6e 89       	ldd	r22, Y+22	; 0x16
    1366:	7f 89       	ldd	r23, Y+23	; 0x17
    1368:	88 8d       	ldd	r24, Y+24	; 0x18
    136a:	99 8d       	ldd	r25, Y+25	; 0x19
    136c:	20 e0       	ldi	r18, 0x00	; 0
    136e:	3f ef       	ldi	r19, 0xFF	; 255
    1370:	4f e7       	ldi	r20, 0x7F	; 127
    1372:	57 e4       	ldi	r21, 0x47	; 71
    1374:	0e 94 89 10 	call	0x2112	; 0x2112 <__gtsf2>
    1378:	18 16       	cp	r1, r24
    137a:	4c f5       	brge	.+82     	; 0x13ce <lcd_print+0x5c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    137c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    137e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1380:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1382:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1384:	20 e0       	ldi	r18, 0x00	; 0
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	40 e2       	ldi	r20, 0x20	; 32
    138a:	51 e4       	ldi	r21, 0x41	; 65
    138c:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__mulsf3>
    1390:	dc 01       	movw	r26, r24
    1392:	cb 01       	movw	r24, r22
    1394:	bc 01       	movw	r22, r24
    1396:	cd 01       	movw	r24, r26
    1398:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__fixunssfsi>
    139c:	dc 01       	movw	r26, r24
    139e:	cb 01       	movw	r24, r22
    13a0:	9d 8b       	std	Y+21, r25	; 0x15
    13a2:	8c 8b       	std	Y+20, r24	; 0x14
    13a4:	0f c0       	rjmp	.+30     	; 0x13c4 <lcd_print+0x5be>
    13a6:	80 e9       	ldi	r24, 0x90	; 144
    13a8:	91 e0       	ldi	r25, 0x01	; 1
    13aa:	9b 8b       	std	Y+19, r25	; 0x13
    13ac:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13ae:	8a 89       	ldd	r24, Y+18	; 0x12
    13b0:	9b 89       	ldd	r25, Y+19	; 0x13
    13b2:	01 97       	sbiw	r24, 0x01	; 1
    13b4:	f1 f7       	brne	.-4      	; 0x13b2 <lcd_print+0x5ac>
    13b6:	9b 8b       	std	Y+19, r25	; 0x13
    13b8:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ba:	8c 89       	ldd	r24, Y+20	; 0x14
    13bc:	9d 89       	ldd	r25, Y+21	; 0x15
    13be:	01 97       	sbiw	r24, 0x01	; 1
    13c0:	9d 8b       	std	Y+21, r25	; 0x15
    13c2:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13c4:	8c 89       	ldd	r24, Y+20	; 0x14
    13c6:	9d 89       	ldd	r25, Y+21	; 0x15
    13c8:	00 97       	sbiw	r24, 0x00	; 0
    13ca:	69 f7       	brne	.-38     	; 0x13a6 <lcd_print+0x5a0>
    13cc:	24 c0       	rjmp	.+72     	; 0x1416 <lcd_print+0x610>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13ce:	6e 89       	ldd	r22, Y+22	; 0x16
    13d0:	7f 89       	ldd	r23, Y+23	; 0x17
    13d2:	88 8d       	ldd	r24, Y+24	; 0x18
    13d4:	99 8d       	ldd	r25, Y+25	; 0x19
    13d6:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__fixunssfsi>
    13da:	dc 01       	movw	r26, r24
    13dc:	cb 01       	movw	r24, r22
    13de:	9d 8b       	std	Y+21, r25	; 0x15
    13e0:	8c 8b       	std	Y+20, r24	; 0x14
    13e2:	8c 89       	ldd	r24, Y+20	; 0x14
    13e4:	9d 89       	ldd	r25, Y+21	; 0x15
    13e6:	99 8b       	std	Y+17, r25	; 0x11
    13e8:	88 8b       	std	Y+16, r24	; 0x10
    13ea:	88 89       	ldd	r24, Y+16	; 0x10
    13ec:	99 89       	ldd	r25, Y+17	; 0x11
    13ee:	01 97       	sbiw	r24, 0x01	; 1
    13f0:	f1 f7       	brne	.-4      	; 0x13ee <lcd_print+0x5e8>
    13f2:	99 8b       	std	Y+17, r25	; 0x11
    13f4:	88 8b       	std	Y+16, r24	; 0x10
    13f6:	0f c0       	rjmp	.+30     	; 0x1416 <lcd_print+0x610>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    13f8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    13fa:	78 a1       	ldd	r23, Y+32	; 0x20
    13fc:	89 a1       	ldd	r24, Y+33	; 0x21
    13fe:	9a a1       	ldd	r25, Y+34	; 0x22
    1400:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__fixunssfsi>
    1404:	dc 01       	movw	r26, r24
    1406:	cb 01       	movw	r24, r22
    1408:	8e 8f       	std	Y+30, r24	; 0x1e
    140a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    140c:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    140e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1410:	8a 95       	dec	r24
    1412:	f1 f7       	brne	.-4      	; 0x1410 <lcd_print+0x60a>
    1414:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_us(1);
		lcd_port &= ~ (1<<en);
    1416:	ab e2       	ldi	r26, 0x2B	; 43
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	eb e2       	ldi	r30, 0x2B	; 43
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	8d 7f       	andi	r24, 0xFD	; 253
    1422:	8c 93       	st	X, r24
    1424:	80 e0       	ldi	r24, 0x00	; 0
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	a0 e0       	ldi	r26, 0x00	; 0
    142a:	b0 e4       	ldi	r27, 0x40	; 64
    142c:	8b 87       	std	Y+11, r24	; 0x0b
    142e:	9c 87       	std	Y+12, r25	; 0x0c
    1430:	ad 87       	std	Y+13, r26	; 0x0d
    1432:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1434:	6b 85       	ldd	r22, Y+11	; 0x0b
    1436:	7c 85       	ldd	r23, Y+12	; 0x0c
    1438:	8d 85       	ldd	r24, Y+13	; 0x0d
    143a:	9e 85       	ldd	r25, Y+14	; 0x0e
    143c:	20 e0       	ldi	r18, 0x00	; 0
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	4a e7       	ldi	r20, 0x7A	; 122
    1442:	55 e4       	ldi	r21, 0x45	; 69
    1444:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__mulsf3>
    1448:	dc 01       	movw	r26, r24
    144a:	cb 01       	movw	r24, r22
    144c:	8f 83       	std	Y+7, r24	; 0x07
    144e:	98 87       	std	Y+8, r25	; 0x08
    1450:	a9 87       	std	Y+9, r26	; 0x09
    1452:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1454:	6f 81       	ldd	r22, Y+7	; 0x07
    1456:	78 85       	ldd	r23, Y+8	; 0x08
    1458:	89 85       	ldd	r24, Y+9	; 0x09
    145a:	9a 85       	ldd	r25, Y+10	; 0x0a
    145c:	20 e0       	ldi	r18, 0x00	; 0
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	40 e8       	ldi	r20, 0x80	; 128
    1462:	5f e3       	ldi	r21, 0x3F	; 63
    1464:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__ltsf2>
    1468:	88 23       	and	r24, r24
    146a:	2c f4       	brge	.+10     	; 0x1476 <lcd_print+0x670>
		__ticks = 1;
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	9e 83       	std	Y+6, r25	; 0x06
    1472:	8d 83       	std	Y+5, r24	; 0x05
    1474:	3f c0       	rjmp	.+126    	; 0x14f4 <lcd_print+0x6ee>
	else if (__tmp > 65535)
    1476:	6f 81       	ldd	r22, Y+7	; 0x07
    1478:	78 85       	ldd	r23, Y+8	; 0x08
    147a:	89 85       	ldd	r24, Y+9	; 0x09
    147c:	9a 85       	ldd	r25, Y+10	; 0x0a
    147e:	20 e0       	ldi	r18, 0x00	; 0
    1480:	3f ef       	ldi	r19, 0xFF	; 255
    1482:	4f e7       	ldi	r20, 0x7F	; 127
    1484:	57 e4       	ldi	r21, 0x47	; 71
    1486:	0e 94 89 10 	call	0x2112	; 0x2112 <__gtsf2>
    148a:	18 16       	cp	r1, r24
    148c:	4c f5       	brge	.+82     	; 0x14e0 <lcd_print+0x6da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    148e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1490:	7c 85       	ldd	r23, Y+12	; 0x0c
    1492:	8d 85       	ldd	r24, Y+13	; 0x0d
    1494:	9e 85       	ldd	r25, Y+14	; 0x0e
    1496:	20 e0       	ldi	r18, 0x00	; 0
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	40 e2       	ldi	r20, 0x20	; 32
    149c:	51 e4       	ldi	r21, 0x41	; 65
    149e:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__mulsf3>
    14a2:	dc 01       	movw	r26, r24
    14a4:	cb 01       	movw	r24, r22
    14a6:	bc 01       	movw	r22, r24
    14a8:	cd 01       	movw	r24, r26
    14aa:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__fixunssfsi>
    14ae:	dc 01       	movw	r26, r24
    14b0:	cb 01       	movw	r24, r22
    14b2:	9e 83       	std	Y+6, r25	; 0x06
    14b4:	8d 83       	std	Y+5, r24	; 0x05
    14b6:	0f c0       	rjmp	.+30     	; 0x14d6 <lcd_print+0x6d0>
    14b8:	80 e9       	ldi	r24, 0x90	; 144
    14ba:	91 e0       	ldi	r25, 0x01	; 1
    14bc:	9c 83       	std	Y+4, r25	; 0x04
    14be:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14c0:	8b 81       	ldd	r24, Y+3	; 0x03
    14c2:	9c 81       	ldd	r25, Y+4	; 0x04
    14c4:	01 97       	sbiw	r24, 0x01	; 1
    14c6:	f1 f7       	brne	.-4      	; 0x14c4 <lcd_print+0x6be>
    14c8:	9c 83       	std	Y+4, r25	; 0x04
    14ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14cc:	8d 81       	ldd	r24, Y+5	; 0x05
    14ce:	9e 81       	ldd	r25, Y+6	; 0x06
    14d0:	01 97       	sbiw	r24, 0x01	; 1
    14d2:	9e 83       	std	Y+6, r25	; 0x06
    14d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14d6:	8d 81       	ldd	r24, Y+5	; 0x05
    14d8:	9e 81       	ldd	r25, Y+6	; 0x06
    14da:	00 97       	sbiw	r24, 0x00	; 0
    14dc:	69 f7       	brne	.-38     	; 0x14b8 <lcd_print+0x6b2>
    14de:	14 c0       	rjmp	.+40     	; 0x1508 <lcd_print+0x702>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14e0:	6f 81       	ldd	r22, Y+7	; 0x07
    14e2:	78 85       	ldd	r23, Y+8	; 0x08
    14e4:	89 85       	ldd	r24, Y+9	; 0x09
    14e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14e8:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__fixunssfsi>
    14ec:	dc 01       	movw	r26, r24
    14ee:	cb 01       	movw	r24, r22
    14f0:	9e 83       	std	Y+6, r25	; 0x06
    14f2:	8d 83       	std	Y+5, r24	; 0x05
    14f4:	8d 81       	ldd	r24, Y+5	; 0x05
    14f6:	9e 81       	ldd	r25, Y+6	; 0x06
    14f8:	9a 83       	std	Y+2, r25	; 0x02
    14fa:	89 83       	std	Y+1, r24	; 0x01
    14fc:	89 81       	ldd	r24, Y+1	; 0x01
    14fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1500:	01 97       	sbiw	r24, 0x01	; 1
    1502:	f1 f7       	brne	.-4      	; 0x1500 <lcd_print+0x6fa>
    1504:	9a 83       	std	Y+2, r25	; 0x02
    1506:	89 83       	std	Y+1, r24	; 0x01

void lcd_print (char *str)
{
	// this function will be used to display the string on the LCD screen
	int i;
	for(i=0; str[i]!=0; i++)
    1508:	de 01       	movw	r26, r28
    150a:	a9 5a       	subi	r26, 0xA9	; 169
    150c:	bf 4f       	sbci	r27, 0xFF	; 255
    150e:	fe 01       	movw	r30, r28
    1510:	e9 5a       	subi	r30, 0xA9	; 169
    1512:	ff 4f       	sbci	r31, 0xFF	; 255
    1514:	80 81       	ld	r24, Z
    1516:	91 81       	ldd	r25, Z+1	; 0x01
    1518:	01 96       	adiw	r24, 0x01	; 1
    151a:	11 96       	adiw	r26, 0x01	; 1
    151c:	9c 93       	st	X, r25
    151e:	8e 93       	st	-X, r24
    1520:	fe 01       	movw	r30, r28
    1522:	e9 5a       	subi	r30, 0xA9	; 169
    1524:	ff 4f       	sbci	r31, 0xFF	; 255
    1526:	20 81       	ld	r18, Z
    1528:	31 81       	ldd	r19, Z+1	; 0x01
    152a:	fe 01       	movw	r30, r28
    152c:	e7 5a       	subi	r30, 0xA7	; 167
    152e:	ff 4f       	sbci	r31, 0xFF	; 255
    1530:	80 81       	ld	r24, Z
    1532:	91 81       	ldd	r25, Z+1	; 0x01
    1534:	fc 01       	movw	r30, r24
    1536:	e2 0f       	add	r30, r18
    1538:	f3 1f       	adc	r31, r19
    153a:	80 81       	ld	r24, Z
    153c:	88 23       	and	r24, r24
    153e:	09 f0       	breq	.+2      	; 0x1542 <lcd_print+0x73c>
    1540:	7a cc       	rjmp	.-1804   	; 0xe36 <lcd_print+0x30>
		lcd_port |= (1<<en);
		_delay_us(1);
		lcd_port &= ~ (1<<en);
		_delay_ms(2);
	}
}
    1542:	c6 5a       	subi	r28, 0xA6	; 166
    1544:	df 4f       	sbci	r29, 0xFF	; 255
    1546:	0f b6       	in	r0, 0x3f	; 63
    1548:	f8 94       	cli
    154a:	de bf       	out	0x3e, r29	; 62
    154c:	0f be       	out	0x3f, r0	; 63
    154e:	cd bf       	out	0x3d, r28	; 61
    1550:	cf 91       	pop	r28
    1552:	df 91       	pop	r29
    1554:	1f 91       	pop	r17
    1556:	0f 91       	pop	r16
    1558:	08 95       	ret

0000155a <lcd_setCursor>:



void lcd_setCursor(unsigned char x, unsigned char y){    // this function will be used to set cursor. the place where we want to display the data
    155a:	df 93       	push	r29
    155c:	cf 93       	push	r28
    155e:	cd b7       	in	r28, 0x3d	; 61
    1560:	de b7       	in	r29, 0x3e	; 62
    1562:	6c 97       	sbiw	r28, 0x1c	; 28
    1564:	0f b6       	in	r0, 0x3f	; 63
    1566:	f8 94       	cli
    1568:	de bf       	out	0x3e, r29	; 62
    156a:	0f be       	out	0x3f, r0	; 63
    156c:	cd bf       	out	0x3d, r28	; 61
    156e:	8b 8f       	std	Y+27, r24	; 0x1b
    1570:	6c 8f       	std	Y+28, r22	; 0x1c
	unsigned char adr[] = {0x80, 0xC0};    // the 16x2 LCD has two rows first row has a value of 0x80. So let's say we want to go to the seconds column of first row
    1572:	80 e8       	ldi	r24, 0x80	; 128
    1574:	89 8f       	std	Y+25, r24	; 0x19
    1576:	80 ec       	ldi	r24, 0xC0	; 192
    1578:	8a 8f       	std	Y+26, r24	; 0x1a
	// we just need to send the command with adding 2 with the initial value. So, it will be (0x80 + 2) this is how the code works
	lcd_command(adr[y-1] + x-1);
    157a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    157c:	88 2f       	mov	r24, r24
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	9c 01       	movw	r18, r24
    1582:	21 50       	subi	r18, 0x01	; 1
    1584:	30 40       	sbci	r19, 0x00	; 0
    1586:	ce 01       	movw	r24, r28
    1588:	49 96       	adiw	r24, 0x19	; 25
    158a:	fc 01       	movw	r30, r24
    158c:	e2 0f       	add	r30, r18
    158e:	f3 1f       	adc	r31, r19
    1590:	90 81       	ld	r25, Z
    1592:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1594:	89 0f       	add	r24, r25
    1596:	81 50       	subi	r24, 0x01	; 1
    1598:	0e 94 07 03 	call	0x60e	; 0x60e <lcd_command>
    159c:	80 e0       	ldi	r24, 0x00	; 0
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	a8 ec       	ldi	r26, 0xC8	; 200
    15a2:	b2 e4       	ldi	r27, 0x42	; 66
    15a4:	8d 8b       	std	Y+21, r24	; 0x15
    15a6:	9e 8b       	std	Y+22, r25	; 0x16
    15a8:	af 8b       	std	Y+23, r26	; 0x17
    15aa:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    15ac:	6d 89       	ldd	r22, Y+21	; 0x15
    15ae:	7e 89       	ldd	r23, Y+22	; 0x16
    15b0:	8f 89       	ldd	r24, Y+23	; 0x17
    15b2:	98 8d       	ldd	r25, Y+24	; 0x18
    15b4:	2b ea       	ldi	r18, 0xAB	; 171
    15b6:	3a ea       	ldi	r19, 0xAA	; 170
    15b8:	4a ea       	ldi	r20, 0xAA	; 170
    15ba:	50 e4       	ldi	r21, 0x40	; 64
    15bc:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__mulsf3>
    15c0:	dc 01       	movw	r26, r24
    15c2:	cb 01       	movw	r24, r22
    15c4:	89 8b       	std	Y+17, r24	; 0x11
    15c6:	9a 8b       	std	Y+18, r25	; 0x12
    15c8:	ab 8b       	std	Y+19, r26	; 0x13
    15ca:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    15cc:	69 89       	ldd	r22, Y+17	; 0x11
    15ce:	7a 89       	ldd	r23, Y+18	; 0x12
    15d0:	8b 89       	ldd	r24, Y+19	; 0x13
    15d2:	9c 89       	ldd	r25, Y+20	; 0x14
    15d4:	20 e0       	ldi	r18, 0x00	; 0
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	40 e8       	ldi	r20, 0x80	; 128
    15da:	5f e3       	ldi	r21, 0x3F	; 63
    15dc:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__ltsf2>
    15e0:	88 23       	and	r24, r24
    15e2:	1c f4       	brge	.+6      	; 0x15ea <lcd_setCursor+0x90>
		__ticks = 1;
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	88 8b       	std	Y+16, r24	; 0x10
    15e8:	91 c0       	rjmp	.+290    	; 0x170c <lcd_setCursor+0x1b2>
	else if (__tmp > 255)
    15ea:	69 89       	ldd	r22, Y+17	; 0x11
    15ec:	7a 89       	ldd	r23, Y+18	; 0x12
    15ee:	8b 89       	ldd	r24, Y+19	; 0x13
    15f0:	9c 89       	ldd	r25, Y+20	; 0x14
    15f2:	20 e0       	ldi	r18, 0x00	; 0
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	4f e7       	ldi	r20, 0x7F	; 127
    15f8:	53 e4       	ldi	r21, 0x43	; 67
    15fa:	0e 94 89 10 	call	0x2112	; 0x2112 <__gtsf2>
    15fe:	18 16       	cp	r1, r24
    1600:	0c f0       	brlt	.+2      	; 0x1604 <lcd_setCursor+0xaa>
    1602:	7b c0       	rjmp	.+246    	; 0x16fa <lcd_setCursor+0x1a0>
	{
		_delay_ms(__us / 1000.0);
    1604:	6d 89       	ldd	r22, Y+21	; 0x15
    1606:	7e 89       	ldd	r23, Y+22	; 0x16
    1608:	8f 89       	ldd	r24, Y+23	; 0x17
    160a:	98 8d       	ldd	r25, Y+24	; 0x18
    160c:	20 e0       	ldi	r18, 0x00	; 0
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	4a e7       	ldi	r20, 0x7A	; 122
    1612:	54 e4       	ldi	r21, 0x44	; 68
    1614:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <__divsf3>
    1618:	dc 01       	movw	r26, r24
    161a:	cb 01       	movw	r24, r22
    161c:	8c 87       	std	Y+12, r24	; 0x0c
    161e:	9d 87       	std	Y+13, r25	; 0x0d
    1620:	ae 87       	std	Y+14, r26	; 0x0e
    1622:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1624:	6c 85       	ldd	r22, Y+12	; 0x0c
    1626:	7d 85       	ldd	r23, Y+13	; 0x0d
    1628:	8e 85       	ldd	r24, Y+14	; 0x0e
    162a:	9f 85       	ldd	r25, Y+15	; 0x0f
    162c:	20 e0       	ldi	r18, 0x00	; 0
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	4a e7       	ldi	r20, 0x7A	; 122
    1632:	55 e4       	ldi	r21, 0x45	; 69
    1634:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__mulsf3>
    1638:	dc 01       	movw	r26, r24
    163a:	cb 01       	movw	r24, r22
    163c:	88 87       	std	Y+8, r24	; 0x08
    163e:	99 87       	std	Y+9, r25	; 0x09
    1640:	aa 87       	std	Y+10, r26	; 0x0a
    1642:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1644:	68 85       	ldd	r22, Y+8	; 0x08
    1646:	79 85       	ldd	r23, Y+9	; 0x09
    1648:	8a 85       	ldd	r24, Y+10	; 0x0a
    164a:	9b 85       	ldd	r25, Y+11	; 0x0b
    164c:	20 e0       	ldi	r18, 0x00	; 0
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	40 e8       	ldi	r20, 0x80	; 128
    1652:	5f e3       	ldi	r21, 0x3F	; 63
    1654:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__ltsf2>
    1658:	88 23       	and	r24, r24
    165a:	2c f4       	brge	.+10     	; 0x1666 <lcd_setCursor+0x10c>
		__ticks = 1;
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	9f 83       	std	Y+7, r25	; 0x07
    1662:	8e 83       	std	Y+6, r24	; 0x06
    1664:	3f c0       	rjmp	.+126    	; 0x16e4 <lcd_setCursor+0x18a>
	else if (__tmp > 65535)
    1666:	68 85       	ldd	r22, Y+8	; 0x08
    1668:	79 85       	ldd	r23, Y+9	; 0x09
    166a:	8a 85       	ldd	r24, Y+10	; 0x0a
    166c:	9b 85       	ldd	r25, Y+11	; 0x0b
    166e:	20 e0       	ldi	r18, 0x00	; 0
    1670:	3f ef       	ldi	r19, 0xFF	; 255
    1672:	4f e7       	ldi	r20, 0x7F	; 127
    1674:	57 e4       	ldi	r21, 0x47	; 71
    1676:	0e 94 89 10 	call	0x2112	; 0x2112 <__gtsf2>
    167a:	18 16       	cp	r1, r24
    167c:	4c f5       	brge	.+82     	; 0x16d0 <lcd_setCursor+0x176>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    167e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1680:	7d 85       	ldd	r23, Y+13	; 0x0d
    1682:	8e 85       	ldd	r24, Y+14	; 0x0e
    1684:	9f 85       	ldd	r25, Y+15	; 0x0f
    1686:	20 e0       	ldi	r18, 0x00	; 0
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	40 e2       	ldi	r20, 0x20	; 32
    168c:	51 e4       	ldi	r21, 0x41	; 65
    168e:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__mulsf3>
    1692:	dc 01       	movw	r26, r24
    1694:	cb 01       	movw	r24, r22
    1696:	bc 01       	movw	r22, r24
    1698:	cd 01       	movw	r24, r26
    169a:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__fixunssfsi>
    169e:	dc 01       	movw	r26, r24
    16a0:	cb 01       	movw	r24, r22
    16a2:	9f 83       	std	Y+7, r25	; 0x07
    16a4:	8e 83       	std	Y+6, r24	; 0x06
    16a6:	0f c0       	rjmp	.+30     	; 0x16c6 <lcd_setCursor+0x16c>
    16a8:	80 e9       	ldi	r24, 0x90	; 144
    16aa:	91 e0       	ldi	r25, 0x01	; 1
    16ac:	9d 83       	std	Y+5, r25	; 0x05
    16ae:	8c 83       	std	Y+4, r24	; 0x04
    16b0:	8c 81       	ldd	r24, Y+4	; 0x04
    16b2:	9d 81       	ldd	r25, Y+5	; 0x05
    16b4:	01 97       	sbiw	r24, 0x01	; 1
    16b6:	f1 f7       	brne	.-4      	; 0x16b4 <lcd_setCursor+0x15a>
    16b8:	9d 83       	std	Y+5, r25	; 0x05
    16ba:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16bc:	8e 81       	ldd	r24, Y+6	; 0x06
    16be:	9f 81       	ldd	r25, Y+7	; 0x07
    16c0:	01 97       	sbiw	r24, 0x01	; 1
    16c2:	9f 83       	std	Y+7, r25	; 0x07
    16c4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16c6:	8e 81       	ldd	r24, Y+6	; 0x06
    16c8:	9f 81       	ldd	r25, Y+7	; 0x07
    16ca:	00 97       	sbiw	r24, 0x00	; 0
    16cc:	69 f7       	brne	.-38     	; 0x16a8 <lcd_setCursor+0x14e>
    16ce:	24 c0       	rjmp	.+72     	; 0x1718 <lcd_setCursor+0x1be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16d0:	68 85       	ldd	r22, Y+8	; 0x08
    16d2:	79 85       	ldd	r23, Y+9	; 0x09
    16d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    16d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    16d8:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__fixunssfsi>
    16dc:	dc 01       	movw	r26, r24
    16de:	cb 01       	movw	r24, r22
    16e0:	9f 83       	std	Y+7, r25	; 0x07
    16e2:	8e 83       	std	Y+6, r24	; 0x06
    16e4:	8e 81       	ldd	r24, Y+6	; 0x06
    16e6:	9f 81       	ldd	r25, Y+7	; 0x07
    16e8:	9b 83       	std	Y+3, r25	; 0x03
    16ea:	8a 83       	std	Y+2, r24	; 0x02
    16ec:	8a 81       	ldd	r24, Y+2	; 0x02
    16ee:	9b 81       	ldd	r25, Y+3	; 0x03
    16f0:	01 97       	sbiw	r24, 0x01	; 1
    16f2:	f1 f7       	brne	.-4      	; 0x16f0 <lcd_setCursor+0x196>
    16f4:	9b 83       	std	Y+3, r25	; 0x03
    16f6:	8a 83       	std	Y+2, r24	; 0x02
    16f8:	0f c0       	rjmp	.+30     	; 0x1718 <lcd_setCursor+0x1be>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    16fa:	69 89       	ldd	r22, Y+17	; 0x11
    16fc:	7a 89       	ldd	r23, Y+18	; 0x12
    16fe:	8b 89       	ldd	r24, Y+19	; 0x13
    1700:	9c 89       	ldd	r25, Y+20	; 0x14
    1702:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__fixunssfsi>
    1706:	dc 01       	movw	r26, r24
    1708:	cb 01       	movw	r24, r22
    170a:	88 8b       	std	Y+16, r24	; 0x10
    170c:	88 89       	ldd	r24, Y+16	; 0x10
    170e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1710:	89 81       	ldd	r24, Y+1	; 0x01
    1712:	8a 95       	dec	r24
    1714:	f1 f7       	brne	.-4      	; 0x1712 <lcd_setCursor+0x1b8>
    1716:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
}
    1718:	6c 96       	adiw	r28, 0x1c	; 28
    171a:	0f b6       	in	r0, 0x3f	; 63
    171c:	f8 94       	cli
    171e:	de bf       	out	0x3e, r29	; 62
    1720:	0f be       	out	0x3f, r0	; 63
    1722:	cd bf       	out	0x3d, r28	; 61
    1724:	cf 91       	pop	r28
    1726:	df 91       	pop	r29
    1728:	08 95       	ret

0000172a <main>:

int main()
{
    172a:	df 93       	push	r29
    172c:	cf 93       	push	r28
    172e:	cd b7       	in	r28, 0x3d	; 61
    1730:	de b7       	in	r29, 0x3e	; 62
    1732:	a2 97       	sbiw	r28, 0x22	; 34
    1734:	0f b6       	in	r0, 0x3f	; 63
    1736:	f8 94       	cli
    1738:	de bf       	out	0x3e, r29	; 62
    173a:	0f be       	out	0x3f, r0	; 63
    173c:	cd bf       	out	0x3d, r28	; 61
	initialize();           // we're initializing the LCD
    173e:	0e 94 fd 01 	call	0x3fa	; 0x3fa <initialize>
    1742:	80 e0       	ldi	r24, 0x00	; 0
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	a8 ec       	ldi	r26, 0xC8	; 200
    1748:	b2 e4       	ldi	r27, 0x42	; 66
    174a:	89 8f       	std	Y+25, r24	; 0x19
    174c:	9a 8f       	std	Y+26, r25	; 0x1a
    174e:	ab 8f       	std	Y+27, r26	; 0x1b
    1750:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1752:	69 8d       	ldd	r22, Y+25	; 0x19
    1754:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1756:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1758:	9c 8d       	ldd	r25, Y+28	; 0x1c
    175a:	20 e0       	ldi	r18, 0x00	; 0
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	4a e7       	ldi	r20, 0x7A	; 122
    1760:	55 e4       	ldi	r21, 0x45	; 69
    1762:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__mulsf3>
    1766:	dc 01       	movw	r26, r24
    1768:	cb 01       	movw	r24, r22
    176a:	8d 8b       	std	Y+21, r24	; 0x15
    176c:	9e 8b       	std	Y+22, r25	; 0x16
    176e:	af 8b       	std	Y+23, r26	; 0x17
    1770:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1772:	6d 89       	ldd	r22, Y+21	; 0x15
    1774:	7e 89       	ldd	r23, Y+22	; 0x16
    1776:	8f 89       	ldd	r24, Y+23	; 0x17
    1778:	98 8d       	ldd	r25, Y+24	; 0x18
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	40 e8       	ldi	r20, 0x80	; 128
    1780:	5f e3       	ldi	r21, 0x3F	; 63
    1782:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__ltsf2>
    1786:	88 23       	and	r24, r24
    1788:	2c f4       	brge	.+10     	; 0x1794 <main+0x6a>
		__ticks = 1;
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	9c 8b       	std	Y+20, r25	; 0x14
    1790:	8b 8b       	std	Y+19, r24	; 0x13
    1792:	3f c0       	rjmp	.+126    	; 0x1812 <main+0xe8>
	else if (__tmp > 65535)
    1794:	6d 89       	ldd	r22, Y+21	; 0x15
    1796:	7e 89       	ldd	r23, Y+22	; 0x16
    1798:	8f 89       	ldd	r24, Y+23	; 0x17
    179a:	98 8d       	ldd	r25, Y+24	; 0x18
    179c:	20 e0       	ldi	r18, 0x00	; 0
    179e:	3f ef       	ldi	r19, 0xFF	; 255
    17a0:	4f e7       	ldi	r20, 0x7F	; 127
    17a2:	57 e4       	ldi	r21, 0x47	; 71
    17a4:	0e 94 89 10 	call	0x2112	; 0x2112 <__gtsf2>
    17a8:	18 16       	cp	r1, r24
    17aa:	4c f5       	brge	.+82     	; 0x17fe <main+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ac:	69 8d       	ldd	r22, Y+25	; 0x19
    17ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17b4:	20 e0       	ldi	r18, 0x00	; 0
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	40 e2       	ldi	r20, 0x20	; 32
    17ba:	51 e4       	ldi	r21, 0x41	; 65
    17bc:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__mulsf3>
    17c0:	dc 01       	movw	r26, r24
    17c2:	cb 01       	movw	r24, r22
    17c4:	bc 01       	movw	r22, r24
    17c6:	cd 01       	movw	r24, r26
    17c8:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__fixunssfsi>
    17cc:	dc 01       	movw	r26, r24
    17ce:	cb 01       	movw	r24, r22
    17d0:	9c 8b       	std	Y+20, r25	; 0x14
    17d2:	8b 8b       	std	Y+19, r24	; 0x13
    17d4:	0f c0       	rjmp	.+30     	; 0x17f4 <main+0xca>
    17d6:	80 e9       	ldi	r24, 0x90	; 144
    17d8:	91 e0       	ldi	r25, 0x01	; 1
    17da:	9a 8b       	std	Y+18, r25	; 0x12
    17dc:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17de:	89 89       	ldd	r24, Y+17	; 0x11
    17e0:	9a 89       	ldd	r25, Y+18	; 0x12
    17e2:	01 97       	sbiw	r24, 0x01	; 1
    17e4:	f1 f7       	brne	.-4      	; 0x17e2 <main+0xb8>
    17e6:	9a 8b       	std	Y+18, r25	; 0x12
    17e8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ea:	8b 89       	ldd	r24, Y+19	; 0x13
    17ec:	9c 89       	ldd	r25, Y+20	; 0x14
    17ee:	01 97       	sbiw	r24, 0x01	; 1
    17f0:	9c 8b       	std	Y+20, r25	; 0x14
    17f2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17f4:	8b 89       	ldd	r24, Y+19	; 0x13
    17f6:	9c 89       	ldd	r25, Y+20	; 0x14
    17f8:	00 97       	sbiw	r24, 0x00	; 0
    17fa:	69 f7       	brne	.-38     	; 0x17d6 <main+0xac>
    17fc:	14 c0       	rjmp	.+40     	; 0x1826 <main+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17fe:	6d 89       	ldd	r22, Y+21	; 0x15
    1800:	7e 89       	ldd	r23, Y+22	; 0x16
    1802:	8f 89       	ldd	r24, Y+23	; 0x17
    1804:	98 8d       	ldd	r25, Y+24	; 0x18
    1806:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__fixunssfsi>
    180a:	dc 01       	movw	r26, r24
    180c:	cb 01       	movw	r24, r22
    180e:	9c 8b       	std	Y+20, r25	; 0x14
    1810:	8b 8b       	std	Y+19, r24	; 0x13
    1812:	8b 89       	ldd	r24, Y+19	; 0x13
    1814:	9c 89       	ldd	r25, Y+20	; 0x14
    1816:	98 8b       	std	Y+16, r25	; 0x10
    1818:	8f 87       	std	Y+15, r24	; 0x0f
    181a:	8f 85       	ldd	r24, Y+15	; 0x0f
    181c:	98 89       	ldd	r25, Y+16	; 0x10
    181e:	01 97       	sbiw	r24, 0x01	; 1
    1820:	f1 f7       	brne	.-4      	; 0x181e <main+0xf4>
    1822:	98 8b       	std	Y+16, r25	; 0x10
    1824:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);	//Let the LCD Module start



		//Set io port direction of sensor
		HCSR04Init();
    1826:	0e 94 53 00 	call	0xa6	; 0xa6 <HCSR04Init>


		DDRC |= (1 << led1) | (1 << led2) | ( 1 << led3) | ( 1 << led4);    // we're setting all the leds as output
    182a:	a7 e2       	ldi	r26, 0x27	; 39
    182c:	b0 e0       	ldi	r27, 0x00	; 0
    182e:	e7 e2       	ldi	r30, 0x27	; 39
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	80 81       	ld	r24, Z
    1834:	8c 63       	ori	r24, 0x3C	; 60
    1836:	8c 93       	st	X, r24
		DDRD |= (1 << led5);                                                 // we need to set the fifth led as output separately because it is on another port
    1838:	aa e2       	ldi	r26, 0x2A	; 42
    183a:	b0 e0       	ldi	r27, 0x00	; 0
    183c:	ea e2       	ldi	r30, 0x2A	; 42
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	80 81       	ld	r24, Z
    1842:	84 60       	ori	r24, 0x04	; 4
    1844:	8c 93       	st	X, r24
		//PORTC |= 1 << led1;
		while(1)
		{

			//Send a trigger pulse
			HCSR04Trigger();               // calling the ultrasonic sound wave generator function
    1846:	0e 94 61 00 	call	0xc2	; 0xc2 <HCSR04Trigger>

			//Measure the width of pulse
			r=GetPulseWidth();             // getting the duration of the ultrasound took to echo back after hitting the object
    184a:	0e 94 40 01 	call	0x280	; 0x280 <GetPulseWidth>
    184e:	9e 8f       	std	Y+30, r25	; 0x1e
    1850:	8d 8f       	std	Y+29, r24	; 0x1d

			//Handle Errors
			if(r==US_ERROR)                // if microcontroller doesn't get any pulse then it will set the US_ERROR variable to -1
    1852:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1854:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1856:	2f ef       	ldi	r18, 0xFF	; 255
    1858:	8f 3f       	cpi	r24, 0xFF	; 255
    185a:	92 07       	cpc	r25, r18
    185c:	49 f4       	brne	.+18     	; 0x1870 <main+0x146>
			// the following code will check if there is error then it will be displayed on the LCD screen
			{
				lcd_setCursor(1, 1);      //lcd_setCursor(column, row)
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	61 e0       	ldi	r22, 0x01	; 1
    1862:	0e 94 ad 0a 	call	0x155a	; 0x155a <lcd_setCursor>
				lcd_print("Error!");
    1866:	80 e0       	ldi	r24, 0x00	; 0
    1868:	91 e0       	ldi	r25, 0x01	; 1
    186a:	0e 94 03 07 	call	0xe06	; 0xe06 <lcd_print>
    186e:	eb cf       	rjmp	.-42     	; 0x1846 <main+0x11c>
			}
			else
			{

				distance=(r*0.034/2.0);	// This will give the distance in centimeters
    1870:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1872:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1874:	cc 01       	movw	r24, r24
    1876:	a0 e0       	ldi	r26, 0x00	; 0
    1878:	b0 e0       	ldi	r27, 0x00	; 0
    187a:	bc 01       	movw	r22, r24
    187c:	cd 01       	movw	r24, r26
    187e:	0e 94 6d 11 	call	0x22da	; 0x22da <__floatunsisf>
    1882:	dc 01       	movw	r26, r24
    1884:	cb 01       	movw	r24, r22
    1886:	bc 01       	movw	r22, r24
    1888:	cd 01       	movw	r24, r26
    188a:	26 e9       	ldi	r18, 0x96	; 150
    188c:	33 e4       	ldi	r19, 0x43	; 67
    188e:	4b e0       	ldi	r20, 0x0B	; 11
    1890:	5d e3       	ldi	r21, 0x3D	; 61
    1892:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__mulsf3>
    1896:	dc 01       	movw	r26, r24
    1898:	cb 01       	movw	r24, r22
    189a:	bc 01       	movw	r22, r24
    189c:	cd 01       	movw	r24, r26
    189e:	20 e0       	ldi	r18, 0x00	; 0
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	40 e0       	ldi	r20, 0x00	; 0
    18a4:	50 e4       	ldi	r21, 0x40	; 64
    18a6:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <__divsf3>
    18aa:	dc 01       	movw	r26, r24
    18ac:	cb 01       	movw	r24, r22
    18ae:	bc 01       	movw	r22, r24
    18b0:	cd 01       	movw	r24, r26
    18b2:	0e 94 19 11 	call	0x2232	; 0x2232 <__fixsfsi>
    18b6:	dc 01       	movw	r26, r24
    18b8:	cb 01       	movw	r24, r22
    18ba:	90 93 23 02 	sts	0x0223, r25
    18be:	80 93 22 02 	sts	0x0222, r24


				if (distance != previous_distance)    // the LCD screen only need to be cleared if the distance is changed otherwise it is not required
    18c2:	20 91 22 02 	lds	r18, 0x0222
    18c6:	30 91 23 02 	lds	r19, 0x0223
    18ca:	80 91 20 02 	lds	r24, 0x0220
    18ce:	90 91 21 02 	lds	r25, 0x0221
    18d2:	28 17       	cp	r18, r24
    18d4:	39 07       	cpc	r19, r25
    18d6:	11 f0       	breq	.+4      	; 0x18dc <main+0x1b2>
				{
					lcd_clear();
    18d8:	0e 94 78 06 	call	0xcf0	; 0xcf0 <lcd_clear>
				}

				lcd_setCursor(1, 1);      // set the row and column to display the data
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	61 e0       	ldi	r22, 0x01	; 1
    18e0:	0e 94 ad 0a 	call	0x155a	; 0x155a <lcd_setCursor>
				lcd_print("Distance = ");
    18e4:	87 e0       	ldi	r24, 0x07	; 7
    18e6:	91 e0       	ldi	r25, 0x01	; 1
    18e8:	0e 94 03 07 	call	0xe06	; 0xe06 <lcd_print>
				lcd_setCursor(12, 1);      //lcd_setCursor(column, row)
    18ec:	8c e0       	ldi	r24, 0x0C	; 12
    18ee:	61 e0       	ldi	r22, 0x01	; 1
    18f0:	0e 94 ad 0a 	call	0x155a	; 0x155a <lcd_setCursor>
				itoa(distance, numberString, 10);    // distance is an integer number, we can not display integer directly on the LCD. this line converts integer into array of character
    18f4:	80 91 22 02 	lds	r24, 0x0222
    18f8:	90 91 23 02 	lds	r25, 0x0223
    18fc:	9e 01       	movw	r18, r28
    18fe:	21 5e       	subi	r18, 0xE1	; 225
    1900:	3f 4f       	sbci	r19, 0xFF	; 255
    1902:	b9 01       	movw	r22, r18
    1904:	4a e0       	ldi	r20, 0x0A	; 10
    1906:	50 e0       	ldi	r21, 0x00	; 0
    1908:	0e 94 12 14 	call	0x2824	; 0x2824 <itoa>
				lcd_print(numberString);
    190c:	ce 01       	movw	r24, r28
    190e:	4f 96       	adiw	r24, 0x1f	; 31
    1910:	0e 94 03 07 	call	0xe06	; 0xe06 <lcd_print>
				lcd_setCursor(14, 1);      //set the row to 1 and and column to 14 to display the data
    1914:	8e e0       	ldi	r24, 0x0E	; 14
    1916:	61 e0       	ldi	r22, 0x01	; 1
    1918:	0e 94 ad 0a 	call	0x155a	; 0x155a <lcd_setCursor>
				lcd_print(" cm");
    191c:	83 e1       	ldi	r24, 0x13	; 19
    191e:	91 e0       	ldi	r25, 0x01	; 1
    1920:	0e 94 03 07 	call	0xe06	; 0xe06 <lcd_print>




				previous_distance = distance;
    1924:	80 91 22 02 	lds	r24, 0x0222
    1928:	90 91 23 02 	lds	r25, 0x0223
    192c:	90 93 21 02 	sts	0x0221, r25
    1930:	80 93 20 02 	sts	0x0220, r24
    1934:	80 e0       	ldi	r24, 0x00	; 0
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	a0 ef       	ldi	r26, 0xF0	; 240
    193a:	b1 e4       	ldi	r27, 0x41	; 65
    193c:	8b 87       	std	Y+11, r24	; 0x0b
    193e:	9c 87       	std	Y+12, r25	; 0x0c
    1940:	ad 87       	std	Y+13, r26	; 0x0d
    1942:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1944:	6b 85       	ldd	r22, Y+11	; 0x0b
    1946:	7c 85       	ldd	r23, Y+12	; 0x0c
    1948:	8d 85       	ldd	r24, Y+13	; 0x0d
    194a:	9e 85       	ldd	r25, Y+14	; 0x0e
    194c:	20 e0       	ldi	r18, 0x00	; 0
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	4a e7       	ldi	r20, 0x7A	; 122
    1952:	55 e4       	ldi	r21, 0x45	; 69
    1954:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__mulsf3>
    1958:	dc 01       	movw	r26, r24
    195a:	cb 01       	movw	r24, r22
    195c:	8f 83       	std	Y+7, r24	; 0x07
    195e:	98 87       	std	Y+8, r25	; 0x08
    1960:	a9 87       	std	Y+9, r26	; 0x09
    1962:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1964:	6f 81       	ldd	r22, Y+7	; 0x07
    1966:	78 85       	ldd	r23, Y+8	; 0x08
    1968:	89 85       	ldd	r24, Y+9	; 0x09
    196a:	9a 85       	ldd	r25, Y+10	; 0x0a
    196c:	20 e0       	ldi	r18, 0x00	; 0
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	40 e8       	ldi	r20, 0x80	; 128
    1972:	5f e3       	ldi	r21, 0x3F	; 63
    1974:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__ltsf2>
    1978:	88 23       	and	r24, r24
    197a:	2c f4       	brge	.+10     	; 0x1986 <main+0x25c>
		__ticks = 1;
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	9e 83       	std	Y+6, r25	; 0x06
    1982:	8d 83       	std	Y+5, r24	; 0x05
    1984:	3f c0       	rjmp	.+126    	; 0x1a04 <main+0x2da>
	else if (__tmp > 65535)
    1986:	6f 81       	ldd	r22, Y+7	; 0x07
    1988:	78 85       	ldd	r23, Y+8	; 0x08
    198a:	89 85       	ldd	r24, Y+9	; 0x09
    198c:	9a 85       	ldd	r25, Y+10	; 0x0a
    198e:	20 e0       	ldi	r18, 0x00	; 0
    1990:	3f ef       	ldi	r19, 0xFF	; 255
    1992:	4f e7       	ldi	r20, 0x7F	; 127
    1994:	57 e4       	ldi	r21, 0x47	; 71
    1996:	0e 94 89 10 	call	0x2112	; 0x2112 <__gtsf2>
    199a:	18 16       	cp	r1, r24
    199c:	4c f5       	brge	.+82     	; 0x19f0 <main+0x2c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    199e:	6b 85       	ldd	r22, Y+11	; 0x0b
    19a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    19a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    19a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    19a6:	20 e0       	ldi	r18, 0x00	; 0
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	40 e2       	ldi	r20, 0x20	; 32
    19ac:	51 e4       	ldi	r21, 0x41	; 65
    19ae:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__mulsf3>
    19b2:	dc 01       	movw	r26, r24
    19b4:	cb 01       	movw	r24, r22
    19b6:	bc 01       	movw	r22, r24
    19b8:	cd 01       	movw	r24, r26
    19ba:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__fixunssfsi>
    19be:	dc 01       	movw	r26, r24
    19c0:	cb 01       	movw	r24, r22
    19c2:	9e 83       	std	Y+6, r25	; 0x06
    19c4:	8d 83       	std	Y+5, r24	; 0x05
    19c6:	0f c0       	rjmp	.+30     	; 0x19e6 <main+0x2bc>
    19c8:	80 e9       	ldi	r24, 0x90	; 144
    19ca:	91 e0       	ldi	r25, 0x01	; 1
    19cc:	9c 83       	std	Y+4, r25	; 0x04
    19ce:	8b 83       	std	Y+3, r24	; 0x03
    19d0:	8b 81       	ldd	r24, Y+3	; 0x03
    19d2:	9c 81       	ldd	r25, Y+4	; 0x04
    19d4:	01 97       	sbiw	r24, 0x01	; 1
    19d6:	f1 f7       	brne	.-4      	; 0x19d4 <main+0x2aa>
    19d8:	9c 83       	std	Y+4, r25	; 0x04
    19da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19dc:	8d 81       	ldd	r24, Y+5	; 0x05
    19de:	9e 81       	ldd	r25, Y+6	; 0x06
    19e0:	01 97       	sbiw	r24, 0x01	; 1
    19e2:	9e 83       	std	Y+6, r25	; 0x06
    19e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19e6:	8d 81       	ldd	r24, Y+5	; 0x05
    19e8:	9e 81       	ldd	r25, Y+6	; 0x06
    19ea:	00 97       	sbiw	r24, 0x00	; 0
    19ec:	69 f7       	brne	.-38     	; 0x19c8 <main+0x29e>
    19ee:	2b cf       	rjmp	.-426    	; 0x1846 <main+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19f0:	6f 81       	ldd	r22, Y+7	; 0x07
    19f2:	78 85       	ldd	r23, Y+8	; 0x08
    19f4:	89 85       	ldd	r24, Y+9	; 0x09
    19f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    19f8:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__fixunssfsi>
    19fc:	dc 01       	movw	r26, r24
    19fe:	cb 01       	movw	r24, r22
    1a00:	9e 83       	std	Y+6, r25	; 0x06
    1a02:	8d 83       	std	Y+5, r24	; 0x05
    1a04:	8d 81       	ldd	r24, Y+5	; 0x05
    1a06:	9e 81       	ldd	r25, Y+6	; 0x06
    1a08:	9a 83       	std	Y+2, r25	; 0x02
    1a0a:	89 83       	std	Y+1, r24	; 0x01
    1a0c:	89 81       	ldd	r24, Y+1	; 0x01
    1a0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a10:	01 97       	sbiw	r24, 0x01	; 1
    1a12:	f1 f7       	brne	.-4      	; 0x1a10 <main+0x2e6>
    1a14:	9a 83       	std	Y+2, r25	; 0x02
    1a16:	89 83       	std	Y+1, r24	; 0x01
    1a18:	16 cf       	rjmp	.-468    	; 0x1846 <main+0x11c>

00001a1a <__fixunssfsi>:
    1a1a:	ef 92       	push	r14
    1a1c:	ff 92       	push	r15
    1a1e:	0f 93       	push	r16
    1a20:	1f 93       	push	r17
    1a22:	7b 01       	movw	r14, r22
    1a24:	8c 01       	movw	r16, r24
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	40 e0       	ldi	r20, 0x00	; 0
    1a2c:	5f e4       	ldi	r21, 0x4F	; 79
    1a2e:	0e 94 b9 10 	call	0x2172	; 0x2172 <__gesf2>
    1a32:	88 23       	and	r24, r24
    1a34:	8c f0       	brlt	.+34     	; 0x1a58 <__fixunssfsi+0x3e>
    1a36:	c8 01       	movw	r24, r16
    1a38:	b7 01       	movw	r22, r14
    1a3a:	20 e0       	ldi	r18, 0x00	; 0
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	40 e0       	ldi	r20, 0x00	; 0
    1a40:	5f e4       	ldi	r21, 0x4F	; 79
    1a42:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <__subsf3>
    1a46:	0e 94 19 11 	call	0x2232	; 0x2232 <__fixsfsi>
    1a4a:	9b 01       	movw	r18, r22
    1a4c:	ac 01       	movw	r20, r24
    1a4e:	20 50       	subi	r18, 0x00	; 0
    1a50:	30 40       	sbci	r19, 0x00	; 0
    1a52:	40 40       	sbci	r20, 0x00	; 0
    1a54:	50 48       	sbci	r21, 0x80	; 128
    1a56:	06 c0       	rjmp	.+12     	; 0x1a64 <__fixunssfsi+0x4a>
    1a58:	c8 01       	movw	r24, r16
    1a5a:	b7 01       	movw	r22, r14
    1a5c:	0e 94 19 11 	call	0x2232	; 0x2232 <__fixsfsi>
    1a60:	9b 01       	movw	r18, r22
    1a62:	ac 01       	movw	r20, r24
    1a64:	b9 01       	movw	r22, r18
    1a66:	ca 01       	movw	r24, r20
    1a68:	1f 91       	pop	r17
    1a6a:	0f 91       	pop	r16
    1a6c:	ff 90       	pop	r15
    1a6e:	ef 90       	pop	r14
    1a70:	08 95       	ret

00001a72 <_fpadd_parts>:
    1a72:	a0 e0       	ldi	r26, 0x00	; 0
    1a74:	b0 e0       	ldi	r27, 0x00	; 0
    1a76:	ef e3       	ldi	r30, 0x3F	; 63
    1a78:	fd e0       	ldi	r31, 0x0D	; 13
    1a7a:	0c 94 db 13 	jmp	0x27b6	; 0x27b6 <__prologue_saves__>
    1a7e:	dc 01       	movw	r26, r24
    1a80:	2b 01       	movw	r4, r22
    1a82:	fa 01       	movw	r30, r20
    1a84:	9c 91       	ld	r25, X
    1a86:	92 30       	cpi	r25, 0x02	; 2
    1a88:	08 f4       	brcc	.+2      	; 0x1a8c <_fpadd_parts+0x1a>
    1a8a:	39 c1       	rjmp	.+626    	; 0x1cfe <_fpadd_parts+0x28c>
    1a8c:	eb 01       	movw	r28, r22
    1a8e:	88 81       	ld	r24, Y
    1a90:	82 30       	cpi	r24, 0x02	; 2
    1a92:	08 f4       	brcc	.+2      	; 0x1a96 <_fpadd_parts+0x24>
    1a94:	33 c1       	rjmp	.+614    	; 0x1cfc <_fpadd_parts+0x28a>
    1a96:	94 30       	cpi	r25, 0x04	; 4
    1a98:	69 f4       	brne	.+26     	; 0x1ab4 <_fpadd_parts+0x42>
    1a9a:	84 30       	cpi	r24, 0x04	; 4
    1a9c:	09 f0       	breq	.+2      	; 0x1aa0 <_fpadd_parts+0x2e>
    1a9e:	2f c1       	rjmp	.+606    	; 0x1cfe <_fpadd_parts+0x28c>
    1aa0:	11 96       	adiw	r26, 0x01	; 1
    1aa2:	9c 91       	ld	r25, X
    1aa4:	11 97       	sbiw	r26, 0x01	; 1
    1aa6:	89 81       	ldd	r24, Y+1	; 0x01
    1aa8:	98 17       	cp	r25, r24
    1aaa:	09 f4       	brne	.+2      	; 0x1aae <_fpadd_parts+0x3c>
    1aac:	28 c1       	rjmp	.+592    	; 0x1cfe <_fpadd_parts+0x28c>
    1aae:	a7 e1       	ldi	r26, 0x17	; 23
    1ab0:	b1 e0       	ldi	r27, 0x01	; 1
    1ab2:	25 c1       	rjmp	.+586    	; 0x1cfe <_fpadd_parts+0x28c>
    1ab4:	84 30       	cpi	r24, 0x04	; 4
    1ab6:	09 f4       	brne	.+2      	; 0x1aba <_fpadd_parts+0x48>
    1ab8:	21 c1       	rjmp	.+578    	; 0x1cfc <_fpadd_parts+0x28a>
    1aba:	82 30       	cpi	r24, 0x02	; 2
    1abc:	a9 f4       	brne	.+42     	; 0x1ae8 <_fpadd_parts+0x76>
    1abe:	92 30       	cpi	r25, 0x02	; 2
    1ac0:	09 f0       	breq	.+2      	; 0x1ac4 <_fpadd_parts+0x52>
    1ac2:	1d c1       	rjmp	.+570    	; 0x1cfe <_fpadd_parts+0x28c>
    1ac4:	9a 01       	movw	r18, r20
    1ac6:	ad 01       	movw	r20, r26
    1ac8:	88 e0       	ldi	r24, 0x08	; 8
    1aca:	ea 01       	movw	r28, r20
    1acc:	09 90       	ld	r0, Y+
    1ace:	ae 01       	movw	r20, r28
    1ad0:	e9 01       	movw	r28, r18
    1ad2:	09 92       	st	Y+, r0
    1ad4:	9e 01       	movw	r18, r28
    1ad6:	81 50       	subi	r24, 0x01	; 1
    1ad8:	c1 f7       	brne	.-16     	; 0x1aca <_fpadd_parts+0x58>
    1ada:	e2 01       	movw	r28, r4
    1adc:	89 81       	ldd	r24, Y+1	; 0x01
    1ade:	11 96       	adiw	r26, 0x01	; 1
    1ae0:	9c 91       	ld	r25, X
    1ae2:	89 23       	and	r24, r25
    1ae4:	81 83       	std	Z+1, r24	; 0x01
    1ae6:	08 c1       	rjmp	.+528    	; 0x1cf8 <_fpadd_parts+0x286>
    1ae8:	92 30       	cpi	r25, 0x02	; 2
    1aea:	09 f4       	brne	.+2      	; 0x1aee <_fpadd_parts+0x7c>
    1aec:	07 c1       	rjmp	.+526    	; 0x1cfc <_fpadd_parts+0x28a>
    1aee:	12 96       	adiw	r26, 0x02	; 2
    1af0:	2d 90       	ld	r2, X+
    1af2:	3c 90       	ld	r3, X
    1af4:	13 97       	sbiw	r26, 0x03	; 3
    1af6:	eb 01       	movw	r28, r22
    1af8:	8a 81       	ldd	r24, Y+2	; 0x02
    1afa:	9b 81       	ldd	r25, Y+3	; 0x03
    1afc:	14 96       	adiw	r26, 0x04	; 4
    1afe:	ad 90       	ld	r10, X+
    1b00:	bd 90       	ld	r11, X+
    1b02:	cd 90       	ld	r12, X+
    1b04:	dc 90       	ld	r13, X
    1b06:	17 97       	sbiw	r26, 0x07	; 7
    1b08:	ec 80       	ldd	r14, Y+4	; 0x04
    1b0a:	fd 80       	ldd	r15, Y+5	; 0x05
    1b0c:	0e 81       	ldd	r16, Y+6	; 0x06
    1b0e:	1f 81       	ldd	r17, Y+7	; 0x07
    1b10:	91 01       	movw	r18, r2
    1b12:	28 1b       	sub	r18, r24
    1b14:	39 0b       	sbc	r19, r25
    1b16:	b9 01       	movw	r22, r18
    1b18:	37 ff       	sbrs	r19, 7
    1b1a:	04 c0       	rjmp	.+8      	; 0x1b24 <_fpadd_parts+0xb2>
    1b1c:	66 27       	eor	r22, r22
    1b1e:	77 27       	eor	r23, r23
    1b20:	62 1b       	sub	r22, r18
    1b22:	73 0b       	sbc	r23, r19
    1b24:	60 32       	cpi	r22, 0x20	; 32
    1b26:	71 05       	cpc	r23, r1
    1b28:	0c f0       	brlt	.+2      	; 0x1b2c <_fpadd_parts+0xba>
    1b2a:	61 c0       	rjmp	.+194    	; 0x1bee <_fpadd_parts+0x17c>
    1b2c:	12 16       	cp	r1, r18
    1b2e:	13 06       	cpc	r1, r19
    1b30:	6c f5       	brge	.+90     	; 0x1b8c <_fpadd_parts+0x11a>
    1b32:	37 01       	movw	r6, r14
    1b34:	48 01       	movw	r8, r16
    1b36:	06 2e       	mov	r0, r22
    1b38:	04 c0       	rjmp	.+8      	; 0x1b42 <_fpadd_parts+0xd0>
    1b3a:	96 94       	lsr	r9
    1b3c:	87 94       	ror	r8
    1b3e:	77 94       	ror	r7
    1b40:	67 94       	ror	r6
    1b42:	0a 94       	dec	r0
    1b44:	d2 f7       	brpl	.-12     	; 0x1b3a <_fpadd_parts+0xc8>
    1b46:	21 e0       	ldi	r18, 0x01	; 1
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	40 e0       	ldi	r20, 0x00	; 0
    1b4c:	50 e0       	ldi	r21, 0x00	; 0
    1b4e:	04 c0       	rjmp	.+8      	; 0x1b58 <_fpadd_parts+0xe6>
    1b50:	22 0f       	add	r18, r18
    1b52:	33 1f       	adc	r19, r19
    1b54:	44 1f       	adc	r20, r20
    1b56:	55 1f       	adc	r21, r21
    1b58:	6a 95       	dec	r22
    1b5a:	d2 f7       	brpl	.-12     	; 0x1b50 <_fpadd_parts+0xde>
    1b5c:	21 50       	subi	r18, 0x01	; 1
    1b5e:	30 40       	sbci	r19, 0x00	; 0
    1b60:	40 40       	sbci	r20, 0x00	; 0
    1b62:	50 40       	sbci	r21, 0x00	; 0
    1b64:	2e 21       	and	r18, r14
    1b66:	3f 21       	and	r19, r15
    1b68:	40 23       	and	r20, r16
    1b6a:	51 23       	and	r21, r17
    1b6c:	21 15       	cp	r18, r1
    1b6e:	31 05       	cpc	r19, r1
    1b70:	41 05       	cpc	r20, r1
    1b72:	51 05       	cpc	r21, r1
    1b74:	21 f0       	breq	.+8      	; 0x1b7e <_fpadd_parts+0x10c>
    1b76:	21 e0       	ldi	r18, 0x01	; 1
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	40 e0       	ldi	r20, 0x00	; 0
    1b7c:	50 e0       	ldi	r21, 0x00	; 0
    1b7e:	79 01       	movw	r14, r18
    1b80:	8a 01       	movw	r16, r20
    1b82:	e6 28       	or	r14, r6
    1b84:	f7 28       	or	r15, r7
    1b86:	08 29       	or	r16, r8
    1b88:	19 29       	or	r17, r9
    1b8a:	3c c0       	rjmp	.+120    	; 0x1c04 <_fpadd_parts+0x192>
    1b8c:	23 2b       	or	r18, r19
    1b8e:	d1 f1       	breq	.+116    	; 0x1c04 <_fpadd_parts+0x192>
    1b90:	26 0e       	add	r2, r22
    1b92:	37 1e       	adc	r3, r23
    1b94:	35 01       	movw	r6, r10
    1b96:	46 01       	movw	r8, r12
    1b98:	06 2e       	mov	r0, r22
    1b9a:	04 c0       	rjmp	.+8      	; 0x1ba4 <_fpadd_parts+0x132>
    1b9c:	96 94       	lsr	r9
    1b9e:	87 94       	ror	r8
    1ba0:	77 94       	ror	r7
    1ba2:	67 94       	ror	r6
    1ba4:	0a 94       	dec	r0
    1ba6:	d2 f7       	brpl	.-12     	; 0x1b9c <_fpadd_parts+0x12a>
    1ba8:	21 e0       	ldi	r18, 0x01	; 1
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	40 e0       	ldi	r20, 0x00	; 0
    1bae:	50 e0       	ldi	r21, 0x00	; 0
    1bb0:	04 c0       	rjmp	.+8      	; 0x1bba <_fpadd_parts+0x148>
    1bb2:	22 0f       	add	r18, r18
    1bb4:	33 1f       	adc	r19, r19
    1bb6:	44 1f       	adc	r20, r20
    1bb8:	55 1f       	adc	r21, r21
    1bba:	6a 95       	dec	r22
    1bbc:	d2 f7       	brpl	.-12     	; 0x1bb2 <_fpadd_parts+0x140>
    1bbe:	21 50       	subi	r18, 0x01	; 1
    1bc0:	30 40       	sbci	r19, 0x00	; 0
    1bc2:	40 40       	sbci	r20, 0x00	; 0
    1bc4:	50 40       	sbci	r21, 0x00	; 0
    1bc6:	2a 21       	and	r18, r10
    1bc8:	3b 21       	and	r19, r11
    1bca:	4c 21       	and	r20, r12
    1bcc:	5d 21       	and	r21, r13
    1bce:	21 15       	cp	r18, r1
    1bd0:	31 05       	cpc	r19, r1
    1bd2:	41 05       	cpc	r20, r1
    1bd4:	51 05       	cpc	r21, r1
    1bd6:	21 f0       	breq	.+8      	; 0x1be0 <_fpadd_parts+0x16e>
    1bd8:	21 e0       	ldi	r18, 0x01	; 1
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	40 e0       	ldi	r20, 0x00	; 0
    1bde:	50 e0       	ldi	r21, 0x00	; 0
    1be0:	59 01       	movw	r10, r18
    1be2:	6a 01       	movw	r12, r20
    1be4:	a6 28       	or	r10, r6
    1be6:	b7 28       	or	r11, r7
    1be8:	c8 28       	or	r12, r8
    1bea:	d9 28       	or	r13, r9
    1bec:	0b c0       	rjmp	.+22     	; 0x1c04 <_fpadd_parts+0x192>
    1bee:	82 15       	cp	r24, r2
    1bf0:	93 05       	cpc	r25, r3
    1bf2:	2c f0       	brlt	.+10     	; 0x1bfe <_fpadd_parts+0x18c>
    1bf4:	1c 01       	movw	r2, r24
    1bf6:	aa 24       	eor	r10, r10
    1bf8:	bb 24       	eor	r11, r11
    1bfa:	65 01       	movw	r12, r10
    1bfc:	03 c0       	rjmp	.+6      	; 0x1c04 <_fpadd_parts+0x192>
    1bfe:	ee 24       	eor	r14, r14
    1c00:	ff 24       	eor	r15, r15
    1c02:	87 01       	movw	r16, r14
    1c04:	11 96       	adiw	r26, 0x01	; 1
    1c06:	9c 91       	ld	r25, X
    1c08:	d2 01       	movw	r26, r4
    1c0a:	11 96       	adiw	r26, 0x01	; 1
    1c0c:	8c 91       	ld	r24, X
    1c0e:	98 17       	cp	r25, r24
    1c10:	09 f4       	brne	.+2      	; 0x1c14 <_fpadd_parts+0x1a2>
    1c12:	45 c0       	rjmp	.+138    	; 0x1c9e <_fpadd_parts+0x22c>
    1c14:	99 23       	and	r25, r25
    1c16:	39 f0       	breq	.+14     	; 0x1c26 <_fpadd_parts+0x1b4>
    1c18:	a8 01       	movw	r20, r16
    1c1a:	97 01       	movw	r18, r14
    1c1c:	2a 19       	sub	r18, r10
    1c1e:	3b 09       	sbc	r19, r11
    1c20:	4c 09       	sbc	r20, r12
    1c22:	5d 09       	sbc	r21, r13
    1c24:	06 c0       	rjmp	.+12     	; 0x1c32 <_fpadd_parts+0x1c0>
    1c26:	a6 01       	movw	r20, r12
    1c28:	95 01       	movw	r18, r10
    1c2a:	2e 19       	sub	r18, r14
    1c2c:	3f 09       	sbc	r19, r15
    1c2e:	40 0b       	sbc	r20, r16
    1c30:	51 0b       	sbc	r21, r17
    1c32:	57 fd       	sbrc	r21, 7
    1c34:	08 c0       	rjmp	.+16     	; 0x1c46 <_fpadd_parts+0x1d4>
    1c36:	11 82       	std	Z+1, r1	; 0x01
    1c38:	33 82       	std	Z+3, r3	; 0x03
    1c3a:	22 82       	std	Z+2, r2	; 0x02
    1c3c:	24 83       	std	Z+4, r18	; 0x04
    1c3e:	35 83       	std	Z+5, r19	; 0x05
    1c40:	46 83       	std	Z+6, r20	; 0x06
    1c42:	57 83       	std	Z+7, r21	; 0x07
    1c44:	1d c0       	rjmp	.+58     	; 0x1c80 <_fpadd_parts+0x20e>
    1c46:	81 e0       	ldi	r24, 0x01	; 1
    1c48:	81 83       	std	Z+1, r24	; 0x01
    1c4a:	33 82       	std	Z+3, r3	; 0x03
    1c4c:	22 82       	std	Z+2, r2	; 0x02
    1c4e:	88 27       	eor	r24, r24
    1c50:	99 27       	eor	r25, r25
    1c52:	dc 01       	movw	r26, r24
    1c54:	82 1b       	sub	r24, r18
    1c56:	93 0b       	sbc	r25, r19
    1c58:	a4 0b       	sbc	r26, r20
    1c5a:	b5 0b       	sbc	r27, r21
    1c5c:	84 83       	std	Z+4, r24	; 0x04
    1c5e:	95 83       	std	Z+5, r25	; 0x05
    1c60:	a6 83       	std	Z+6, r26	; 0x06
    1c62:	b7 83       	std	Z+7, r27	; 0x07
    1c64:	0d c0       	rjmp	.+26     	; 0x1c80 <_fpadd_parts+0x20e>
    1c66:	22 0f       	add	r18, r18
    1c68:	33 1f       	adc	r19, r19
    1c6a:	44 1f       	adc	r20, r20
    1c6c:	55 1f       	adc	r21, r21
    1c6e:	24 83       	std	Z+4, r18	; 0x04
    1c70:	35 83       	std	Z+5, r19	; 0x05
    1c72:	46 83       	std	Z+6, r20	; 0x06
    1c74:	57 83       	std	Z+7, r21	; 0x07
    1c76:	82 81       	ldd	r24, Z+2	; 0x02
    1c78:	93 81       	ldd	r25, Z+3	; 0x03
    1c7a:	01 97       	sbiw	r24, 0x01	; 1
    1c7c:	93 83       	std	Z+3, r25	; 0x03
    1c7e:	82 83       	std	Z+2, r24	; 0x02
    1c80:	24 81       	ldd	r18, Z+4	; 0x04
    1c82:	35 81       	ldd	r19, Z+5	; 0x05
    1c84:	46 81       	ldd	r20, Z+6	; 0x06
    1c86:	57 81       	ldd	r21, Z+7	; 0x07
    1c88:	da 01       	movw	r26, r20
    1c8a:	c9 01       	movw	r24, r18
    1c8c:	01 97       	sbiw	r24, 0x01	; 1
    1c8e:	a1 09       	sbc	r26, r1
    1c90:	b1 09       	sbc	r27, r1
    1c92:	8f 5f       	subi	r24, 0xFF	; 255
    1c94:	9f 4f       	sbci	r25, 0xFF	; 255
    1c96:	af 4f       	sbci	r26, 0xFF	; 255
    1c98:	bf 43       	sbci	r27, 0x3F	; 63
    1c9a:	28 f3       	brcs	.-54     	; 0x1c66 <_fpadd_parts+0x1f4>
    1c9c:	0b c0       	rjmp	.+22     	; 0x1cb4 <_fpadd_parts+0x242>
    1c9e:	91 83       	std	Z+1, r25	; 0x01
    1ca0:	33 82       	std	Z+3, r3	; 0x03
    1ca2:	22 82       	std	Z+2, r2	; 0x02
    1ca4:	ea 0c       	add	r14, r10
    1ca6:	fb 1c       	adc	r15, r11
    1ca8:	0c 1d       	adc	r16, r12
    1caa:	1d 1d       	adc	r17, r13
    1cac:	e4 82       	std	Z+4, r14	; 0x04
    1cae:	f5 82       	std	Z+5, r15	; 0x05
    1cb0:	06 83       	std	Z+6, r16	; 0x06
    1cb2:	17 83       	std	Z+7, r17	; 0x07
    1cb4:	83 e0       	ldi	r24, 0x03	; 3
    1cb6:	80 83       	st	Z, r24
    1cb8:	24 81       	ldd	r18, Z+4	; 0x04
    1cba:	35 81       	ldd	r19, Z+5	; 0x05
    1cbc:	46 81       	ldd	r20, Z+6	; 0x06
    1cbe:	57 81       	ldd	r21, Z+7	; 0x07
    1cc0:	57 ff       	sbrs	r21, 7
    1cc2:	1a c0       	rjmp	.+52     	; 0x1cf8 <_fpadd_parts+0x286>
    1cc4:	c9 01       	movw	r24, r18
    1cc6:	aa 27       	eor	r26, r26
    1cc8:	97 fd       	sbrc	r25, 7
    1cca:	a0 95       	com	r26
    1ccc:	ba 2f       	mov	r27, r26
    1cce:	81 70       	andi	r24, 0x01	; 1
    1cd0:	90 70       	andi	r25, 0x00	; 0
    1cd2:	a0 70       	andi	r26, 0x00	; 0
    1cd4:	b0 70       	andi	r27, 0x00	; 0
    1cd6:	56 95       	lsr	r21
    1cd8:	47 95       	ror	r20
    1cda:	37 95       	ror	r19
    1cdc:	27 95       	ror	r18
    1cde:	82 2b       	or	r24, r18
    1ce0:	93 2b       	or	r25, r19
    1ce2:	a4 2b       	or	r26, r20
    1ce4:	b5 2b       	or	r27, r21
    1ce6:	84 83       	std	Z+4, r24	; 0x04
    1ce8:	95 83       	std	Z+5, r25	; 0x05
    1cea:	a6 83       	std	Z+6, r26	; 0x06
    1cec:	b7 83       	std	Z+7, r27	; 0x07
    1cee:	82 81       	ldd	r24, Z+2	; 0x02
    1cf0:	93 81       	ldd	r25, Z+3	; 0x03
    1cf2:	01 96       	adiw	r24, 0x01	; 1
    1cf4:	93 83       	std	Z+3, r25	; 0x03
    1cf6:	82 83       	std	Z+2, r24	; 0x02
    1cf8:	df 01       	movw	r26, r30
    1cfa:	01 c0       	rjmp	.+2      	; 0x1cfe <_fpadd_parts+0x28c>
    1cfc:	d2 01       	movw	r26, r4
    1cfe:	cd 01       	movw	r24, r26
    1d00:	cd b7       	in	r28, 0x3d	; 61
    1d02:	de b7       	in	r29, 0x3e	; 62
    1d04:	e2 e1       	ldi	r30, 0x12	; 18
    1d06:	0c 94 f7 13 	jmp	0x27ee	; 0x27ee <__epilogue_restores__>

00001d0a <__subsf3>:
    1d0a:	a0 e2       	ldi	r26, 0x20	; 32
    1d0c:	b0 e0       	ldi	r27, 0x00	; 0
    1d0e:	eb e8       	ldi	r30, 0x8B	; 139
    1d10:	fe e0       	ldi	r31, 0x0E	; 14
    1d12:	0c 94 e7 13 	jmp	0x27ce	; 0x27ce <__prologue_saves__+0x18>
    1d16:	69 83       	std	Y+1, r22	; 0x01
    1d18:	7a 83       	std	Y+2, r23	; 0x02
    1d1a:	8b 83       	std	Y+3, r24	; 0x03
    1d1c:	9c 83       	std	Y+4, r25	; 0x04
    1d1e:	2d 83       	std	Y+5, r18	; 0x05
    1d20:	3e 83       	std	Y+6, r19	; 0x06
    1d22:	4f 83       	std	Y+7, r20	; 0x07
    1d24:	58 87       	std	Y+8, r21	; 0x08
    1d26:	e9 e0       	ldi	r30, 0x09	; 9
    1d28:	ee 2e       	mov	r14, r30
    1d2a:	f1 2c       	mov	r15, r1
    1d2c:	ec 0e       	add	r14, r28
    1d2e:	fd 1e       	adc	r15, r29
    1d30:	ce 01       	movw	r24, r28
    1d32:	01 96       	adiw	r24, 0x01	; 1
    1d34:	b7 01       	movw	r22, r14
    1d36:	0e 94 0a 13 	call	0x2614	; 0x2614 <__unpack_f>
    1d3a:	8e 01       	movw	r16, r28
    1d3c:	0f 5e       	subi	r16, 0xEF	; 239
    1d3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d40:	ce 01       	movw	r24, r28
    1d42:	05 96       	adiw	r24, 0x05	; 5
    1d44:	b8 01       	movw	r22, r16
    1d46:	0e 94 0a 13 	call	0x2614	; 0x2614 <__unpack_f>
    1d4a:	8a 89       	ldd	r24, Y+18	; 0x12
    1d4c:	91 e0       	ldi	r25, 0x01	; 1
    1d4e:	89 27       	eor	r24, r25
    1d50:	8a 8b       	std	Y+18, r24	; 0x12
    1d52:	c7 01       	movw	r24, r14
    1d54:	b8 01       	movw	r22, r16
    1d56:	ae 01       	movw	r20, r28
    1d58:	47 5e       	subi	r20, 0xE7	; 231
    1d5a:	5f 4f       	sbci	r21, 0xFF	; 255
    1d5c:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <_fpadd_parts>
    1d60:	0e 94 35 12 	call	0x246a	; 0x246a <__pack_f>
    1d64:	a0 96       	adiw	r28, 0x20	; 32
    1d66:	e6 e0       	ldi	r30, 0x06	; 6
    1d68:	0c 94 03 14 	jmp	0x2806	; 0x2806 <__epilogue_restores__+0x18>

00001d6c <__addsf3>:
    1d6c:	a0 e2       	ldi	r26, 0x20	; 32
    1d6e:	b0 e0       	ldi	r27, 0x00	; 0
    1d70:	ec eb       	ldi	r30, 0xBC	; 188
    1d72:	fe e0       	ldi	r31, 0x0E	; 14
    1d74:	0c 94 e7 13 	jmp	0x27ce	; 0x27ce <__prologue_saves__+0x18>
    1d78:	69 83       	std	Y+1, r22	; 0x01
    1d7a:	7a 83       	std	Y+2, r23	; 0x02
    1d7c:	8b 83       	std	Y+3, r24	; 0x03
    1d7e:	9c 83       	std	Y+4, r25	; 0x04
    1d80:	2d 83       	std	Y+5, r18	; 0x05
    1d82:	3e 83       	std	Y+6, r19	; 0x06
    1d84:	4f 83       	std	Y+7, r20	; 0x07
    1d86:	58 87       	std	Y+8, r21	; 0x08
    1d88:	f9 e0       	ldi	r31, 0x09	; 9
    1d8a:	ef 2e       	mov	r14, r31
    1d8c:	f1 2c       	mov	r15, r1
    1d8e:	ec 0e       	add	r14, r28
    1d90:	fd 1e       	adc	r15, r29
    1d92:	ce 01       	movw	r24, r28
    1d94:	01 96       	adiw	r24, 0x01	; 1
    1d96:	b7 01       	movw	r22, r14
    1d98:	0e 94 0a 13 	call	0x2614	; 0x2614 <__unpack_f>
    1d9c:	8e 01       	movw	r16, r28
    1d9e:	0f 5e       	subi	r16, 0xEF	; 239
    1da0:	1f 4f       	sbci	r17, 0xFF	; 255
    1da2:	ce 01       	movw	r24, r28
    1da4:	05 96       	adiw	r24, 0x05	; 5
    1da6:	b8 01       	movw	r22, r16
    1da8:	0e 94 0a 13 	call	0x2614	; 0x2614 <__unpack_f>
    1dac:	c7 01       	movw	r24, r14
    1dae:	b8 01       	movw	r22, r16
    1db0:	ae 01       	movw	r20, r28
    1db2:	47 5e       	subi	r20, 0xE7	; 231
    1db4:	5f 4f       	sbci	r21, 0xFF	; 255
    1db6:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <_fpadd_parts>
    1dba:	0e 94 35 12 	call	0x246a	; 0x246a <__pack_f>
    1dbe:	a0 96       	adiw	r28, 0x20	; 32
    1dc0:	e6 e0       	ldi	r30, 0x06	; 6
    1dc2:	0c 94 03 14 	jmp	0x2806	; 0x2806 <__epilogue_restores__+0x18>

00001dc6 <__mulsf3>:
    1dc6:	a0 e2       	ldi	r26, 0x20	; 32
    1dc8:	b0 e0       	ldi	r27, 0x00	; 0
    1dca:	e9 ee       	ldi	r30, 0xE9	; 233
    1dcc:	fe e0       	ldi	r31, 0x0E	; 14
    1dce:	0c 94 db 13 	jmp	0x27b6	; 0x27b6 <__prologue_saves__>
    1dd2:	69 83       	std	Y+1, r22	; 0x01
    1dd4:	7a 83       	std	Y+2, r23	; 0x02
    1dd6:	8b 83       	std	Y+3, r24	; 0x03
    1dd8:	9c 83       	std	Y+4, r25	; 0x04
    1dda:	2d 83       	std	Y+5, r18	; 0x05
    1ddc:	3e 83       	std	Y+6, r19	; 0x06
    1dde:	4f 83       	std	Y+7, r20	; 0x07
    1de0:	58 87       	std	Y+8, r21	; 0x08
    1de2:	ce 01       	movw	r24, r28
    1de4:	01 96       	adiw	r24, 0x01	; 1
    1de6:	be 01       	movw	r22, r28
    1de8:	67 5f       	subi	r22, 0xF7	; 247
    1dea:	7f 4f       	sbci	r23, 0xFF	; 255
    1dec:	0e 94 0a 13 	call	0x2614	; 0x2614 <__unpack_f>
    1df0:	ce 01       	movw	r24, r28
    1df2:	05 96       	adiw	r24, 0x05	; 5
    1df4:	be 01       	movw	r22, r28
    1df6:	6f 5e       	subi	r22, 0xEF	; 239
    1df8:	7f 4f       	sbci	r23, 0xFF	; 255
    1dfa:	0e 94 0a 13 	call	0x2614	; 0x2614 <__unpack_f>
    1dfe:	99 85       	ldd	r25, Y+9	; 0x09
    1e00:	92 30       	cpi	r25, 0x02	; 2
    1e02:	88 f0       	brcs	.+34     	; 0x1e26 <__mulsf3+0x60>
    1e04:	89 89       	ldd	r24, Y+17	; 0x11
    1e06:	82 30       	cpi	r24, 0x02	; 2
    1e08:	c8 f0       	brcs	.+50     	; 0x1e3c <__mulsf3+0x76>
    1e0a:	94 30       	cpi	r25, 0x04	; 4
    1e0c:	19 f4       	brne	.+6      	; 0x1e14 <__mulsf3+0x4e>
    1e0e:	82 30       	cpi	r24, 0x02	; 2
    1e10:	51 f4       	brne	.+20     	; 0x1e26 <__mulsf3+0x60>
    1e12:	04 c0       	rjmp	.+8      	; 0x1e1c <__mulsf3+0x56>
    1e14:	84 30       	cpi	r24, 0x04	; 4
    1e16:	29 f4       	brne	.+10     	; 0x1e22 <__mulsf3+0x5c>
    1e18:	92 30       	cpi	r25, 0x02	; 2
    1e1a:	81 f4       	brne	.+32     	; 0x1e3c <__mulsf3+0x76>
    1e1c:	87 e1       	ldi	r24, 0x17	; 23
    1e1e:	91 e0       	ldi	r25, 0x01	; 1
    1e20:	c6 c0       	rjmp	.+396    	; 0x1fae <__mulsf3+0x1e8>
    1e22:	92 30       	cpi	r25, 0x02	; 2
    1e24:	49 f4       	brne	.+18     	; 0x1e38 <__mulsf3+0x72>
    1e26:	20 e0       	ldi	r18, 0x00	; 0
    1e28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e2a:	8a 89       	ldd	r24, Y+18	; 0x12
    1e2c:	98 13       	cpse	r25, r24
    1e2e:	21 e0       	ldi	r18, 0x01	; 1
    1e30:	2a 87       	std	Y+10, r18	; 0x0a
    1e32:	ce 01       	movw	r24, r28
    1e34:	09 96       	adiw	r24, 0x09	; 9
    1e36:	bb c0       	rjmp	.+374    	; 0x1fae <__mulsf3+0x1e8>
    1e38:	82 30       	cpi	r24, 0x02	; 2
    1e3a:	49 f4       	brne	.+18     	; 0x1e4e <__mulsf3+0x88>
    1e3c:	20 e0       	ldi	r18, 0x00	; 0
    1e3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e40:	8a 89       	ldd	r24, Y+18	; 0x12
    1e42:	98 13       	cpse	r25, r24
    1e44:	21 e0       	ldi	r18, 0x01	; 1
    1e46:	2a 8b       	std	Y+18, r18	; 0x12
    1e48:	ce 01       	movw	r24, r28
    1e4a:	41 96       	adiw	r24, 0x11	; 17
    1e4c:	b0 c0       	rjmp	.+352    	; 0x1fae <__mulsf3+0x1e8>
    1e4e:	2d 84       	ldd	r2, Y+13	; 0x0d
    1e50:	3e 84       	ldd	r3, Y+14	; 0x0e
    1e52:	4f 84       	ldd	r4, Y+15	; 0x0f
    1e54:	58 88       	ldd	r5, Y+16	; 0x10
    1e56:	6d 88       	ldd	r6, Y+21	; 0x15
    1e58:	7e 88       	ldd	r7, Y+22	; 0x16
    1e5a:	8f 88       	ldd	r8, Y+23	; 0x17
    1e5c:	98 8c       	ldd	r9, Y+24	; 0x18
    1e5e:	ee 24       	eor	r14, r14
    1e60:	ff 24       	eor	r15, r15
    1e62:	87 01       	movw	r16, r14
    1e64:	aa 24       	eor	r10, r10
    1e66:	bb 24       	eor	r11, r11
    1e68:	65 01       	movw	r12, r10
    1e6a:	40 e0       	ldi	r20, 0x00	; 0
    1e6c:	50 e0       	ldi	r21, 0x00	; 0
    1e6e:	60 e0       	ldi	r22, 0x00	; 0
    1e70:	70 e0       	ldi	r23, 0x00	; 0
    1e72:	e0 e0       	ldi	r30, 0x00	; 0
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	c1 01       	movw	r24, r2
    1e78:	81 70       	andi	r24, 0x01	; 1
    1e7a:	90 70       	andi	r25, 0x00	; 0
    1e7c:	89 2b       	or	r24, r25
    1e7e:	e9 f0       	breq	.+58     	; 0x1eba <__mulsf3+0xf4>
    1e80:	e6 0c       	add	r14, r6
    1e82:	f7 1c       	adc	r15, r7
    1e84:	08 1d       	adc	r16, r8
    1e86:	19 1d       	adc	r17, r9
    1e88:	9a 01       	movw	r18, r20
    1e8a:	ab 01       	movw	r20, r22
    1e8c:	2a 0d       	add	r18, r10
    1e8e:	3b 1d       	adc	r19, r11
    1e90:	4c 1d       	adc	r20, r12
    1e92:	5d 1d       	adc	r21, r13
    1e94:	80 e0       	ldi	r24, 0x00	; 0
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	a0 e0       	ldi	r26, 0x00	; 0
    1e9a:	b0 e0       	ldi	r27, 0x00	; 0
    1e9c:	e6 14       	cp	r14, r6
    1e9e:	f7 04       	cpc	r15, r7
    1ea0:	08 05       	cpc	r16, r8
    1ea2:	19 05       	cpc	r17, r9
    1ea4:	20 f4       	brcc	.+8      	; 0x1eae <__mulsf3+0xe8>
    1ea6:	81 e0       	ldi	r24, 0x01	; 1
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	a0 e0       	ldi	r26, 0x00	; 0
    1eac:	b0 e0       	ldi	r27, 0x00	; 0
    1eae:	ba 01       	movw	r22, r20
    1eb0:	a9 01       	movw	r20, r18
    1eb2:	48 0f       	add	r20, r24
    1eb4:	59 1f       	adc	r21, r25
    1eb6:	6a 1f       	adc	r22, r26
    1eb8:	7b 1f       	adc	r23, r27
    1eba:	aa 0c       	add	r10, r10
    1ebc:	bb 1c       	adc	r11, r11
    1ebe:	cc 1c       	adc	r12, r12
    1ec0:	dd 1c       	adc	r13, r13
    1ec2:	97 fe       	sbrs	r9, 7
    1ec4:	08 c0       	rjmp	.+16     	; 0x1ed6 <__mulsf3+0x110>
    1ec6:	81 e0       	ldi	r24, 0x01	; 1
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	a0 e0       	ldi	r26, 0x00	; 0
    1ecc:	b0 e0       	ldi	r27, 0x00	; 0
    1ece:	a8 2a       	or	r10, r24
    1ed0:	b9 2a       	or	r11, r25
    1ed2:	ca 2a       	or	r12, r26
    1ed4:	db 2a       	or	r13, r27
    1ed6:	31 96       	adiw	r30, 0x01	; 1
    1ed8:	e0 32       	cpi	r30, 0x20	; 32
    1eda:	f1 05       	cpc	r31, r1
    1edc:	49 f0       	breq	.+18     	; 0x1ef0 <__mulsf3+0x12a>
    1ede:	66 0c       	add	r6, r6
    1ee0:	77 1c       	adc	r7, r7
    1ee2:	88 1c       	adc	r8, r8
    1ee4:	99 1c       	adc	r9, r9
    1ee6:	56 94       	lsr	r5
    1ee8:	47 94       	ror	r4
    1eea:	37 94       	ror	r3
    1eec:	27 94       	ror	r2
    1eee:	c3 cf       	rjmp	.-122    	; 0x1e76 <__mulsf3+0xb0>
    1ef0:	fa 85       	ldd	r31, Y+10	; 0x0a
    1ef2:	ea 89       	ldd	r30, Y+18	; 0x12
    1ef4:	2b 89       	ldd	r18, Y+19	; 0x13
    1ef6:	3c 89       	ldd	r19, Y+20	; 0x14
    1ef8:	8b 85       	ldd	r24, Y+11	; 0x0b
    1efa:	9c 85       	ldd	r25, Y+12	; 0x0c
    1efc:	28 0f       	add	r18, r24
    1efe:	39 1f       	adc	r19, r25
    1f00:	2e 5f       	subi	r18, 0xFE	; 254
    1f02:	3f 4f       	sbci	r19, 0xFF	; 255
    1f04:	17 c0       	rjmp	.+46     	; 0x1f34 <__mulsf3+0x16e>
    1f06:	ca 01       	movw	r24, r20
    1f08:	81 70       	andi	r24, 0x01	; 1
    1f0a:	90 70       	andi	r25, 0x00	; 0
    1f0c:	89 2b       	or	r24, r25
    1f0e:	61 f0       	breq	.+24     	; 0x1f28 <__mulsf3+0x162>
    1f10:	16 95       	lsr	r17
    1f12:	07 95       	ror	r16
    1f14:	f7 94       	ror	r15
    1f16:	e7 94       	ror	r14
    1f18:	80 e0       	ldi	r24, 0x00	; 0
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	a0 e0       	ldi	r26, 0x00	; 0
    1f1e:	b0 e8       	ldi	r27, 0x80	; 128
    1f20:	e8 2a       	or	r14, r24
    1f22:	f9 2a       	or	r15, r25
    1f24:	0a 2b       	or	r16, r26
    1f26:	1b 2b       	or	r17, r27
    1f28:	76 95       	lsr	r23
    1f2a:	67 95       	ror	r22
    1f2c:	57 95       	ror	r21
    1f2e:	47 95       	ror	r20
    1f30:	2f 5f       	subi	r18, 0xFF	; 255
    1f32:	3f 4f       	sbci	r19, 0xFF	; 255
    1f34:	77 fd       	sbrc	r23, 7
    1f36:	e7 cf       	rjmp	.-50     	; 0x1f06 <__mulsf3+0x140>
    1f38:	0c c0       	rjmp	.+24     	; 0x1f52 <__mulsf3+0x18c>
    1f3a:	44 0f       	add	r20, r20
    1f3c:	55 1f       	adc	r21, r21
    1f3e:	66 1f       	adc	r22, r22
    1f40:	77 1f       	adc	r23, r23
    1f42:	17 fd       	sbrc	r17, 7
    1f44:	41 60       	ori	r20, 0x01	; 1
    1f46:	ee 0c       	add	r14, r14
    1f48:	ff 1c       	adc	r15, r15
    1f4a:	00 1f       	adc	r16, r16
    1f4c:	11 1f       	adc	r17, r17
    1f4e:	21 50       	subi	r18, 0x01	; 1
    1f50:	30 40       	sbci	r19, 0x00	; 0
    1f52:	40 30       	cpi	r20, 0x00	; 0
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	59 07       	cpc	r21, r25
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	69 07       	cpc	r22, r25
    1f5c:	90 e4       	ldi	r25, 0x40	; 64
    1f5e:	79 07       	cpc	r23, r25
    1f60:	60 f3       	brcs	.-40     	; 0x1f3a <__mulsf3+0x174>
    1f62:	2b 8f       	std	Y+27, r18	; 0x1b
    1f64:	3c 8f       	std	Y+28, r19	; 0x1c
    1f66:	db 01       	movw	r26, r22
    1f68:	ca 01       	movw	r24, r20
    1f6a:	8f 77       	andi	r24, 0x7F	; 127
    1f6c:	90 70       	andi	r25, 0x00	; 0
    1f6e:	a0 70       	andi	r26, 0x00	; 0
    1f70:	b0 70       	andi	r27, 0x00	; 0
    1f72:	80 34       	cpi	r24, 0x40	; 64
    1f74:	91 05       	cpc	r25, r1
    1f76:	a1 05       	cpc	r26, r1
    1f78:	b1 05       	cpc	r27, r1
    1f7a:	61 f4       	brne	.+24     	; 0x1f94 <__mulsf3+0x1ce>
    1f7c:	47 fd       	sbrc	r20, 7
    1f7e:	0a c0       	rjmp	.+20     	; 0x1f94 <__mulsf3+0x1ce>
    1f80:	e1 14       	cp	r14, r1
    1f82:	f1 04       	cpc	r15, r1
    1f84:	01 05       	cpc	r16, r1
    1f86:	11 05       	cpc	r17, r1
    1f88:	29 f0       	breq	.+10     	; 0x1f94 <__mulsf3+0x1ce>
    1f8a:	40 5c       	subi	r20, 0xC0	; 192
    1f8c:	5f 4f       	sbci	r21, 0xFF	; 255
    1f8e:	6f 4f       	sbci	r22, 0xFF	; 255
    1f90:	7f 4f       	sbci	r23, 0xFF	; 255
    1f92:	40 78       	andi	r20, 0x80	; 128
    1f94:	1a 8e       	std	Y+26, r1	; 0x1a
    1f96:	fe 17       	cp	r31, r30
    1f98:	11 f0       	breq	.+4      	; 0x1f9e <__mulsf3+0x1d8>
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	8a 8f       	std	Y+26, r24	; 0x1a
    1f9e:	4d 8f       	std	Y+29, r20	; 0x1d
    1fa0:	5e 8f       	std	Y+30, r21	; 0x1e
    1fa2:	6f 8f       	std	Y+31, r22	; 0x1f
    1fa4:	78 a3       	std	Y+32, r23	; 0x20
    1fa6:	83 e0       	ldi	r24, 0x03	; 3
    1fa8:	89 8f       	std	Y+25, r24	; 0x19
    1faa:	ce 01       	movw	r24, r28
    1fac:	49 96       	adiw	r24, 0x19	; 25
    1fae:	0e 94 35 12 	call	0x246a	; 0x246a <__pack_f>
    1fb2:	a0 96       	adiw	r28, 0x20	; 32
    1fb4:	e2 e1       	ldi	r30, 0x12	; 18
    1fb6:	0c 94 f7 13 	jmp	0x27ee	; 0x27ee <__epilogue_restores__>

00001fba <__divsf3>:
    1fba:	a8 e1       	ldi	r26, 0x18	; 24
    1fbc:	b0 e0       	ldi	r27, 0x00	; 0
    1fbe:	e3 ee       	ldi	r30, 0xE3	; 227
    1fc0:	ff e0       	ldi	r31, 0x0F	; 15
    1fc2:	0c 94 e3 13 	jmp	0x27c6	; 0x27c6 <__prologue_saves__+0x10>
    1fc6:	69 83       	std	Y+1, r22	; 0x01
    1fc8:	7a 83       	std	Y+2, r23	; 0x02
    1fca:	8b 83       	std	Y+3, r24	; 0x03
    1fcc:	9c 83       	std	Y+4, r25	; 0x04
    1fce:	2d 83       	std	Y+5, r18	; 0x05
    1fd0:	3e 83       	std	Y+6, r19	; 0x06
    1fd2:	4f 83       	std	Y+7, r20	; 0x07
    1fd4:	58 87       	std	Y+8, r21	; 0x08
    1fd6:	b9 e0       	ldi	r27, 0x09	; 9
    1fd8:	eb 2e       	mov	r14, r27
    1fda:	f1 2c       	mov	r15, r1
    1fdc:	ec 0e       	add	r14, r28
    1fde:	fd 1e       	adc	r15, r29
    1fe0:	ce 01       	movw	r24, r28
    1fe2:	01 96       	adiw	r24, 0x01	; 1
    1fe4:	b7 01       	movw	r22, r14
    1fe6:	0e 94 0a 13 	call	0x2614	; 0x2614 <__unpack_f>
    1fea:	8e 01       	movw	r16, r28
    1fec:	0f 5e       	subi	r16, 0xEF	; 239
    1fee:	1f 4f       	sbci	r17, 0xFF	; 255
    1ff0:	ce 01       	movw	r24, r28
    1ff2:	05 96       	adiw	r24, 0x05	; 5
    1ff4:	b8 01       	movw	r22, r16
    1ff6:	0e 94 0a 13 	call	0x2614	; 0x2614 <__unpack_f>
    1ffa:	29 85       	ldd	r18, Y+9	; 0x09
    1ffc:	22 30       	cpi	r18, 0x02	; 2
    1ffe:	08 f4       	brcc	.+2      	; 0x2002 <__divsf3+0x48>
    2000:	7e c0       	rjmp	.+252    	; 0x20fe <__divsf3+0x144>
    2002:	39 89       	ldd	r19, Y+17	; 0x11
    2004:	32 30       	cpi	r19, 0x02	; 2
    2006:	10 f4       	brcc	.+4      	; 0x200c <__divsf3+0x52>
    2008:	b8 01       	movw	r22, r16
    200a:	7c c0       	rjmp	.+248    	; 0x2104 <__divsf3+0x14a>
    200c:	8a 85       	ldd	r24, Y+10	; 0x0a
    200e:	9a 89       	ldd	r25, Y+18	; 0x12
    2010:	89 27       	eor	r24, r25
    2012:	8a 87       	std	Y+10, r24	; 0x0a
    2014:	24 30       	cpi	r18, 0x04	; 4
    2016:	11 f0       	breq	.+4      	; 0x201c <__divsf3+0x62>
    2018:	22 30       	cpi	r18, 0x02	; 2
    201a:	31 f4       	brne	.+12     	; 0x2028 <__divsf3+0x6e>
    201c:	23 17       	cp	r18, r19
    201e:	09 f0       	breq	.+2      	; 0x2022 <__divsf3+0x68>
    2020:	6e c0       	rjmp	.+220    	; 0x20fe <__divsf3+0x144>
    2022:	67 e1       	ldi	r22, 0x17	; 23
    2024:	71 e0       	ldi	r23, 0x01	; 1
    2026:	6e c0       	rjmp	.+220    	; 0x2104 <__divsf3+0x14a>
    2028:	34 30       	cpi	r19, 0x04	; 4
    202a:	39 f4       	brne	.+14     	; 0x203a <__divsf3+0x80>
    202c:	1d 86       	std	Y+13, r1	; 0x0d
    202e:	1e 86       	std	Y+14, r1	; 0x0e
    2030:	1f 86       	std	Y+15, r1	; 0x0f
    2032:	18 8a       	std	Y+16, r1	; 0x10
    2034:	1c 86       	std	Y+12, r1	; 0x0c
    2036:	1b 86       	std	Y+11, r1	; 0x0b
    2038:	04 c0       	rjmp	.+8      	; 0x2042 <__divsf3+0x88>
    203a:	32 30       	cpi	r19, 0x02	; 2
    203c:	21 f4       	brne	.+8      	; 0x2046 <__divsf3+0x8c>
    203e:	84 e0       	ldi	r24, 0x04	; 4
    2040:	89 87       	std	Y+9, r24	; 0x09
    2042:	b7 01       	movw	r22, r14
    2044:	5f c0       	rjmp	.+190    	; 0x2104 <__divsf3+0x14a>
    2046:	2b 85       	ldd	r18, Y+11	; 0x0b
    2048:	3c 85       	ldd	r19, Y+12	; 0x0c
    204a:	8b 89       	ldd	r24, Y+19	; 0x13
    204c:	9c 89       	ldd	r25, Y+20	; 0x14
    204e:	28 1b       	sub	r18, r24
    2050:	39 0b       	sbc	r19, r25
    2052:	3c 87       	std	Y+12, r19	; 0x0c
    2054:	2b 87       	std	Y+11, r18	; 0x0b
    2056:	ed 84       	ldd	r14, Y+13	; 0x0d
    2058:	fe 84       	ldd	r15, Y+14	; 0x0e
    205a:	0f 85       	ldd	r16, Y+15	; 0x0f
    205c:	18 89       	ldd	r17, Y+16	; 0x10
    205e:	ad 88       	ldd	r10, Y+21	; 0x15
    2060:	be 88       	ldd	r11, Y+22	; 0x16
    2062:	cf 88       	ldd	r12, Y+23	; 0x17
    2064:	d8 8c       	ldd	r13, Y+24	; 0x18
    2066:	ea 14       	cp	r14, r10
    2068:	fb 04       	cpc	r15, r11
    206a:	0c 05       	cpc	r16, r12
    206c:	1d 05       	cpc	r17, r13
    206e:	40 f4       	brcc	.+16     	; 0x2080 <__divsf3+0xc6>
    2070:	ee 0c       	add	r14, r14
    2072:	ff 1c       	adc	r15, r15
    2074:	00 1f       	adc	r16, r16
    2076:	11 1f       	adc	r17, r17
    2078:	21 50       	subi	r18, 0x01	; 1
    207a:	30 40       	sbci	r19, 0x00	; 0
    207c:	3c 87       	std	Y+12, r19	; 0x0c
    207e:	2b 87       	std	Y+11, r18	; 0x0b
    2080:	20 e0       	ldi	r18, 0x00	; 0
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	40 e0       	ldi	r20, 0x00	; 0
    2086:	50 e0       	ldi	r21, 0x00	; 0
    2088:	80 e0       	ldi	r24, 0x00	; 0
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	a0 e0       	ldi	r26, 0x00	; 0
    208e:	b0 e4       	ldi	r27, 0x40	; 64
    2090:	60 e0       	ldi	r22, 0x00	; 0
    2092:	70 e0       	ldi	r23, 0x00	; 0
    2094:	ea 14       	cp	r14, r10
    2096:	fb 04       	cpc	r15, r11
    2098:	0c 05       	cpc	r16, r12
    209a:	1d 05       	cpc	r17, r13
    209c:	40 f0       	brcs	.+16     	; 0x20ae <__divsf3+0xf4>
    209e:	28 2b       	or	r18, r24
    20a0:	39 2b       	or	r19, r25
    20a2:	4a 2b       	or	r20, r26
    20a4:	5b 2b       	or	r21, r27
    20a6:	ea 18       	sub	r14, r10
    20a8:	fb 08       	sbc	r15, r11
    20aa:	0c 09       	sbc	r16, r12
    20ac:	1d 09       	sbc	r17, r13
    20ae:	b6 95       	lsr	r27
    20b0:	a7 95       	ror	r26
    20b2:	97 95       	ror	r25
    20b4:	87 95       	ror	r24
    20b6:	ee 0c       	add	r14, r14
    20b8:	ff 1c       	adc	r15, r15
    20ba:	00 1f       	adc	r16, r16
    20bc:	11 1f       	adc	r17, r17
    20be:	6f 5f       	subi	r22, 0xFF	; 255
    20c0:	7f 4f       	sbci	r23, 0xFF	; 255
    20c2:	6f 31       	cpi	r22, 0x1F	; 31
    20c4:	71 05       	cpc	r23, r1
    20c6:	31 f7       	brne	.-52     	; 0x2094 <__divsf3+0xda>
    20c8:	da 01       	movw	r26, r20
    20ca:	c9 01       	movw	r24, r18
    20cc:	8f 77       	andi	r24, 0x7F	; 127
    20ce:	90 70       	andi	r25, 0x00	; 0
    20d0:	a0 70       	andi	r26, 0x00	; 0
    20d2:	b0 70       	andi	r27, 0x00	; 0
    20d4:	80 34       	cpi	r24, 0x40	; 64
    20d6:	91 05       	cpc	r25, r1
    20d8:	a1 05       	cpc	r26, r1
    20da:	b1 05       	cpc	r27, r1
    20dc:	61 f4       	brne	.+24     	; 0x20f6 <__divsf3+0x13c>
    20de:	27 fd       	sbrc	r18, 7
    20e0:	0a c0       	rjmp	.+20     	; 0x20f6 <__divsf3+0x13c>
    20e2:	e1 14       	cp	r14, r1
    20e4:	f1 04       	cpc	r15, r1
    20e6:	01 05       	cpc	r16, r1
    20e8:	11 05       	cpc	r17, r1
    20ea:	29 f0       	breq	.+10     	; 0x20f6 <__divsf3+0x13c>
    20ec:	20 5c       	subi	r18, 0xC0	; 192
    20ee:	3f 4f       	sbci	r19, 0xFF	; 255
    20f0:	4f 4f       	sbci	r20, 0xFF	; 255
    20f2:	5f 4f       	sbci	r21, 0xFF	; 255
    20f4:	20 78       	andi	r18, 0x80	; 128
    20f6:	2d 87       	std	Y+13, r18	; 0x0d
    20f8:	3e 87       	std	Y+14, r19	; 0x0e
    20fa:	4f 87       	std	Y+15, r20	; 0x0f
    20fc:	58 8b       	std	Y+16, r21	; 0x10
    20fe:	be 01       	movw	r22, r28
    2100:	67 5f       	subi	r22, 0xF7	; 247
    2102:	7f 4f       	sbci	r23, 0xFF	; 255
    2104:	cb 01       	movw	r24, r22
    2106:	0e 94 35 12 	call	0x246a	; 0x246a <__pack_f>
    210a:	68 96       	adiw	r28, 0x18	; 24
    210c:	ea e0       	ldi	r30, 0x0A	; 10
    210e:	0c 94 ff 13 	jmp	0x27fe	; 0x27fe <__epilogue_restores__+0x10>

00002112 <__gtsf2>:
    2112:	a8 e1       	ldi	r26, 0x18	; 24
    2114:	b0 e0       	ldi	r27, 0x00	; 0
    2116:	ef e8       	ldi	r30, 0x8F	; 143
    2118:	f0 e1       	ldi	r31, 0x10	; 16
    211a:	0c 94 e7 13 	jmp	0x27ce	; 0x27ce <__prologue_saves__+0x18>
    211e:	69 83       	std	Y+1, r22	; 0x01
    2120:	7a 83       	std	Y+2, r23	; 0x02
    2122:	8b 83       	std	Y+3, r24	; 0x03
    2124:	9c 83       	std	Y+4, r25	; 0x04
    2126:	2d 83       	std	Y+5, r18	; 0x05
    2128:	3e 83       	std	Y+6, r19	; 0x06
    212a:	4f 83       	std	Y+7, r20	; 0x07
    212c:	58 87       	std	Y+8, r21	; 0x08
    212e:	89 e0       	ldi	r24, 0x09	; 9
    2130:	e8 2e       	mov	r14, r24
    2132:	f1 2c       	mov	r15, r1
    2134:	ec 0e       	add	r14, r28
    2136:	fd 1e       	adc	r15, r29
    2138:	ce 01       	movw	r24, r28
    213a:	01 96       	adiw	r24, 0x01	; 1
    213c:	b7 01       	movw	r22, r14
    213e:	0e 94 0a 13 	call	0x2614	; 0x2614 <__unpack_f>
    2142:	8e 01       	movw	r16, r28
    2144:	0f 5e       	subi	r16, 0xEF	; 239
    2146:	1f 4f       	sbci	r17, 0xFF	; 255
    2148:	ce 01       	movw	r24, r28
    214a:	05 96       	adiw	r24, 0x05	; 5
    214c:	b8 01       	movw	r22, r16
    214e:	0e 94 0a 13 	call	0x2614	; 0x2614 <__unpack_f>
    2152:	89 85       	ldd	r24, Y+9	; 0x09
    2154:	82 30       	cpi	r24, 0x02	; 2
    2156:	40 f0       	brcs	.+16     	; 0x2168 <__gtsf2+0x56>
    2158:	89 89       	ldd	r24, Y+17	; 0x11
    215a:	82 30       	cpi	r24, 0x02	; 2
    215c:	28 f0       	brcs	.+10     	; 0x2168 <__gtsf2+0x56>
    215e:	c7 01       	movw	r24, r14
    2160:	b8 01       	movw	r22, r16
    2162:	0e 94 82 13 	call	0x2704	; 0x2704 <__fpcmp_parts_f>
    2166:	01 c0       	rjmp	.+2      	; 0x216a <__gtsf2+0x58>
    2168:	8f ef       	ldi	r24, 0xFF	; 255
    216a:	68 96       	adiw	r28, 0x18	; 24
    216c:	e6 e0       	ldi	r30, 0x06	; 6
    216e:	0c 94 03 14 	jmp	0x2806	; 0x2806 <__epilogue_restores__+0x18>

00002172 <__gesf2>:
    2172:	a8 e1       	ldi	r26, 0x18	; 24
    2174:	b0 e0       	ldi	r27, 0x00	; 0
    2176:	ef eb       	ldi	r30, 0xBF	; 191
    2178:	f0 e1       	ldi	r31, 0x10	; 16
    217a:	0c 94 e7 13 	jmp	0x27ce	; 0x27ce <__prologue_saves__+0x18>
    217e:	69 83       	std	Y+1, r22	; 0x01
    2180:	7a 83       	std	Y+2, r23	; 0x02
    2182:	8b 83       	std	Y+3, r24	; 0x03
    2184:	9c 83       	std	Y+4, r25	; 0x04
    2186:	2d 83       	std	Y+5, r18	; 0x05
    2188:	3e 83       	std	Y+6, r19	; 0x06
    218a:	4f 83       	std	Y+7, r20	; 0x07
    218c:	58 87       	std	Y+8, r21	; 0x08
    218e:	89 e0       	ldi	r24, 0x09	; 9
    2190:	e8 2e       	mov	r14, r24
    2192:	f1 2c       	mov	r15, r1
    2194:	ec 0e       	add	r14, r28
    2196:	fd 1e       	adc	r15, r29
    2198:	ce 01       	movw	r24, r28
    219a:	01 96       	adiw	r24, 0x01	; 1
    219c:	b7 01       	movw	r22, r14
    219e:	0e 94 0a 13 	call	0x2614	; 0x2614 <__unpack_f>
    21a2:	8e 01       	movw	r16, r28
    21a4:	0f 5e       	subi	r16, 0xEF	; 239
    21a6:	1f 4f       	sbci	r17, 0xFF	; 255
    21a8:	ce 01       	movw	r24, r28
    21aa:	05 96       	adiw	r24, 0x05	; 5
    21ac:	b8 01       	movw	r22, r16
    21ae:	0e 94 0a 13 	call	0x2614	; 0x2614 <__unpack_f>
    21b2:	89 85       	ldd	r24, Y+9	; 0x09
    21b4:	82 30       	cpi	r24, 0x02	; 2
    21b6:	40 f0       	brcs	.+16     	; 0x21c8 <__gesf2+0x56>
    21b8:	89 89       	ldd	r24, Y+17	; 0x11
    21ba:	82 30       	cpi	r24, 0x02	; 2
    21bc:	28 f0       	brcs	.+10     	; 0x21c8 <__gesf2+0x56>
    21be:	c7 01       	movw	r24, r14
    21c0:	b8 01       	movw	r22, r16
    21c2:	0e 94 82 13 	call	0x2704	; 0x2704 <__fpcmp_parts_f>
    21c6:	01 c0       	rjmp	.+2      	; 0x21ca <__gesf2+0x58>
    21c8:	8f ef       	ldi	r24, 0xFF	; 255
    21ca:	68 96       	adiw	r28, 0x18	; 24
    21cc:	e6 e0       	ldi	r30, 0x06	; 6
    21ce:	0c 94 03 14 	jmp	0x2806	; 0x2806 <__epilogue_restores__+0x18>

000021d2 <__ltsf2>:
    21d2:	a8 e1       	ldi	r26, 0x18	; 24
    21d4:	b0 e0       	ldi	r27, 0x00	; 0
    21d6:	ef ee       	ldi	r30, 0xEF	; 239
    21d8:	f0 e1       	ldi	r31, 0x10	; 16
    21da:	0c 94 e7 13 	jmp	0x27ce	; 0x27ce <__prologue_saves__+0x18>
    21de:	69 83       	std	Y+1, r22	; 0x01
    21e0:	7a 83       	std	Y+2, r23	; 0x02
    21e2:	8b 83       	std	Y+3, r24	; 0x03
    21e4:	9c 83       	std	Y+4, r25	; 0x04
    21e6:	2d 83       	std	Y+5, r18	; 0x05
    21e8:	3e 83       	std	Y+6, r19	; 0x06
    21ea:	4f 83       	std	Y+7, r20	; 0x07
    21ec:	58 87       	std	Y+8, r21	; 0x08
    21ee:	89 e0       	ldi	r24, 0x09	; 9
    21f0:	e8 2e       	mov	r14, r24
    21f2:	f1 2c       	mov	r15, r1
    21f4:	ec 0e       	add	r14, r28
    21f6:	fd 1e       	adc	r15, r29
    21f8:	ce 01       	movw	r24, r28
    21fa:	01 96       	adiw	r24, 0x01	; 1
    21fc:	b7 01       	movw	r22, r14
    21fe:	0e 94 0a 13 	call	0x2614	; 0x2614 <__unpack_f>
    2202:	8e 01       	movw	r16, r28
    2204:	0f 5e       	subi	r16, 0xEF	; 239
    2206:	1f 4f       	sbci	r17, 0xFF	; 255
    2208:	ce 01       	movw	r24, r28
    220a:	05 96       	adiw	r24, 0x05	; 5
    220c:	b8 01       	movw	r22, r16
    220e:	0e 94 0a 13 	call	0x2614	; 0x2614 <__unpack_f>
    2212:	89 85       	ldd	r24, Y+9	; 0x09
    2214:	82 30       	cpi	r24, 0x02	; 2
    2216:	40 f0       	brcs	.+16     	; 0x2228 <__ltsf2+0x56>
    2218:	89 89       	ldd	r24, Y+17	; 0x11
    221a:	82 30       	cpi	r24, 0x02	; 2
    221c:	28 f0       	brcs	.+10     	; 0x2228 <__ltsf2+0x56>
    221e:	c7 01       	movw	r24, r14
    2220:	b8 01       	movw	r22, r16
    2222:	0e 94 82 13 	call	0x2704	; 0x2704 <__fpcmp_parts_f>
    2226:	01 c0       	rjmp	.+2      	; 0x222a <__ltsf2+0x58>
    2228:	81 e0       	ldi	r24, 0x01	; 1
    222a:	68 96       	adiw	r28, 0x18	; 24
    222c:	e6 e0       	ldi	r30, 0x06	; 6
    222e:	0c 94 03 14 	jmp	0x2806	; 0x2806 <__epilogue_restores__+0x18>

00002232 <__fixsfsi>:
    2232:	ac e0       	ldi	r26, 0x0C	; 12
    2234:	b0 e0       	ldi	r27, 0x00	; 0
    2236:	ef e1       	ldi	r30, 0x1F	; 31
    2238:	f1 e1       	ldi	r31, 0x11	; 17
    223a:	0c 94 eb 13 	jmp	0x27d6	; 0x27d6 <__prologue_saves__+0x20>
    223e:	69 83       	std	Y+1, r22	; 0x01
    2240:	7a 83       	std	Y+2, r23	; 0x02
    2242:	8b 83       	std	Y+3, r24	; 0x03
    2244:	9c 83       	std	Y+4, r25	; 0x04
    2246:	ce 01       	movw	r24, r28
    2248:	01 96       	adiw	r24, 0x01	; 1
    224a:	be 01       	movw	r22, r28
    224c:	6b 5f       	subi	r22, 0xFB	; 251
    224e:	7f 4f       	sbci	r23, 0xFF	; 255
    2250:	0e 94 0a 13 	call	0x2614	; 0x2614 <__unpack_f>
    2254:	8d 81       	ldd	r24, Y+5	; 0x05
    2256:	82 30       	cpi	r24, 0x02	; 2
    2258:	61 f1       	breq	.+88     	; 0x22b2 <__fixsfsi+0x80>
    225a:	82 30       	cpi	r24, 0x02	; 2
    225c:	50 f1       	brcs	.+84     	; 0x22b2 <__fixsfsi+0x80>
    225e:	84 30       	cpi	r24, 0x04	; 4
    2260:	21 f4       	brne	.+8      	; 0x226a <__fixsfsi+0x38>
    2262:	8e 81       	ldd	r24, Y+6	; 0x06
    2264:	88 23       	and	r24, r24
    2266:	51 f1       	breq	.+84     	; 0x22bc <__fixsfsi+0x8a>
    2268:	2e c0       	rjmp	.+92     	; 0x22c6 <__fixsfsi+0x94>
    226a:	2f 81       	ldd	r18, Y+7	; 0x07
    226c:	38 85       	ldd	r19, Y+8	; 0x08
    226e:	37 fd       	sbrc	r19, 7
    2270:	20 c0       	rjmp	.+64     	; 0x22b2 <__fixsfsi+0x80>
    2272:	6e 81       	ldd	r22, Y+6	; 0x06
    2274:	2f 31       	cpi	r18, 0x1F	; 31
    2276:	31 05       	cpc	r19, r1
    2278:	1c f0       	brlt	.+6      	; 0x2280 <__fixsfsi+0x4e>
    227a:	66 23       	and	r22, r22
    227c:	f9 f0       	breq	.+62     	; 0x22bc <__fixsfsi+0x8a>
    227e:	23 c0       	rjmp	.+70     	; 0x22c6 <__fixsfsi+0x94>
    2280:	8e e1       	ldi	r24, 0x1E	; 30
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	82 1b       	sub	r24, r18
    2286:	93 0b       	sbc	r25, r19
    2288:	29 85       	ldd	r18, Y+9	; 0x09
    228a:	3a 85       	ldd	r19, Y+10	; 0x0a
    228c:	4b 85       	ldd	r20, Y+11	; 0x0b
    228e:	5c 85       	ldd	r21, Y+12	; 0x0c
    2290:	04 c0       	rjmp	.+8      	; 0x229a <__fixsfsi+0x68>
    2292:	56 95       	lsr	r21
    2294:	47 95       	ror	r20
    2296:	37 95       	ror	r19
    2298:	27 95       	ror	r18
    229a:	8a 95       	dec	r24
    229c:	d2 f7       	brpl	.-12     	; 0x2292 <__fixsfsi+0x60>
    229e:	66 23       	and	r22, r22
    22a0:	b1 f0       	breq	.+44     	; 0x22ce <__fixsfsi+0x9c>
    22a2:	50 95       	com	r21
    22a4:	40 95       	com	r20
    22a6:	30 95       	com	r19
    22a8:	21 95       	neg	r18
    22aa:	3f 4f       	sbci	r19, 0xFF	; 255
    22ac:	4f 4f       	sbci	r20, 0xFF	; 255
    22ae:	5f 4f       	sbci	r21, 0xFF	; 255
    22b0:	0e c0       	rjmp	.+28     	; 0x22ce <__fixsfsi+0x9c>
    22b2:	20 e0       	ldi	r18, 0x00	; 0
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	40 e0       	ldi	r20, 0x00	; 0
    22b8:	50 e0       	ldi	r21, 0x00	; 0
    22ba:	09 c0       	rjmp	.+18     	; 0x22ce <__fixsfsi+0x9c>
    22bc:	2f ef       	ldi	r18, 0xFF	; 255
    22be:	3f ef       	ldi	r19, 0xFF	; 255
    22c0:	4f ef       	ldi	r20, 0xFF	; 255
    22c2:	5f e7       	ldi	r21, 0x7F	; 127
    22c4:	04 c0       	rjmp	.+8      	; 0x22ce <__fixsfsi+0x9c>
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	40 e0       	ldi	r20, 0x00	; 0
    22cc:	50 e8       	ldi	r21, 0x80	; 128
    22ce:	b9 01       	movw	r22, r18
    22d0:	ca 01       	movw	r24, r20
    22d2:	2c 96       	adiw	r28, 0x0c	; 12
    22d4:	e2 e0       	ldi	r30, 0x02	; 2
    22d6:	0c 94 07 14 	jmp	0x280e	; 0x280e <__epilogue_restores__+0x20>

000022da <__floatunsisf>:
    22da:	a8 e0       	ldi	r26, 0x08	; 8
    22dc:	b0 e0       	ldi	r27, 0x00	; 0
    22de:	e3 e7       	ldi	r30, 0x73	; 115
    22e0:	f1 e1       	ldi	r31, 0x11	; 17
    22e2:	0c 94 e3 13 	jmp	0x27c6	; 0x27c6 <__prologue_saves__+0x10>
    22e6:	7b 01       	movw	r14, r22
    22e8:	8c 01       	movw	r16, r24
    22ea:	61 15       	cp	r22, r1
    22ec:	71 05       	cpc	r23, r1
    22ee:	81 05       	cpc	r24, r1
    22f0:	91 05       	cpc	r25, r1
    22f2:	19 f4       	brne	.+6      	; 0x22fa <__floatunsisf+0x20>
    22f4:	82 e0       	ldi	r24, 0x02	; 2
    22f6:	89 83       	std	Y+1, r24	; 0x01
    22f8:	60 c0       	rjmp	.+192    	; 0x23ba <__floatunsisf+0xe0>
    22fa:	83 e0       	ldi	r24, 0x03	; 3
    22fc:	89 83       	std	Y+1, r24	; 0x01
    22fe:	8e e1       	ldi	r24, 0x1E	; 30
    2300:	c8 2e       	mov	r12, r24
    2302:	d1 2c       	mov	r13, r1
    2304:	dc 82       	std	Y+4, r13	; 0x04
    2306:	cb 82       	std	Y+3, r12	; 0x03
    2308:	ed 82       	std	Y+5, r14	; 0x05
    230a:	fe 82       	std	Y+6, r15	; 0x06
    230c:	0f 83       	std	Y+7, r16	; 0x07
    230e:	18 87       	std	Y+8, r17	; 0x08
    2310:	c8 01       	movw	r24, r16
    2312:	b7 01       	movw	r22, r14
    2314:	0e 94 e6 11 	call	0x23cc	; 0x23cc <__clzsi2>
    2318:	fc 01       	movw	r30, r24
    231a:	31 97       	sbiw	r30, 0x01	; 1
    231c:	f7 ff       	sbrs	r31, 7
    231e:	3b c0       	rjmp	.+118    	; 0x2396 <__floatunsisf+0xbc>
    2320:	22 27       	eor	r18, r18
    2322:	33 27       	eor	r19, r19
    2324:	2e 1b       	sub	r18, r30
    2326:	3f 0b       	sbc	r19, r31
    2328:	57 01       	movw	r10, r14
    232a:	68 01       	movw	r12, r16
    232c:	02 2e       	mov	r0, r18
    232e:	04 c0       	rjmp	.+8      	; 0x2338 <__floatunsisf+0x5e>
    2330:	d6 94       	lsr	r13
    2332:	c7 94       	ror	r12
    2334:	b7 94       	ror	r11
    2336:	a7 94       	ror	r10
    2338:	0a 94       	dec	r0
    233a:	d2 f7       	brpl	.-12     	; 0x2330 <__floatunsisf+0x56>
    233c:	40 e0       	ldi	r20, 0x00	; 0
    233e:	50 e0       	ldi	r21, 0x00	; 0
    2340:	60 e0       	ldi	r22, 0x00	; 0
    2342:	70 e0       	ldi	r23, 0x00	; 0
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	a0 e0       	ldi	r26, 0x00	; 0
    234a:	b0 e0       	ldi	r27, 0x00	; 0
    234c:	04 c0       	rjmp	.+8      	; 0x2356 <__floatunsisf+0x7c>
    234e:	88 0f       	add	r24, r24
    2350:	99 1f       	adc	r25, r25
    2352:	aa 1f       	adc	r26, r26
    2354:	bb 1f       	adc	r27, r27
    2356:	2a 95       	dec	r18
    2358:	d2 f7       	brpl	.-12     	; 0x234e <__floatunsisf+0x74>
    235a:	01 97       	sbiw	r24, 0x01	; 1
    235c:	a1 09       	sbc	r26, r1
    235e:	b1 09       	sbc	r27, r1
    2360:	8e 21       	and	r24, r14
    2362:	9f 21       	and	r25, r15
    2364:	a0 23       	and	r26, r16
    2366:	b1 23       	and	r27, r17
    2368:	00 97       	sbiw	r24, 0x00	; 0
    236a:	a1 05       	cpc	r26, r1
    236c:	b1 05       	cpc	r27, r1
    236e:	21 f0       	breq	.+8      	; 0x2378 <__floatunsisf+0x9e>
    2370:	41 e0       	ldi	r20, 0x01	; 1
    2372:	50 e0       	ldi	r21, 0x00	; 0
    2374:	60 e0       	ldi	r22, 0x00	; 0
    2376:	70 e0       	ldi	r23, 0x00	; 0
    2378:	4a 29       	or	r20, r10
    237a:	5b 29       	or	r21, r11
    237c:	6c 29       	or	r22, r12
    237e:	7d 29       	or	r23, r13
    2380:	4d 83       	std	Y+5, r20	; 0x05
    2382:	5e 83       	std	Y+6, r21	; 0x06
    2384:	6f 83       	std	Y+7, r22	; 0x07
    2386:	78 87       	std	Y+8, r23	; 0x08
    2388:	8e e1       	ldi	r24, 0x1E	; 30
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	8e 1b       	sub	r24, r30
    238e:	9f 0b       	sbc	r25, r31
    2390:	9c 83       	std	Y+4, r25	; 0x04
    2392:	8b 83       	std	Y+3, r24	; 0x03
    2394:	12 c0       	rjmp	.+36     	; 0x23ba <__floatunsisf+0xe0>
    2396:	30 97       	sbiw	r30, 0x00	; 0
    2398:	81 f0       	breq	.+32     	; 0x23ba <__floatunsisf+0xe0>
    239a:	0e 2e       	mov	r0, r30
    239c:	04 c0       	rjmp	.+8      	; 0x23a6 <__floatunsisf+0xcc>
    239e:	ee 0c       	add	r14, r14
    23a0:	ff 1c       	adc	r15, r15
    23a2:	00 1f       	adc	r16, r16
    23a4:	11 1f       	adc	r17, r17
    23a6:	0a 94       	dec	r0
    23a8:	d2 f7       	brpl	.-12     	; 0x239e <__floatunsisf+0xc4>
    23aa:	ed 82       	std	Y+5, r14	; 0x05
    23ac:	fe 82       	std	Y+6, r15	; 0x06
    23ae:	0f 83       	std	Y+7, r16	; 0x07
    23b0:	18 87       	std	Y+8, r17	; 0x08
    23b2:	ce 1a       	sub	r12, r30
    23b4:	df 0a       	sbc	r13, r31
    23b6:	dc 82       	std	Y+4, r13	; 0x04
    23b8:	cb 82       	std	Y+3, r12	; 0x03
    23ba:	1a 82       	std	Y+2, r1	; 0x02
    23bc:	ce 01       	movw	r24, r28
    23be:	01 96       	adiw	r24, 0x01	; 1
    23c0:	0e 94 35 12 	call	0x246a	; 0x246a <__pack_f>
    23c4:	28 96       	adiw	r28, 0x08	; 8
    23c6:	ea e0       	ldi	r30, 0x0A	; 10
    23c8:	0c 94 ff 13 	jmp	0x27fe	; 0x27fe <__epilogue_restores__+0x10>

000023cc <__clzsi2>:
    23cc:	ef 92       	push	r14
    23ce:	ff 92       	push	r15
    23d0:	0f 93       	push	r16
    23d2:	1f 93       	push	r17
    23d4:	7b 01       	movw	r14, r22
    23d6:	8c 01       	movw	r16, r24
    23d8:	80 e0       	ldi	r24, 0x00	; 0
    23da:	e8 16       	cp	r14, r24
    23dc:	80 e0       	ldi	r24, 0x00	; 0
    23de:	f8 06       	cpc	r15, r24
    23e0:	81 e0       	ldi	r24, 0x01	; 1
    23e2:	08 07       	cpc	r16, r24
    23e4:	80 e0       	ldi	r24, 0x00	; 0
    23e6:	18 07       	cpc	r17, r24
    23e8:	88 f4       	brcc	.+34     	; 0x240c <__clzsi2+0x40>
    23ea:	8f ef       	ldi	r24, 0xFF	; 255
    23ec:	e8 16       	cp	r14, r24
    23ee:	f1 04       	cpc	r15, r1
    23f0:	01 05       	cpc	r16, r1
    23f2:	11 05       	cpc	r17, r1
    23f4:	31 f0       	breq	.+12     	; 0x2402 <__clzsi2+0x36>
    23f6:	28 f0       	brcs	.+10     	; 0x2402 <__clzsi2+0x36>
    23f8:	88 e0       	ldi	r24, 0x08	; 8
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	a0 e0       	ldi	r26, 0x00	; 0
    23fe:	b0 e0       	ldi	r27, 0x00	; 0
    2400:	17 c0       	rjmp	.+46     	; 0x2430 <__clzsi2+0x64>
    2402:	80 e0       	ldi	r24, 0x00	; 0
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	a0 e0       	ldi	r26, 0x00	; 0
    2408:	b0 e0       	ldi	r27, 0x00	; 0
    240a:	12 c0       	rjmp	.+36     	; 0x2430 <__clzsi2+0x64>
    240c:	80 e0       	ldi	r24, 0x00	; 0
    240e:	e8 16       	cp	r14, r24
    2410:	80 e0       	ldi	r24, 0x00	; 0
    2412:	f8 06       	cpc	r15, r24
    2414:	80 e0       	ldi	r24, 0x00	; 0
    2416:	08 07       	cpc	r16, r24
    2418:	81 e0       	ldi	r24, 0x01	; 1
    241a:	18 07       	cpc	r17, r24
    241c:	28 f0       	brcs	.+10     	; 0x2428 <__clzsi2+0x5c>
    241e:	88 e1       	ldi	r24, 0x18	; 24
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	a0 e0       	ldi	r26, 0x00	; 0
    2424:	b0 e0       	ldi	r27, 0x00	; 0
    2426:	04 c0       	rjmp	.+8      	; 0x2430 <__clzsi2+0x64>
    2428:	80 e1       	ldi	r24, 0x10	; 16
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	a0 e0       	ldi	r26, 0x00	; 0
    242e:	b0 e0       	ldi	r27, 0x00	; 0
    2430:	20 e2       	ldi	r18, 0x20	; 32
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	40 e0       	ldi	r20, 0x00	; 0
    2436:	50 e0       	ldi	r21, 0x00	; 0
    2438:	28 1b       	sub	r18, r24
    243a:	39 0b       	sbc	r19, r25
    243c:	4a 0b       	sbc	r20, r26
    243e:	5b 0b       	sbc	r21, r27
    2440:	04 c0       	rjmp	.+8      	; 0x244a <__clzsi2+0x7e>
    2442:	16 95       	lsr	r17
    2444:	07 95       	ror	r16
    2446:	f7 94       	ror	r15
    2448:	e7 94       	ror	r14
    244a:	8a 95       	dec	r24
    244c:	d2 f7       	brpl	.-12     	; 0x2442 <__clzsi2+0x76>
    244e:	f7 01       	movw	r30, r14
    2450:	e1 5e       	subi	r30, 0xE1	; 225
    2452:	fe 4f       	sbci	r31, 0xFE	; 254
    2454:	80 81       	ld	r24, Z
    2456:	28 1b       	sub	r18, r24
    2458:	31 09       	sbc	r19, r1
    245a:	41 09       	sbc	r20, r1
    245c:	51 09       	sbc	r21, r1
    245e:	c9 01       	movw	r24, r18
    2460:	1f 91       	pop	r17
    2462:	0f 91       	pop	r16
    2464:	ff 90       	pop	r15
    2466:	ef 90       	pop	r14
    2468:	08 95       	ret

0000246a <__pack_f>:
    246a:	df 92       	push	r13
    246c:	ef 92       	push	r14
    246e:	ff 92       	push	r15
    2470:	0f 93       	push	r16
    2472:	1f 93       	push	r17
    2474:	fc 01       	movw	r30, r24
    2476:	e4 80       	ldd	r14, Z+4	; 0x04
    2478:	f5 80       	ldd	r15, Z+5	; 0x05
    247a:	06 81       	ldd	r16, Z+6	; 0x06
    247c:	17 81       	ldd	r17, Z+7	; 0x07
    247e:	d1 80       	ldd	r13, Z+1	; 0x01
    2480:	80 81       	ld	r24, Z
    2482:	82 30       	cpi	r24, 0x02	; 2
    2484:	48 f4       	brcc	.+18     	; 0x2498 <__pack_f+0x2e>
    2486:	80 e0       	ldi	r24, 0x00	; 0
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	a0 e1       	ldi	r26, 0x10	; 16
    248c:	b0 e0       	ldi	r27, 0x00	; 0
    248e:	e8 2a       	or	r14, r24
    2490:	f9 2a       	or	r15, r25
    2492:	0a 2b       	or	r16, r26
    2494:	1b 2b       	or	r17, r27
    2496:	a5 c0       	rjmp	.+330    	; 0x25e2 <__pack_f+0x178>
    2498:	84 30       	cpi	r24, 0x04	; 4
    249a:	09 f4       	brne	.+2      	; 0x249e <__pack_f+0x34>
    249c:	9f c0       	rjmp	.+318    	; 0x25dc <__pack_f+0x172>
    249e:	82 30       	cpi	r24, 0x02	; 2
    24a0:	21 f4       	brne	.+8      	; 0x24aa <__pack_f+0x40>
    24a2:	ee 24       	eor	r14, r14
    24a4:	ff 24       	eor	r15, r15
    24a6:	87 01       	movw	r16, r14
    24a8:	05 c0       	rjmp	.+10     	; 0x24b4 <__pack_f+0x4a>
    24aa:	e1 14       	cp	r14, r1
    24ac:	f1 04       	cpc	r15, r1
    24ae:	01 05       	cpc	r16, r1
    24b0:	11 05       	cpc	r17, r1
    24b2:	19 f4       	brne	.+6      	; 0x24ba <__pack_f+0x50>
    24b4:	e0 e0       	ldi	r30, 0x00	; 0
    24b6:	f0 e0       	ldi	r31, 0x00	; 0
    24b8:	96 c0       	rjmp	.+300    	; 0x25e6 <__pack_f+0x17c>
    24ba:	62 81       	ldd	r22, Z+2	; 0x02
    24bc:	73 81       	ldd	r23, Z+3	; 0x03
    24be:	9f ef       	ldi	r25, 0xFF	; 255
    24c0:	62 38       	cpi	r22, 0x82	; 130
    24c2:	79 07       	cpc	r23, r25
    24c4:	0c f0       	brlt	.+2      	; 0x24c8 <__pack_f+0x5e>
    24c6:	5b c0       	rjmp	.+182    	; 0x257e <__pack_f+0x114>
    24c8:	22 e8       	ldi	r18, 0x82	; 130
    24ca:	3f ef       	ldi	r19, 0xFF	; 255
    24cc:	26 1b       	sub	r18, r22
    24ce:	37 0b       	sbc	r19, r23
    24d0:	2a 31       	cpi	r18, 0x1A	; 26
    24d2:	31 05       	cpc	r19, r1
    24d4:	2c f0       	brlt	.+10     	; 0x24e0 <__pack_f+0x76>
    24d6:	20 e0       	ldi	r18, 0x00	; 0
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	40 e0       	ldi	r20, 0x00	; 0
    24dc:	50 e0       	ldi	r21, 0x00	; 0
    24de:	2a c0       	rjmp	.+84     	; 0x2534 <__pack_f+0xca>
    24e0:	b8 01       	movw	r22, r16
    24e2:	a7 01       	movw	r20, r14
    24e4:	02 2e       	mov	r0, r18
    24e6:	04 c0       	rjmp	.+8      	; 0x24f0 <__pack_f+0x86>
    24e8:	76 95       	lsr	r23
    24ea:	67 95       	ror	r22
    24ec:	57 95       	ror	r21
    24ee:	47 95       	ror	r20
    24f0:	0a 94       	dec	r0
    24f2:	d2 f7       	brpl	.-12     	; 0x24e8 <__pack_f+0x7e>
    24f4:	81 e0       	ldi	r24, 0x01	; 1
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	a0 e0       	ldi	r26, 0x00	; 0
    24fa:	b0 e0       	ldi	r27, 0x00	; 0
    24fc:	04 c0       	rjmp	.+8      	; 0x2506 <__pack_f+0x9c>
    24fe:	88 0f       	add	r24, r24
    2500:	99 1f       	adc	r25, r25
    2502:	aa 1f       	adc	r26, r26
    2504:	bb 1f       	adc	r27, r27
    2506:	2a 95       	dec	r18
    2508:	d2 f7       	brpl	.-12     	; 0x24fe <__pack_f+0x94>
    250a:	01 97       	sbiw	r24, 0x01	; 1
    250c:	a1 09       	sbc	r26, r1
    250e:	b1 09       	sbc	r27, r1
    2510:	8e 21       	and	r24, r14
    2512:	9f 21       	and	r25, r15
    2514:	a0 23       	and	r26, r16
    2516:	b1 23       	and	r27, r17
    2518:	00 97       	sbiw	r24, 0x00	; 0
    251a:	a1 05       	cpc	r26, r1
    251c:	b1 05       	cpc	r27, r1
    251e:	21 f0       	breq	.+8      	; 0x2528 <__pack_f+0xbe>
    2520:	81 e0       	ldi	r24, 0x01	; 1
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	a0 e0       	ldi	r26, 0x00	; 0
    2526:	b0 e0       	ldi	r27, 0x00	; 0
    2528:	9a 01       	movw	r18, r20
    252a:	ab 01       	movw	r20, r22
    252c:	28 2b       	or	r18, r24
    252e:	39 2b       	or	r19, r25
    2530:	4a 2b       	or	r20, r26
    2532:	5b 2b       	or	r21, r27
    2534:	da 01       	movw	r26, r20
    2536:	c9 01       	movw	r24, r18
    2538:	8f 77       	andi	r24, 0x7F	; 127
    253a:	90 70       	andi	r25, 0x00	; 0
    253c:	a0 70       	andi	r26, 0x00	; 0
    253e:	b0 70       	andi	r27, 0x00	; 0
    2540:	80 34       	cpi	r24, 0x40	; 64
    2542:	91 05       	cpc	r25, r1
    2544:	a1 05       	cpc	r26, r1
    2546:	b1 05       	cpc	r27, r1
    2548:	39 f4       	brne	.+14     	; 0x2558 <__pack_f+0xee>
    254a:	27 ff       	sbrs	r18, 7
    254c:	09 c0       	rjmp	.+18     	; 0x2560 <__pack_f+0xf6>
    254e:	20 5c       	subi	r18, 0xC0	; 192
    2550:	3f 4f       	sbci	r19, 0xFF	; 255
    2552:	4f 4f       	sbci	r20, 0xFF	; 255
    2554:	5f 4f       	sbci	r21, 0xFF	; 255
    2556:	04 c0       	rjmp	.+8      	; 0x2560 <__pack_f+0xf6>
    2558:	21 5c       	subi	r18, 0xC1	; 193
    255a:	3f 4f       	sbci	r19, 0xFF	; 255
    255c:	4f 4f       	sbci	r20, 0xFF	; 255
    255e:	5f 4f       	sbci	r21, 0xFF	; 255
    2560:	e0 e0       	ldi	r30, 0x00	; 0
    2562:	f0 e0       	ldi	r31, 0x00	; 0
    2564:	20 30       	cpi	r18, 0x00	; 0
    2566:	a0 e0       	ldi	r26, 0x00	; 0
    2568:	3a 07       	cpc	r19, r26
    256a:	a0 e0       	ldi	r26, 0x00	; 0
    256c:	4a 07       	cpc	r20, r26
    256e:	a0 e4       	ldi	r26, 0x40	; 64
    2570:	5a 07       	cpc	r21, r26
    2572:	10 f0       	brcs	.+4      	; 0x2578 <__pack_f+0x10e>
    2574:	e1 e0       	ldi	r30, 0x01	; 1
    2576:	f0 e0       	ldi	r31, 0x00	; 0
    2578:	79 01       	movw	r14, r18
    257a:	8a 01       	movw	r16, r20
    257c:	27 c0       	rjmp	.+78     	; 0x25cc <__pack_f+0x162>
    257e:	60 38       	cpi	r22, 0x80	; 128
    2580:	71 05       	cpc	r23, r1
    2582:	64 f5       	brge	.+88     	; 0x25dc <__pack_f+0x172>
    2584:	fb 01       	movw	r30, r22
    2586:	e1 58       	subi	r30, 0x81	; 129
    2588:	ff 4f       	sbci	r31, 0xFF	; 255
    258a:	d8 01       	movw	r26, r16
    258c:	c7 01       	movw	r24, r14
    258e:	8f 77       	andi	r24, 0x7F	; 127
    2590:	90 70       	andi	r25, 0x00	; 0
    2592:	a0 70       	andi	r26, 0x00	; 0
    2594:	b0 70       	andi	r27, 0x00	; 0
    2596:	80 34       	cpi	r24, 0x40	; 64
    2598:	91 05       	cpc	r25, r1
    259a:	a1 05       	cpc	r26, r1
    259c:	b1 05       	cpc	r27, r1
    259e:	39 f4       	brne	.+14     	; 0x25ae <__pack_f+0x144>
    25a0:	e7 fe       	sbrs	r14, 7
    25a2:	0d c0       	rjmp	.+26     	; 0x25be <__pack_f+0x154>
    25a4:	80 e4       	ldi	r24, 0x40	; 64
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	a0 e0       	ldi	r26, 0x00	; 0
    25aa:	b0 e0       	ldi	r27, 0x00	; 0
    25ac:	04 c0       	rjmp	.+8      	; 0x25b6 <__pack_f+0x14c>
    25ae:	8f e3       	ldi	r24, 0x3F	; 63
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	a0 e0       	ldi	r26, 0x00	; 0
    25b4:	b0 e0       	ldi	r27, 0x00	; 0
    25b6:	e8 0e       	add	r14, r24
    25b8:	f9 1e       	adc	r15, r25
    25ba:	0a 1f       	adc	r16, r26
    25bc:	1b 1f       	adc	r17, r27
    25be:	17 ff       	sbrs	r17, 7
    25c0:	05 c0       	rjmp	.+10     	; 0x25cc <__pack_f+0x162>
    25c2:	16 95       	lsr	r17
    25c4:	07 95       	ror	r16
    25c6:	f7 94       	ror	r15
    25c8:	e7 94       	ror	r14
    25ca:	31 96       	adiw	r30, 0x01	; 1
    25cc:	87 e0       	ldi	r24, 0x07	; 7
    25ce:	16 95       	lsr	r17
    25d0:	07 95       	ror	r16
    25d2:	f7 94       	ror	r15
    25d4:	e7 94       	ror	r14
    25d6:	8a 95       	dec	r24
    25d8:	d1 f7       	brne	.-12     	; 0x25ce <__pack_f+0x164>
    25da:	05 c0       	rjmp	.+10     	; 0x25e6 <__pack_f+0x17c>
    25dc:	ee 24       	eor	r14, r14
    25de:	ff 24       	eor	r15, r15
    25e0:	87 01       	movw	r16, r14
    25e2:	ef ef       	ldi	r30, 0xFF	; 255
    25e4:	f0 e0       	ldi	r31, 0x00	; 0
    25e6:	6e 2f       	mov	r22, r30
    25e8:	67 95       	ror	r22
    25ea:	66 27       	eor	r22, r22
    25ec:	67 95       	ror	r22
    25ee:	90 2f       	mov	r25, r16
    25f0:	9f 77       	andi	r25, 0x7F	; 127
    25f2:	d7 94       	ror	r13
    25f4:	dd 24       	eor	r13, r13
    25f6:	d7 94       	ror	r13
    25f8:	8e 2f       	mov	r24, r30
    25fa:	86 95       	lsr	r24
    25fc:	49 2f       	mov	r20, r25
    25fe:	46 2b       	or	r20, r22
    2600:	58 2f       	mov	r21, r24
    2602:	5d 29       	or	r21, r13
    2604:	b7 01       	movw	r22, r14
    2606:	ca 01       	movw	r24, r20
    2608:	1f 91       	pop	r17
    260a:	0f 91       	pop	r16
    260c:	ff 90       	pop	r15
    260e:	ef 90       	pop	r14
    2610:	df 90       	pop	r13
    2612:	08 95       	ret

00002614 <__unpack_f>:
    2614:	fc 01       	movw	r30, r24
    2616:	db 01       	movw	r26, r22
    2618:	40 81       	ld	r20, Z
    261a:	51 81       	ldd	r21, Z+1	; 0x01
    261c:	22 81       	ldd	r18, Z+2	; 0x02
    261e:	62 2f       	mov	r22, r18
    2620:	6f 77       	andi	r22, 0x7F	; 127
    2622:	70 e0       	ldi	r23, 0x00	; 0
    2624:	22 1f       	adc	r18, r18
    2626:	22 27       	eor	r18, r18
    2628:	22 1f       	adc	r18, r18
    262a:	93 81       	ldd	r25, Z+3	; 0x03
    262c:	89 2f       	mov	r24, r25
    262e:	88 0f       	add	r24, r24
    2630:	82 2b       	or	r24, r18
    2632:	28 2f       	mov	r18, r24
    2634:	30 e0       	ldi	r19, 0x00	; 0
    2636:	99 1f       	adc	r25, r25
    2638:	99 27       	eor	r25, r25
    263a:	99 1f       	adc	r25, r25
    263c:	11 96       	adiw	r26, 0x01	; 1
    263e:	9c 93       	st	X, r25
    2640:	11 97       	sbiw	r26, 0x01	; 1
    2642:	21 15       	cp	r18, r1
    2644:	31 05       	cpc	r19, r1
    2646:	a9 f5       	brne	.+106    	; 0x26b2 <__unpack_f+0x9e>
    2648:	41 15       	cp	r20, r1
    264a:	51 05       	cpc	r21, r1
    264c:	61 05       	cpc	r22, r1
    264e:	71 05       	cpc	r23, r1
    2650:	11 f4       	brne	.+4      	; 0x2656 <__unpack_f+0x42>
    2652:	82 e0       	ldi	r24, 0x02	; 2
    2654:	37 c0       	rjmp	.+110    	; 0x26c4 <__unpack_f+0xb0>
    2656:	82 e8       	ldi	r24, 0x82	; 130
    2658:	9f ef       	ldi	r25, 0xFF	; 255
    265a:	13 96       	adiw	r26, 0x03	; 3
    265c:	9c 93       	st	X, r25
    265e:	8e 93       	st	-X, r24
    2660:	12 97       	sbiw	r26, 0x02	; 2
    2662:	9a 01       	movw	r18, r20
    2664:	ab 01       	movw	r20, r22
    2666:	67 e0       	ldi	r22, 0x07	; 7
    2668:	22 0f       	add	r18, r18
    266a:	33 1f       	adc	r19, r19
    266c:	44 1f       	adc	r20, r20
    266e:	55 1f       	adc	r21, r21
    2670:	6a 95       	dec	r22
    2672:	d1 f7       	brne	.-12     	; 0x2668 <__unpack_f+0x54>
    2674:	83 e0       	ldi	r24, 0x03	; 3
    2676:	8c 93       	st	X, r24
    2678:	0d c0       	rjmp	.+26     	; 0x2694 <__unpack_f+0x80>
    267a:	22 0f       	add	r18, r18
    267c:	33 1f       	adc	r19, r19
    267e:	44 1f       	adc	r20, r20
    2680:	55 1f       	adc	r21, r21
    2682:	12 96       	adiw	r26, 0x02	; 2
    2684:	8d 91       	ld	r24, X+
    2686:	9c 91       	ld	r25, X
    2688:	13 97       	sbiw	r26, 0x03	; 3
    268a:	01 97       	sbiw	r24, 0x01	; 1
    268c:	13 96       	adiw	r26, 0x03	; 3
    268e:	9c 93       	st	X, r25
    2690:	8e 93       	st	-X, r24
    2692:	12 97       	sbiw	r26, 0x02	; 2
    2694:	20 30       	cpi	r18, 0x00	; 0
    2696:	80 e0       	ldi	r24, 0x00	; 0
    2698:	38 07       	cpc	r19, r24
    269a:	80 e0       	ldi	r24, 0x00	; 0
    269c:	48 07       	cpc	r20, r24
    269e:	80 e4       	ldi	r24, 0x40	; 64
    26a0:	58 07       	cpc	r21, r24
    26a2:	58 f3       	brcs	.-42     	; 0x267a <__unpack_f+0x66>
    26a4:	14 96       	adiw	r26, 0x04	; 4
    26a6:	2d 93       	st	X+, r18
    26a8:	3d 93       	st	X+, r19
    26aa:	4d 93       	st	X+, r20
    26ac:	5c 93       	st	X, r21
    26ae:	17 97       	sbiw	r26, 0x07	; 7
    26b0:	08 95       	ret
    26b2:	2f 3f       	cpi	r18, 0xFF	; 255
    26b4:	31 05       	cpc	r19, r1
    26b6:	79 f4       	brne	.+30     	; 0x26d6 <__unpack_f+0xc2>
    26b8:	41 15       	cp	r20, r1
    26ba:	51 05       	cpc	r21, r1
    26bc:	61 05       	cpc	r22, r1
    26be:	71 05       	cpc	r23, r1
    26c0:	19 f4       	brne	.+6      	; 0x26c8 <__unpack_f+0xb4>
    26c2:	84 e0       	ldi	r24, 0x04	; 4
    26c4:	8c 93       	st	X, r24
    26c6:	08 95       	ret
    26c8:	64 ff       	sbrs	r22, 4
    26ca:	03 c0       	rjmp	.+6      	; 0x26d2 <__unpack_f+0xbe>
    26cc:	81 e0       	ldi	r24, 0x01	; 1
    26ce:	8c 93       	st	X, r24
    26d0:	12 c0       	rjmp	.+36     	; 0x26f6 <__unpack_f+0xe2>
    26d2:	1c 92       	st	X, r1
    26d4:	10 c0       	rjmp	.+32     	; 0x26f6 <__unpack_f+0xe2>
    26d6:	2f 57       	subi	r18, 0x7F	; 127
    26d8:	30 40       	sbci	r19, 0x00	; 0
    26da:	13 96       	adiw	r26, 0x03	; 3
    26dc:	3c 93       	st	X, r19
    26de:	2e 93       	st	-X, r18
    26e0:	12 97       	sbiw	r26, 0x02	; 2
    26e2:	83 e0       	ldi	r24, 0x03	; 3
    26e4:	8c 93       	st	X, r24
    26e6:	87 e0       	ldi	r24, 0x07	; 7
    26e8:	44 0f       	add	r20, r20
    26ea:	55 1f       	adc	r21, r21
    26ec:	66 1f       	adc	r22, r22
    26ee:	77 1f       	adc	r23, r23
    26f0:	8a 95       	dec	r24
    26f2:	d1 f7       	brne	.-12     	; 0x26e8 <__unpack_f+0xd4>
    26f4:	70 64       	ori	r23, 0x40	; 64
    26f6:	14 96       	adiw	r26, 0x04	; 4
    26f8:	4d 93       	st	X+, r20
    26fa:	5d 93       	st	X+, r21
    26fc:	6d 93       	st	X+, r22
    26fe:	7c 93       	st	X, r23
    2700:	17 97       	sbiw	r26, 0x07	; 7
    2702:	08 95       	ret

00002704 <__fpcmp_parts_f>:
    2704:	1f 93       	push	r17
    2706:	dc 01       	movw	r26, r24
    2708:	fb 01       	movw	r30, r22
    270a:	9c 91       	ld	r25, X
    270c:	92 30       	cpi	r25, 0x02	; 2
    270e:	08 f4       	brcc	.+2      	; 0x2712 <__fpcmp_parts_f+0xe>
    2710:	47 c0       	rjmp	.+142    	; 0x27a0 <__fpcmp_parts_f+0x9c>
    2712:	80 81       	ld	r24, Z
    2714:	82 30       	cpi	r24, 0x02	; 2
    2716:	08 f4       	brcc	.+2      	; 0x271a <__fpcmp_parts_f+0x16>
    2718:	43 c0       	rjmp	.+134    	; 0x27a0 <__fpcmp_parts_f+0x9c>
    271a:	94 30       	cpi	r25, 0x04	; 4
    271c:	51 f4       	brne	.+20     	; 0x2732 <__fpcmp_parts_f+0x2e>
    271e:	11 96       	adiw	r26, 0x01	; 1
    2720:	1c 91       	ld	r17, X
    2722:	84 30       	cpi	r24, 0x04	; 4
    2724:	99 f5       	brne	.+102    	; 0x278c <__fpcmp_parts_f+0x88>
    2726:	81 81       	ldd	r24, Z+1	; 0x01
    2728:	68 2f       	mov	r22, r24
    272a:	70 e0       	ldi	r23, 0x00	; 0
    272c:	61 1b       	sub	r22, r17
    272e:	71 09       	sbc	r23, r1
    2730:	3f c0       	rjmp	.+126    	; 0x27b0 <__fpcmp_parts_f+0xac>
    2732:	84 30       	cpi	r24, 0x04	; 4
    2734:	21 f0       	breq	.+8      	; 0x273e <__fpcmp_parts_f+0x3a>
    2736:	92 30       	cpi	r25, 0x02	; 2
    2738:	31 f4       	brne	.+12     	; 0x2746 <__fpcmp_parts_f+0x42>
    273a:	82 30       	cpi	r24, 0x02	; 2
    273c:	b9 f1       	breq	.+110    	; 0x27ac <__fpcmp_parts_f+0xa8>
    273e:	81 81       	ldd	r24, Z+1	; 0x01
    2740:	88 23       	and	r24, r24
    2742:	89 f1       	breq	.+98     	; 0x27a6 <__fpcmp_parts_f+0xa2>
    2744:	2d c0       	rjmp	.+90     	; 0x27a0 <__fpcmp_parts_f+0x9c>
    2746:	11 96       	adiw	r26, 0x01	; 1
    2748:	1c 91       	ld	r17, X
    274a:	11 97       	sbiw	r26, 0x01	; 1
    274c:	82 30       	cpi	r24, 0x02	; 2
    274e:	f1 f0       	breq	.+60     	; 0x278c <__fpcmp_parts_f+0x88>
    2750:	81 81       	ldd	r24, Z+1	; 0x01
    2752:	18 17       	cp	r17, r24
    2754:	d9 f4       	brne	.+54     	; 0x278c <__fpcmp_parts_f+0x88>
    2756:	12 96       	adiw	r26, 0x02	; 2
    2758:	2d 91       	ld	r18, X+
    275a:	3c 91       	ld	r19, X
    275c:	13 97       	sbiw	r26, 0x03	; 3
    275e:	82 81       	ldd	r24, Z+2	; 0x02
    2760:	93 81       	ldd	r25, Z+3	; 0x03
    2762:	82 17       	cp	r24, r18
    2764:	93 07       	cpc	r25, r19
    2766:	94 f0       	brlt	.+36     	; 0x278c <__fpcmp_parts_f+0x88>
    2768:	28 17       	cp	r18, r24
    276a:	39 07       	cpc	r19, r25
    276c:	bc f0       	brlt	.+46     	; 0x279c <__fpcmp_parts_f+0x98>
    276e:	14 96       	adiw	r26, 0x04	; 4
    2770:	8d 91       	ld	r24, X+
    2772:	9d 91       	ld	r25, X+
    2774:	0d 90       	ld	r0, X+
    2776:	bc 91       	ld	r27, X
    2778:	a0 2d       	mov	r26, r0
    277a:	24 81       	ldd	r18, Z+4	; 0x04
    277c:	35 81       	ldd	r19, Z+5	; 0x05
    277e:	46 81       	ldd	r20, Z+6	; 0x06
    2780:	57 81       	ldd	r21, Z+7	; 0x07
    2782:	28 17       	cp	r18, r24
    2784:	39 07       	cpc	r19, r25
    2786:	4a 07       	cpc	r20, r26
    2788:	5b 07       	cpc	r21, r27
    278a:	18 f4       	brcc	.+6      	; 0x2792 <__fpcmp_parts_f+0x8e>
    278c:	11 23       	and	r17, r17
    278e:	41 f0       	breq	.+16     	; 0x27a0 <__fpcmp_parts_f+0x9c>
    2790:	0a c0       	rjmp	.+20     	; 0x27a6 <__fpcmp_parts_f+0xa2>
    2792:	82 17       	cp	r24, r18
    2794:	93 07       	cpc	r25, r19
    2796:	a4 07       	cpc	r26, r20
    2798:	b5 07       	cpc	r27, r21
    279a:	40 f4       	brcc	.+16     	; 0x27ac <__fpcmp_parts_f+0xa8>
    279c:	11 23       	and	r17, r17
    279e:	19 f0       	breq	.+6      	; 0x27a6 <__fpcmp_parts_f+0xa2>
    27a0:	61 e0       	ldi	r22, 0x01	; 1
    27a2:	70 e0       	ldi	r23, 0x00	; 0
    27a4:	05 c0       	rjmp	.+10     	; 0x27b0 <__fpcmp_parts_f+0xac>
    27a6:	6f ef       	ldi	r22, 0xFF	; 255
    27a8:	7f ef       	ldi	r23, 0xFF	; 255
    27aa:	02 c0       	rjmp	.+4      	; 0x27b0 <__fpcmp_parts_f+0xac>
    27ac:	60 e0       	ldi	r22, 0x00	; 0
    27ae:	70 e0       	ldi	r23, 0x00	; 0
    27b0:	cb 01       	movw	r24, r22
    27b2:	1f 91       	pop	r17
    27b4:	08 95       	ret

000027b6 <__prologue_saves__>:
    27b6:	2f 92       	push	r2
    27b8:	3f 92       	push	r3
    27ba:	4f 92       	push	r4
    27bc:	5f 92       	push	r5
    27be:	6f 92       	push	r6
    27c0:	7f 92       	push	r7
    27c2:	8f 92       	push	r8
    27c4:	9f 92       	push	r9
    27c6:	af 92       	push	r10
    27c8:	bf 92       	push	r11
    27ca:	cf 92       	push	r12
    27cc:	df 92       	push	r13
    27ce:	ef 92       	push	r14
    27d0:	ff 92       	push	r15
    27d2:	0f 93       	push	r16
    27d4:	1f 93       	push	r17
    27d6:	cf 93       	push	r28
    27d8:	df 93       	push	r29
    27da:	cd b7       	in	r28, 0x3d	; 61
    27dc:	de b7       	in	r29, 0x3e	; 62
    27de:	ca 1b       	sub	r28, r26
    27e0:	db 0b       	sbc	r29, r27
    27e2:	0f b6       	in	r0, 0x3f	; 63
    27e4:	f8 94       	cli
    27e6:	de bf       	out	0x3e, r29	; 62
    27e8:	0f be       	out	0x3f, r0	; 63
    27ea:	cd bf       	out	0x3d, r28	; 61
    27ec:	09 94       	ijmp

000027ee <__epilogue_restores__>:
    27ee:	2a 88       	ldd	r2, Y+18	; 0x12
    27f0:	39 88       	ldd	r3, Y+17	; 0x11
    27f2:	48 88       	ldd	r4, Y+16	; 0x10
    27f4:	5f 84       	ldd	r5, Y+15	; 0x0f
    27f6:	6e 84       	ldd	r6, Y+14	; 0x0e
    27f8:	7d 84       	ldd	r7, Y+13	; 0x0d
    27fa:	8c 84       	ldd	r8, Y+12	; 0x0c
    27fc:	9b 84       	ldd	r9, Y+11	; 0x0b
    27fe:	aa 84       	ldd	r10, Y+10	; 0x0a
    2800:	b9 84       	ldd	r11, Y+9	; 0x09
    2802:	c8 84       	ldd	r12, Y+8	; 0x08
    2804:	df 80       	ldd	r13, Y+7	; 0x07
    2806:	ee 80       	ldd	r14, Y+6	; 0x06
    2808:	fd 80       	ldd	r15, Y+5	; 0x05
    280a:	0c 81       	ldd	r16, Y+4	; 0x04
    280c:	1b 81       	ldd	r17, Y+3	; 0x03
    280e:	aa 81       	ldd	r26, Y+2	; 0x02
    2810:	b9 81       	ldd	r27, Y+1	; 0x01
    2812:	ce 0f       	add	r28, r30
    2814:	d1 1d       	adc	r29, r1
    2816:	0f b6       	in	r0, 0x3f	; 63
    2818:	f8 94       	cli
    281a:	de bf       	out	0x3e, r29	; 62
    281c:	0f be       	out	0x3f, r0	; 63
    281e:	cd bf       	out	0x3d, r28	; 61
    2820:	ed 01       	movw	r28, r26
    2822:	08 95       	ret

00002824 <itoa>:
    2824:	fb 01       	movw	r30, r22
    2826:	9f 01       	movw	r18, r30
    2828:	e8 94       	clt
    282a:	42 30       	cpi	r20, 0x02	; 2
    282c:	c4 f0       	brlt	.+48     	; 0x285e <itoa+0x3a>
    282e:	45 32       	cpi	r20, 0x25	; 37
    2830:	b4 f4       	brge	.+44     	; 0x285e <itoa+0x3a>
    2832:	4a 30       	cpi	r20, 0x0A	; 10
    2834:	29 f4       	brne	.+10     	; 0x2840 <itoa+0x1c>
    2836:	97 fb       	bst	r25, 7
    2838:	1e f4       	brtc	.+6      	; 0x2840 <itoa+0x1c>
    283a:	90 95       	com	r25
    283c:	81 95       	neg	r24
    283e:	9f 4f       	sbci	r25, 0xFF	; 255
    2840:	64 2f       	mov	r22, r20
    2842:	77 27       	eor	r23, r23
    2844:	0e 94 43 14 	call	0x2886	; 0x2886 <__udivmodhi4>
    2848:	80 5d       	subi	r24, 0xD0	; 208
    284a:	8a 33       	cpi	r24, 0x3A	; 58
    284c:	0c f0       	brlt	.+2      	; 0x2850 <itoa+0x2c>
    284e:	89 5d       	subi	r24, 0xD9	; 217
    2850:	81 93       	st	Z+, r24
    2852:	cb 01       	movw	r24, r22
    2854:	00 97       	sbiw	r24, 0x00	; 0
    2856:	a1 f7       	brne	.-24     	; 0x2840 <itoa+0x1c>
    2858:	16 f4       	brtc	.+4      	; 0x285e <itoa+0x3a>
    285a:	5d e2       	ldi	r21, 0x2D	; 45
    285c:	51 93       	st	Z+, r21
    285e:	10 82       	st	Z, r1
    2860:	c9 01       	movw	r24, r18
    2862:	0c 94 33 14 	jmp	0x2866	; 0x2866 <strrev>

00002866 <strrev>:
    2866:	dc 01       	movw	r26, r24
    2868:	fc 01       	movw	r30, r24
    286a:	67 2f       	mov	r22, r23
    286c:	71 91       	ld	r23, Z+
    286e:	77 23       	and	r23, r23
    2870:	e1 f7       	brne	.-8      	; 0x286a <strrev+0x4>
    2872:	32 97       	sbiw	r30, 0x02	; 2
    2874:	04 c0       	rjmp	.+8      	; 0x287e <strrev+0x18>
    2876:	7c 91       	ld	r23, X
    2878:	6d 93       	st	X+, r22
    287a:	70 83       	st	Z, r23
    287c:	62 91       	ld	r22, -Z
    287e:	ae 17       	cp	r26, r30
    2880:	bf 07       	cpc	r27, r31
    2882:	c8 f3       	brcs	.-14     	; 0x2876 <strrev+0x10>
    2884:	08 95       	ret

00002886 <__udivmodhi4>:
    2886:	aa 1b       	sub	r26, r26
    2888:	bb 1b       	sub	r27, r27
    288a:	51 e1       	ldi	r21, 0x11	; 17
    288c:	07 c0       	rjmp	.+14     	; 0x289c <__udivmodhi4_ep>

0000288e <__udivmodhi4_loop>:
    288e:	aa 1f       	adc	r26, r26
    2890:	bb 1f       	adc	r27, r27
    2892:	a6 17       	cp	r26, r22
    2894:	b7 07       	cpc	r27, r23
    2896:	10 f0       	brcs	.+4      	; 0x289c <__udivmodhi4_ep>
    2898:	a6 1b       	sub	r26, r22
    289a:	b7 0b       	sbc	r27, r23

0000289c <__udivmodhi4_ep>:
    289c:	88 1f       	adc	r24, r24
    289e:	99 1f       	adc	r25, r25
    28a0:	5a 95       	dec	r21
    28a2:	a9 f7       	brne	.-22     	; 0x288e <__udivmodhi4_loop>
    28a4:	80 95       	com	r24
    28a6:	90 95       	com	r25
    28a8:	bc 01       	movw	r22, r24
    28aa:	cd 01       	movw	r24, r26
    28ac:	08 95       	ret

000028ae <_exit>:
    28ae:	f8 94       	cli

000028b0 <__stop_program>:
    28b0:	ff cf       	rjmp	.-2      	; 0x28b0 <__stop_program>
